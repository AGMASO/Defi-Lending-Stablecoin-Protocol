"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/query-string";
exports.ids = ["vendor-chunks/query-string"];
exports.modules = {

/***/ "(ssr)/./node_modules/query-string/index.js":
/*!********************************************!*\
  !*** ./node_modules/query-string/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst strictUriEncode = __webpack_require__(/*! strict-uri-encode */ \"(ssr)/./node_modules/strict-uri-encode/index.js\");\nconst decodeComponent = __webpack_require__(/*! decode-uri-component */ \"(ssr)/./node_modules/decode-uri-component/index.js\");\nconst splitOnFirst = __webpack_require__(/*! split-on-first */ \"(ssr)/./node_modules/split-on-first/index.js\");\nconst filterObject = __webpack_require__(/*! filter-obj */ \"(ssr)/./node_modules/filter-obj/index.js\");\nconst isNullOrUndefined = (value)=>value === null || value === undefined;\nfunction encoderForArrayFormat(options) {\n    switch(options.arrayFormat){\n        case \"index\":\n            return (key)=>(result, value)=>{\n                    const index = result.length;\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[\",\n                                index,\n                                \"]\"\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"[\",\n                            encode(index, options),\n                            \"]=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n        case \"bracket\":\n            return (key)=>(result, value)=>{\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[]\"\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"[]=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n        case \"comma\":\n        case \"separator\":\n            return (key)=>(result, value)=>{\n                    if (value === null || value === undefined || value.length === 0) {\n                        return result;\n                    }\n                    if (result.length === 0) {\n                        return [\n                            [\n                                encode(key, options),\n                                \"=\",\n                                encode(value, options)\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        [\n                            result,\n                            encode(value, options)\n                        ].join(options.arrayFormatSeparator)\n                    ];\n                };\n        default:\n            return (key)=>(result, value)=>{\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            encode(key, options)\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n    }\n}\nfunction parserForArrayFormat(options) {\n    let result;\n    switch(options.arrayFormat){\n        case \"index\":\n            return (key, value, accumulator)=>{\n                result = /\\[(\\d*)\\]$/.exec(key);\n                key = key.replace(/\\[\\d*\\]$/, \"\");\n                if (!result) {\n                    accumulator[key] = value;\n                    return;\n                }\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = {};\n                }\n                accumulator[key][result[1]] = value;\n            };\n        case \"bracket\":\n            return (key, value, accumulator)=>{\n                result = /(\\[\\])$/.exec(key);\n                key = key.replace(/\\[\\]$/, \"\");\n                if (!result) {\n                    accumulator[key] = value;\n                    return;\n                }\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = [\n                        value\n                    ];\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], value);\n            };\n        case \"comma\":\n        case \"separator\":\n            return (key, value, accumulator)=>{\n                const isArray = typeof value === \"string\" && value.includes(options.arrayFormatSeparator);\n                const isEncodedArray = typeof value === \"string\" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n                value = isEncodedArray ? decode(value, options) : value;\n                const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item)=>decode(item, options)) : value === null ? value : decode(value, options);\n                accumulator[key] = newValue;\n            };\n        default:\n            return (key, value, accumulator)=>{\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = value;\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], value);\n            };\n    }\n}\nfunction validateArrayFormatSeparator(value) {\n    if (typeof value !== \"string\" || value.length !== 1) {\n        throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n}\nfunction encode(value, options) {\n    if (options.encode) {\n        return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n    }\n    return value;\n}\nfunction decode(value, options) {\n    if (options.decode) {\n        return decodeComponent(value);\n    }\n    return value;\n}\nfunction keysSorter(input) {\n    if (Array.isArray(input)) {\n        return input.sort();\n    }\n    if (typeof input === \"object\") {\n        return keysSorter(Object.keys(input)).sort((a, b)=>Number(a) - Number(b)).map((key)=>input[key]);\n    }\n    return input;\n}\nfunction removeHash(input) {\n    const hashStart = input.indexOf(\"#\");\n    if (hashStart !== -1) {\n        input = input.slice(0, hashStart);\n    }\n    return input;\n}\nfunction getHash(url) {\n    let hash = \"\";\n    const hashStart = url.indexOf(\"#\");\n    if (hashStart !== -1) {\n        hash = url.slice(hashStart);\n    }\n    return hash;\n}\nfunction extract(input) {\n    input = removeHash(input);\n    const queryStart = input.indexOf(\"?\");\n    if (queryStart === -1) {\n        return \"\";\n    }\n    return input.slice(queryStart + 1);\n}\nfunction parseValue(value, options) {\n    if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === \"string\" && value.trim() !== \"\") {\n        value = Number(value);\n    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) {\n        value = value.toLowerCase() === \"true\";\n    }\n    return value;\n}\nfunction parse(query, options) {\n    options = Object.assign({\n        decode: true,\n        sort: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\",\n        parseNumbers: false,\n        parseBooleans: false\n    }, options);\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const formatter = parserForArrayFormat(options);\n    // Create an object with no prototype\n    const ret = Object.create(null);\n    if (typeof query !== \"string\") {\n        return ret;\n    }\n    query = query.trim().replace(/^[?#&]/, \"\");\n    if (!query) {\n        return ret;\n    }\n    for (const param of query.split(\"&\")){\n        if (param === \"\") {\n            continue;\n        }\n        let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, \" \") : param, \"=\");\n        // Missing `=` should be `null`:\n        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n        value = value === undefined ? null : [\n            \"comma\",\n            \"separator\"\n        ].includes(options.arrayFormat) ? value : decode(value, options);\n        formatter(decode(key, options), value, ret);\n    }\n    for (const key of Object.keys(ret)){\n        const value = ret[key];\n        if (typeof value === \"object\" && value !== null) {\n            for (const k of Object.keys(value)){\n                value[k] = parseValue(value[k], options);\n            }\n        } else {\n            ret[key] = parseValue(value, options);\n        }\n    }\n    if (options.sort === false) {\n        return ret;\n    }\n    return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key)=>{\n        const value = ret[key];\n        if (Boolean(value) && typeof value === \"object\" && !Array.isArray(value)) {\n            // Sort object keys, not values\n            result[key] = keysSorter(value);\n        } else {\n            result[key] = value;\n        }\n        return result;\n    }, Object.create(null));\n}\nexports.extract = extract;\nexports.parse = parse;\nexports.stringify = (object, options)=>{\n    if (!object) {\n        return \"\";\n    }\n    options = Object.assign({\n        encode: true,\n        strict: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\"\n    }, options);\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const shouldFilter = (key)=>options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === \"\";\n    const formatter = encoderForArrayFormat(options);\n    const objectCopy = {};\n    for (const key of Object.keys(object)){\n        if (!shouldFilter(key)) {\n            objectCopy[key] = object[key];\n        }\n    }\n    const keys = Object.keys(objectCopy);\n    if (options.sort !== false) {\n        keys.sort(options.sort);\n    }\n    return keys.map((key)=>{\n        const value = object[key];\n        if (value === undefined) {\n            return \"\";\n        }\n        if (value === null) {\n            return encode(key, options);\n        }\n        if (Array.isArray(value)) {\n            return value.reduce(formatter(key), []).join(\"&\");\n        }\n        return encode(key, options) + \"=\" + encode(value, options);\n    }).filter((x)=>x.length > 0).join(\"&\");\n};\nexports.parseUrl = (url, options)=>{\n    options = Object.assign({\n        decode: true\n    }, options);\n    const [url_, hash] = splitOnFirst(url, \"#\");\n    return Object.assign({\n        url: url_.split(\"?\")[0] || \"\",\n        query: parse(extract(url), options)\n    }, options && options.parseFragmentIdentifier && hash ? {\n        fragmentIdentifier: decode(hash, options)\n    } : {});\n};\nexports.stringifyUrl = (object, options)=>{\n    options = Object.assign({\n        encode: true,\n        strict: true\n    }, options);\n    const url = removeHash(object.url).split(\"?\")[0] || \"\";\n    const queryFromUrl = exports.extract(object.url);\n    const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n        sort: false\n    });\n    const query = Object.assign(parsedQueryFromUrl, object.query);\n    let queryString = exports.stringify(query, options);\n    if (queryString) {\n        queryString = `?${queryString}`;\n    }\n    let hash = getHash(object.url);\n    if (object.fragmentIdentifier) {\n        hash = `#${encode(object.fragmentIdentifier, options)}`;\n    }\n    return `${url}${queryString}${hash}`;\n};\nexports.pick = (input, filter, options)=>{\n    options = Object.assign({\n        parseFragmentIdentifier: true\n    }, options);\n    const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);\n    return exports.stringifyUrl({\n        url,\n        query: filterObject(query, filter),\n        fragmentIdentifier\n    }, options);\n};\nexports.exclude = (input, filter, options)=>{\n    const exclusionFilter = Array.isArray(filter) ? (key)=>!filter.includes(key) : (key, value)=>!filter(key, value);\n    return exports.pick(input, exclusionFilter, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/query-string/index.js\n");

/***/ })

};
;