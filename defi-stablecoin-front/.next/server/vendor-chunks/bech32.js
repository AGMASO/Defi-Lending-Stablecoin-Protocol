"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bech32";
exports.ids = ["vendor-chunks/bech32"];
exports.modules = {

/***/ "(ssr)/./node_modules/bech32/index.js":
/*!**************************************!*\
  !*** ./node_modules/bech32/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nvar ALPHABET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\";\n// pre-compute lookup table\nvar ALPHABET_MAP = {};\nfor(var z = 0; z < ALPHABET.length; z++){\n    var x = ALPHABET.charAt(z);\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + \" is ambiguous\");\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    var b = pre >> 25;\n    return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\nfunction prefixChk(prefix) {\n    var chk = 1;\n    for(var i = 0; i < prefix.length; ++i){\n        var c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126) return \"Invalid prefix (\" + prefix + \")\";\n        chk = polymodStep(chk) ^ c >> 5;\n    }\n    chk = polymodStep(chk);\n    for(i = 0; i < prefix.length; ++i){\n        var v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ v & 0x1f;\n    }\n    return chk;\n}\nfunction encode(prefix, words, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (prefix.length + 7 + words.length > LIMIT) throw new TypeError(\"Exceeds length limit\");\n    prefix = prefix.toLowerCase();\n    // determine chk mod\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") throw new Error(chk);\n    var result = prefix + \"1\";\n    for(var i = 0; i < words.length; ++i){\n        var x = words[i];\n        if (x >> 5 !== 0) throw new Error(\"Non 5-bit word\");\n        chk = polymodStep(chk) ^ x;\n        result += ALPHABET.charAt(x);\n    }\n    for(i = 0; i < 6; ++i){\n        chk = polymodStep(chk);\n    }\n    chk ^= 1;\n    for(i = 0; i < 6; ++i){\n        var v = chk >> (5 - i) * 5 & 0x1f;\n        result += ALPHABET.charAt(v);\n    }\n    return result;\n}\nfunction __decode(str, LIMIT) {\n    LIMIT = LIMIT || 90;\n    if (str.length < 8) return str + \" too short\";\n    if (str.length > LIMIT) return \"Exceeds length limit\";\n    // don't allow mixed case\n    var lowered = str.toLowerCase();\n    var uppered = str.toUpperCase();\n    if (str !== lowered && str !== uppered) return \"Mixed-case string \" + str;\n    str = lowered;\n    var split = str.lastIndexOf(\"1\");\n    if (split === -1) return \"No separator character for \" + str;\n    if (split === 0) return \"Missing prefix for \" + str;\n    var prefix = str.slice(0, split);\n    var wordChars = str.slice(split + 1);\n    if (wordChars.length < 6) return \"Data too short\";\n    var chk = prefixChk(prefix);\n    if (typeof chk === \"string\") return chk;\n    var words = [];\n    for(var i = 0; i < wordChars.length; ++i){\n        var c = wordChars.charAt(i);\n        var v = ALPHABET_MAP[c];\n        if (v === undefined) return \"Unknown character \" + c;\n        chk = polymodStep(chk) ^ v;\n        // not in the checksum?\n        if (i + 6 >= wordChars.length) continue;\n        words.push(v);\n    }\n    if (chk !== 1) return \"Invalid checksum for \" + str;\n    return {\n        prefix: prefix,\n        words: words\n    };\n}\nfunction decodeUnsafe() {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n}\nfunction decode(str) {\n    var res = __decode.apply(null, arguments);\n    if (typeof res === \"object\") return res;\n    throw new Error(res);\n}\nfunction convert(data, inBits, outBits, pad) {\n    var value = 0;\n    var bits = 0;\n    var maxV = (1 << outBits) - 1;\n    var result = [];\n    for(var i = 0; i < data.length; ++i){\n        value = value << inBits | data[i];\n        bits += inBits;\n        while(bits >= outBits){\n            bits -= outBits;\n            result.push(value >> bits & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push(value << outBits - bits & maxV);\n        }\n    } else {\n        if (bits >= inBits) return \"Excess padding\";\n        if (value << outBits - bits & maxV) return \"Non-zero padding\";\n    }\n    return result;\n}\nfunction toWordsUnsafe(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n}\nfunction toWords(bytes) {\n    var res = convert(bytes, 8, 5, true);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nfunction fromWordsUnsafe(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n}\nfunction fromWords(words) {\n    var res = convert(words, 5, 8, false);\n    if (Array.isArray(res)) return res;\n    throw new Error(res);\n}\nmodule.exports = {\n    decodeUnsafe: decodeUnsafe,\n    decode: decode,\n    encode: encode,\n    toWordsUnsafe: toWordsUnsafe,\n    toWords: toWords,\n    fromWordsUnsafe: fromWordsUnsafe,\n    fromWords: fromWords\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bech32/index.js\n");

/***/ })

};
;