"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/focusManager.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FocusManager: () => (/* binding */ FocusManager),\n/* harmony export */   focusManager: () => (/* binding */ focusManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nclass FocusManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onFocus)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onFocus(); // Listen to visibillitychange and focus\n                window.addEventListener(\"visibilitychange\", listener, false);\n                window.addEventListener(\"focus\", listener, false);\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    window.removeEventListener(\"visibilitychange\", listener);\n                    window.removeEventListener(\"focus\", listener);\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((focused)=>{\n            if (typeof focused === \"boolean\") {\n                this.setFocused(focused);\n            } else {\n                this.onFocus();\n            }\n        });\n    }\n    setFocused(focused) {\n        const changed = this.focused !== focused;\n        if (changed) {\n            this.focused = focused;\n            this.onFocus();\n        }\n    }\n    onFocus() {\n        this.listeners.forEach(({ listener })=>{\n            listener();\n        });\n    }\n    isFocused() {\n        if (typeof this.focused === \"boolean\") {\n            return this.focused;\n        } // document global can be unavailable in react native\n        if (typeof document === \"undefined\") {\n            return true;\n        }\n        return [\n            undefined,\n            \"visible\",\n            \"prerender\"\n        ].includes(document.visibilityState);\n    }\n}\nconst focusManager = new FocusManager();\n //# sourceMappingURL=focusManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2ZvY3VzTWFuYWdlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFrRDtBQUNYO0FBRXZDLE1BQU1FLHFCQUFxQkYsMkRBQVlBO0lBQ3JDRyxhQUFjO1FBQ1osS0FBSztRQUVMLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxDQUFBQTtZQUNYLG1FQUFtRTtZQUNuRSx1RUFBdUU7WUFDdkUsSUFBSSxDQUFDSixnREFBUUEsSUFBSUssT0FBT0MsZ0JBQWdCLEVBQUU7Z0JBQ3hDLE1BQU1DLFdBQVcsSUFBTUgsV0FBVyx3Q0FBd0M7Z0JBRzFFQyxPQUFPQyxnQkFBZ0IsQ0FBQyxvQkFBb0JDLFVBQVU7Z0JBQ3RERixPQUFPQyxnQkFBZ0IsQ0FBQyxTQUFTQyxVQUFVO2dCQUMzQyxPQUFPO29CQUNMLGlEQUFpRDtvQkFDakRGLE9BQU9HLG1CQUFtQixDQUFDLG9CQUFvQkQ7b0JBQy9DRixPQUFPRyxtQkFBbUIsQ0FBQyxTQUFTRDtnQkFDdEM7WUFDRjtZQUVBO1FBQ0Y7SUFDRjtJQUVBRSxjQUFjO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDUixLQUFLO1FBQ2xDO0lBQ0Y7SUFFQVMsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxJQUFJO1lBQ3hCLElBQUlDO1lBRUhBLENBQUFBLGdCQUFnQixJQUFJLENBQUNKLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUksY0FBY0MsSUFBSSxDQUFDLElBQUk7WUFDekUsSUFBSSxDQUFDTCxPQUFPLEdBQUdNO1FBQ2pCO0lBQ0Y7SUFFQUwsaUJBQWlCUixLQUFLLEVBQUU7UUFDdEIsSUFBSWM7UUFFSixJQUFJLENBQUNkLEtBQUssR0FBR0E7UUFDWmMsQ0FBQUEsaUJBQWlCLElBQUksQ0FBQ1AsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJTyxlQUFlRixJQUFJLENBQUMsSUFBSTtRQUMzRSxJQUFJLENBQUNMLE9BQU8sR0FBR1AsTUFBTWUsQ0FBQUE7WUFDbkIsSUFBSSxPQUFPQSxZQUFZLFdBQVc7Z0JBQ2hDLElBQUksQ0FBQ0MsVUFBVSxDQUFDRDtZQUNsQixPQUFPO2dCQUNMLElBQUksQ0FBQ2QsT0FBTztZQUNkO1FBQ0Y7SUFDRjtJQUVBZSxXQUFXRCxPQUFPLEVBQUU7UUFDbEIsTUFBTUUsVUFBVSxJQUFJLENBQUNGLE9BQU8sS0FBS0E7UUFFakMsSUFBSUUsU0FBUztZQUNYLElBQUksQ0FBQ0YsT0FBTyxHQUFHQTtZQUNmLElBQUksQ0FBQ2QsT0FBTztRQUNkO0lBQ0Y7SUFFQUEsVUFBVTtRQUNSLElBQUksQ0FBQ2lCLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLENBQUMsRUFDdEJmLFFBQVEsRUFDVDtZQUNDQTtRQUNGO0lBQ0Y7SUFFQWdCLFlBQVk7UUFDVixJQUFJLE9BQU8sSUFBSSxDQUFDTCxPQUFPLEtBQUssV0FBVztZQUNyQyxPQUFPLElBQUksQ0FBQ0EsT0FBTztRQUNyQixFQUFFLHFEQUFxRDtRQUd2RCxJQUFJLE9BQU9NLGFBQWEsYUFBYTtZQUNuQyxPQUFPO1FBQ1Q7UUFFQSxPQUFPO1lBQUNSO1lBQVc7WUFBVztTQUFZLENBQUNTLFFBQVEsQ0FBQ0QsU0FBU0UsZUFBZTtJQUM5RTtBQUVGO0FBQ0EsTUFBTUMsZUFBZSxJQUFJMUI7QUFFYSxDQUN0Qyx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvZm9jdXNNYW5hZ2VyLm1qcz8wOGYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlLm1qcyc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuY2xhc3MgRm9jdXNNYW5hZ2VyIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2V0dXAgPSBvbkZvY3VzID0+IHtcbiAgICAgIC8vIGFkZEV2ZW50TGlzdGVuZXIgZG9lcyBub3QgZXhpc3QgaW4gUmVhY3QgTmF0aXZlLCBidXQgd2luZG93IGRvZXNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4gb25Gb2N1cygpOyAvLyBMaXN0ZW4gdG8gdmlzaWJpbGxpdHljaGFuZ2UgYW5kIGZvY3VzXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH07XG4gIH1cblxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuc2V0dXApO1xuICAgIH1cbiAgfVxuXG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB2YXIgX3RoaXMkY2xlYW51cDtcblxuICAgICAgKF90aGlzJGNsZWFudXAgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmNsZWFudXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHZhciBfdGhpcyRjbGVhbnVwMjtcblxuICAgIHRoaXMuc2V0dXAgPSBzZXR1cDtcbiAgICAoX3RoaXMkY2xlYW51cDIgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwMi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuY2xlYW51cCA9IHNldHVwKGZvY3VzZWQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhpcy5zZXRGb2N1c2VkKGZvY3VzZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXRGb2N1c2VkKGZvY3VzZWQpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5mb2N1c2VkICE9PSBmb2N1c2VkO1xuXG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuZm9jdXNlZCA9IGZvY3VzZWQ7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKHtcbiAgICAgIGxpc3RlbmVyXG4gICAgfSkgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzRm9jdXNlZCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZm9jdXNlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb2N1c2VkO1xuICAgIH0gLy8gZG9jdW1lbnQgZ2xvYmFsIGNhbiBiZSB1bmF2YWlsYWJsZSBpbiByZWFjdCBuYXRpdmVcblxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBbdW5kZWZpbmVkLCAndmlzaWJsZScsICdwcmVyZW5kZXInXS5pbmNsdWRlcyhkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICB9XG5cbn1cbmNvbnN0IGZvY3VzTWFuYWdlciA9IG5ldyBGb2N1c01hbmFnZXIoKTtcblxuZXhwb3J0IHsgRm9jdXNNYW5hZ2VyLCBmb2N1c01hbmFnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzTWFuYWdlci5tanMubWFwXG4iXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJGb2N1c01hbmFnZXIiLCJjb25zdHJ1Y3RvciIsInNldHVwIiwib25Gb2N1cyIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblN1YnNjcmliZSIsImNsZWFudXAiLCJzZXRFdmVudExpc3RlbmVyIiwib25VbnN1YnNjcmliZSIsImhhc0xpc3RlbmVycyIsIl90aGlzJGNsZWFudXAiLCJjYWxsIiwidW5kZWZpbmVkIiwiX3RoaXMkY2xlYW51cDIiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImNoYW5nZWQiLCJsaXN0ZW5lcnMiLCJmb3JFYWNoIiwiaXNGb2N1c2VkIiwiZG9jdW1lbnQiLCJpbmNsdWRlcyIsInZpc2liaWxpdHlTdGF0ZSIsImZvY3VzTWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/hydration.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/hydration.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultShouldDehydrateMutation: () => (/* binding */ defaultShouldDehydrateMutation),\n/* harmony export */   defaultShouldDehydrateQuery: () => (/* binding */ defaultShouldDehydrateQuery),\n/* harmony export */   dehydrate: () => (/* binding */ dehydrate),\n/* harmony export */   hydrate: () => (/* binding */ hydrate)\n/* harmony export */ });\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n    return {\n        mutationKey: mutation.options.mutationKey,\n        state: mutation.state\n    };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query) {\n    return {\n        state: query.state,\n        queryKey: query.queryKey,\n        queryHash: query.queryHash\n    };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n}\nfunction dehydrate(client, options = {}) {\n    const mutations = [];\n    const queries = [];\n    if (options.dehydrateMutations !== false) {\n        const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n        client.getMutationCache().getAll().forEach((mutation)=>{\n            if (shouldDehydrateMutation(mutation)) {\n                mutations.push(dehydrateMutation(mutation));\n            }\n        });\n    }\n    if (options.dehydrateQueries !== false) {\n        const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n        client.getQueryCache().getAll().forEach((query)=>{\n            if (shouldDehydrateQuery(query)) {\n                queries.push(dehydrateQuery(query));\n            }\n        });\n    }\n    return {\n        mutations,\n        queries\n    };\n}\nfunction hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n        return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const queries = dehydratedState.queries || [];\n    mutations.forEach((dehydratedMutation)=>{\n        var _options$defaultOptio;\n        mutationCache.build(client, {\n            ...options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations,\n            mutationKey: dehydratedMutation.mutationKey\n        }, dehydratedMutation.state);\n    });\n    queries.forEach(({ queryKey, state, queryHash })=>{\n        var _options$defaultOptio2;\n        const query = queryCache.get(queryHash); // Do not hydrate if an existing query exists with newer data\n        if (query) {\n            if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n                // omit fetchStatus from dehydrated state\n                // so that query stays in its current fetchStatus\n                const { fetchStatus: _ignored, ...dehydratedQueryState } = state;\n                query.setState(dehydratedQueryState);\n            }\n            return;\n        } // Restore query\n        queryCache.build(client, {\n            ...options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries,\n            queryKey,\n            queryHash\n        }, // query being stuck in fetching state upon hydration\n        {\n            ...state,\n            fetchStatus: \"idle\"\n        });\n    });\n}\n //# sourceMappingURL=hydration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/hydration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNextPageParam: () => (/* binding */ getNextPageParam),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ getPreviousPageParam),\n/* harmony export */   hasNextPage: () => (/* binding */ hasNextPage),\n/* harmony export */   hasPreviousPage: () => (/* binding */ hasPreviousPage),\n/* harmony export */   infiniteQueryBehavior: () => (/* binding */ infiniteQueryBehavior)\n/* harmony export */ });\nfunction infiniteQueryBehavior() {\n    return {\n        onFetch: (context)=>{\n            context.fetchFn = ()=>{\n                var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n                const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n                const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n                const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n                const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"forward\";\n                const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === \"backward\";\n                const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n                const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n                let newPageParams = oldPageParams;\n                let cancelled = false;\n                const addSignalProperty = (object)=>{\n                    Object.defineProperty(object, \"signal\", {\n                        enumerable: true,\n                        get: ()=>{\n                            var _context$signal;\n                            if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                                cancelled = true;\n                            } else {\n                                var _context$signal2;\n                                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener(\"abort\", ()=>{\n                                    cancelled = true;\n                                });\n                            }\n                            return context.signal;\n                        }\n                    });\n                }; // Get query function\n                const queryFn = context.options.queryFn || (()=>Promise.reject(\"Missing queryFn for queryKey '\" + context.options.queryHash + \"'\"));\n                const buildNewPages = (pages, param, page, previous)=>{\n                    newPageParams = previous ? [\n                        param,\n                        ...newPageParams\n                    ] : [\n                        ...newPageParams,\n                        param\n                    ];\n                    return previous ? [\n                        page,\n                        ...pages\n                    ] : [\n                        ...pages,\n                        page\n                    ];\n                }; // Create function to fetch a page\n                const fetchPage = (pages, manual, param, previous)=>{\n                    if (cancelled) {\n                        return Promise.reject(\"Cancelled\");\n                    }\n                    if (typeof param === \"undefined\" && !manual && pages.length) {\n                        return Promise.resolve(pages);\n                    }\n                    const queryFnContext = {\n                        queryKey: context.queryKey,\n                        pageParam: param,\n                        meta: context.options.meta\n                    };\n                    addSignalProperty(queryFnContext);\n                    const queryFnResult = queryFn(queryFnContext);\n                    const promise = Promise.resolve(queryFnResult).then((page)=>buildNewPages(pages, param, page, previous));\n                    return promise;\n                };\n                let promise; // Fetch first page?\n                if (!oldPages.length) {\n                    promise = fetchPage([]);\n                } else if (isFetchingNextPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param);\n                } else if (isFetchingPreviousPage) {\n                    const manual = typeof pageParam !== \"undefined\";\n                    const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n                    promise = fetchPage(oldPages, manual, param, true);\n                } else {\n                    newPageParams = [];\n                    const manual = typeof context.options.getNextPageParam === \"undefined\";\n                    const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n                    promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n                    for(let i = 1; i < oldPages.length; i++){\n                        promise = promise.then((pages)=>{\n                            const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n                            if (shouldFetchNextPage) {\n                                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                                return fetchPage(pages, manual, param);\n                            }\n                            return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n                        });\n                    }\n                }\n                const finalPromise = promise.then((pages)=>({\n                        pages,\n                        pageParams: newPageParams\n                    }));\n                return finalPromise;\n            };\n        }\n    };\n}\nfunction getNextPageParam(options, pages) {\n    return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n    return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */ function hasNextPage(options, pages) {\n    if (options.getNextPageParam && Array.isArray(pages)) {\n        const nextPageParam = getNextPageParam(options, pages);\n        return typeof nextPageParam !== \"undefined\" && nextPageParam !== null && nextPageParam !== false;\n    }\n    return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */ function hasPreviousPage(options, pages) {\n    if (options.getPreviousPageParam && Array.isArray(pages)) {\n        const previousPageParam = getPreviousPageParam(options, pages);\n        return typeof previousPageParam !== \"undefined\" && previousPageParam !== null && previousPageParam !== false;\n    }\n    return;\n}\n //# sourceMappingURL=infiniteQueryBehavior.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfiniteQueryObserver: () => (/* binding */ InfiniteQueryObserver)\n/* harmony export */ });\n/* harmony import */ var _queryObserver_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryObserver.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var _infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./infiniteQueryBehavior.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\");\n\n\nclass InfiniteQueryObserver extends _queryObserver_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryObserver {\n    // Type override\n    // Type override\n    // Type override\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(client, options){\n        super(client, options);\n    }\n    bindMethods() {\n        super.bindMethods();\n        this.fetchNextPage = this.fetchNextPage.bind(this);\n        this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n    setOptions(options, notifyOptions) {\n        super.setOptions({\n            ...options,\n            behavior: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.infiniteQueryBehavior)()\n        }, notifyOptions);\n    }\n    getOptimisticResult(options) {\n        options.behavior = (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.infiniteQueryBehavior)();\n        return super.getOptimisticResult(options);\n    }\n    fetchNextPage({ pageParam, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                fetchMore: {\n                    direction: \"forward\",\n                    pageParam\n                }\n            }\n        });\n    }\n    fetchPreviousPage({ pageParam, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                fetchMore: {\n                    direction: \"backward\",\n                    pageParam\n                }\n            }\n        });\n    }\n    createResult(query, options) {\n        var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n        const { state } = query;\n        const result = super.createResult(query, options);\n        const { isFetching, isRefetching } = result;\n        const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === \"forward\";\n        const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === \"backward\";\n        return {\n            ...result,\n            fetchNextPage: this.fetchNextPage,\n            fetchPreviousPage: this.fetchPreviousPage,\n            hasNextPage: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.hasNextPage)(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n            hasPreviousPage: (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_1__.hasPreviousPage)(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n            isFetchingNextPage,\n            isFetchingPreviousPage,\n            isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n        };\n    }\n}\n //# sourceMappingURL=infiniteQueryObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2luZmluaXRlUXVlcnlPYnNlcnZlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBQzhDO0FBRWxHLE1BQU1JLDhCQUE4QkosNkRBQWFBO0lBQy9DLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLHFFQUFxRTtJQUNyRUssWUFBWUMsTUFBTSxFQUFFQyxPQUFPLENBQUU7UUFDM0IsS0FBSyxDQUFDRCxRQUFRQztJQUNoQjtJQUVBQyxjQUFjO1FBQ1osS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsYUFBYSxHQUFHLElBQUksQ0FBQ0EsYUFBYSxDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUNqRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHLElBQUksQ0FBQ0EsaUJBQWlCLENBQUNELElBQUksQ0FBQyxJQUFJO0lBQzNEO0lBRUFFLFdBQVdMLE9BQU8sRUFBRU0sYUFBYSxFQUFFO1FBQ2pDLEtBQUssQ0FBQ0QsV0FBVztZQUFFLEdBQUdMLE9BQU87WUFDM0JPLFVBQVViLGlGQUFxQkE7UUFDakMsR0FBR1k7SUFDTDtJQUVBRSxvQkFBb0JSLE9BQU8sRUFBRTtRQUMzQkEsUUFBUU8sUUFBUSxHQUFHYixpRkFBcUJBO1FBQ3hDLE9BQU8sS0FBSyxDQUFDYyxvQkFBb0JSO0lBQ25DO0lBRUFFLGNBQWMsRUFDWk8sU0FBUyxFQUNULEdBQUdULFNBQ0osR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNOLE9BQU8sSUFBSSxDQUFDVSxLQUFLLENBQUM7WUFBRSxHQUFHVixPQUFPO1lBQzVCVyxNQUFNO2dCQUNKQyxXQUFXO29CQUNUQyxXQUFXO29CQUNYSjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUVBTCxrQkFBa0IsRUFDaEJLLFNBQVMsRUFDVCxHQUFHVCxTQUNKLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDTixPQUFPLElBQUksQ0FBQ1UsS0FBSyxDQUFDO1lBQUUsR0FBR1YsT0FBTztZQUM1QlcsTUFBTTtnQkFDSkMsV0FBVztvQkFDVEMsV0FBVztvQkFDWEo7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFFQUssYUFBYUMsS0FBSyxFQUFFZixPQUFPLEVBQUU7UUFDM0IsSUFBSWdCLGtCQUFrQkMsdUJBQXVCQyxtQkFBbUJDLHVCQUF1QkMsYUFBYUM7UUFFcEcsTUFBTSxFQUNKQyxLQUFLLEVBQ04sR0FBR1A7UUFDSixNQUFNUSxTQUFTLEtBQUssQ0FBQ1QsYUFBYUMsT0FBT2Y7UUFDekMsTUFBTSxFQUNKd0IsVUFBVSxFQUNWQyxZQUFZLEVBQ2IsR0FBR0Y7UUFDSixNQUFNRyxxQkFBcUJGLGNBQWMsQ0FBQyxDQUFDUixtQkFBbUJNLE1BQU1LLFNBQVMsS0FBSyxPQUFPLEtBQUssSUFBSSxDQUFDVix3QkFBd0JELGlCQUFpQkosU0FBUyxLQUFLLE9BQU8sS0FBSyxJQUFJSyxzQkFBc0JKLFNBQVMsTUFBTTtRQUMvTSxNQUFNZSx5QkFBeUJKLGNBQWMsQ0FBQyxDQUFDTixvQkFBb0JJLE1BQU1LLFNBQVMsS0FBSyxPQUFPLEtBQUssSUFBSSxDQUFDUix3QkFBd0JELGtCQUFrQk4sU0FBUyxLQUFLLE9BQU8sS0FBSyxJQUFJTyxzQkFBc0JOLFNBQVMsTUFBTTtRQUNyTixPQUFPO1lBQUUsR0FBR1UsTUFBTTtZQUNoQnJCLGVBQWUsSUFBSSxDQUFDQSxhQUFhO1lBQ2pDRSxtQkFBbUIsSUFBSSxDQUFDQSxpQkFBaUI7WUFDekNULGFBQWFBLHVFQUFXQSxDQUFDSyxTQUFTLENBQUNvQixjQUFjRSxNQUFNTyxJQUFJLEtBQUssT0FBTyxLQUFLLElBQUlULFlBQVlVLEtBQUs7WUFDakdsQyxpQkFBaUJBLDJFQUFlQSxDQUFDSSxTQUFTLENBQUNxQixlQUFlQyxNQUFNTyxJQUFJLEtBQUssT0FBTyxLQUFLLElBQUlSLGFBQWFTLEtBQUs7WUFDM0dKO1lBQ0FFO1lBQ0FILGNBQWNBLGdCQUFnQixDQUFDQyxzQkFBc0IsQ0FBQ0U7UUFDeEQ7SUFDRjtBQUVGO0FBRWlDLENBQ2pDLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250Ly4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL2xpYi9pbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIubWpzPzJhNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlPYnNlcnZlciB9IGZyb20gJy4vcXVlcnlPYnNlcnZlci5tanMnO1xuaW1wb3J0IHsgaW5maW5pdGVRdWVyeUJlaGF2aW9yLCBoYXNOZXh0UGFnZSwgaGFzUHJldmlvdXNQYWdlIH0gZnJvbSAnLi9pbmZpbml0ZVF1ZXJ5QmVoYXZpb3IubWpzJztcblxuY2xhc3MgSW5maW5pdGVRdWVyeU9ic2VydmVyIGV4dGVuZHMgUXVlcnlPYnNlcnZlciB7XG4gIC8vIFR5cGUgb3ZlcnJpZGVcbiAgLy8gVHlwZSBvdmVycmlkZVxuICAvLyBUeXBlIG92ZXJyaWRlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlbGVzcy1jb25zdHJ1Y3RvclxuICBjb25zdHJ1Y3RvcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjbGllbnQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYmluZE1ldGhvZHMoKSB7XG4gICAgc3VwZXIuYmluZE1ldGhvZHMoKTtcbiAgICB0aGlzLmZldGNoTmV4dFBhZ2UgPSB0aGlzLmZldGNoTmV4dFBhZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmZldGNoUHJldmlvdXNQYWdlID0gdGhpcy5mZXRjaFByZXZpb3VzUGFnZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc2V0T3B0aW9ucyhvcHRpb25zLCBub3RpZnlPcHRpb25zKSB7XG4gICAgc3VwZXIuc2V0T3B0aW9ucyh7IC4uLm9wdGlvbnMsXG4gICAgICBiZWhhdmlvcjogaW5maW5pdGVRdWVyeUJlaGF2aW9yKClcbiAgICB9LCBub3RpZnlPcHRpb25zKTtcbiAgfVxuXG4gIGdldE9wdGltaXN0aWNSZXN1bHQob3B0aW9ucykge1xuICAgIG9wdGlvbnMuYmVoYXZpb3IgPSBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IoKTtcbiAgICByZXR1cm4gc3VwZXIuZ2V0T3B0aW1pc3RpY1Jlc3VsdChvcHRpb25zKTtcbiAgfVxuXG4gIGZldGNoTmV4dFBhZ2Uoe1xuICAgIHBhZ2VQYXJhbSxcbiAgICAuLi5vcHRpb25zXG4gIH0gPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmZldGNoKHsgLi4ub3B0aW9ucyxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgZmV0Y2hNb3JlOiB7XG4gICAgICAgICAgZGlyZWN0aW9uOiAnZm9yd2FyZCcsXG4gICAgICAgICAgcGFnZVBhcmFtXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZldGNoUHJldmlvdXNQYWdlKHtcbiAgICBwYWdlUGFyYW0sXG4gICAgLi4ub3B0aW9uc1xuICB9ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaCh7IC4uLm9wdGlvbnMsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIGZldGNoTW9yZToge1xuICAgICAgICAgIGRpcmVjdGlvbjogJ2JhY2t3YXJkJyxcbiAgICAgICAgICBwYWdlUGFyYW1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlUmVzdWx0KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9zdGF0ZSRmZXRjaE1ldGEsIF9zdGF0ZSRmZXRjaE1ldGEkZmV0YywgX3N0YXRlJGZldGNoTWV0YTIsIF9zdGF0ZSRmZXRjaE1ldGEyJGZldCwgX3N0YXRlJGRhdGEsIF9zdGF0ZSRkYXRhMjtcblxuICAgIGNvbnN0IHtcbiAgICAgIHN0YXRlXG4gICAgfSA9IHF1ZXJ5O1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLmNyZWF0ZVJlc3VsdChxdWVyeSwgb3B0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgaXNGZXRjaGluZyxcbiAgICAgIGlzUmVmZXRjaGluZ1xuICAgIH0gPSByZXN1bHQ7XG4gICAgY29uc3QgaXNGZXRjaGluZ05leHRQYWdlID0gaXNGZXRjaGluZyAmJiAoKF9zdGF0ZSRmZXRjaE1ldGEgPSBzdGF0ZS5mZXRjaE1ldGEpID09IG51bGwgPyB2b2lkIDAgOiAoX3N0YXRlJGZldGNoTWV0YSRmZXRjID0gX3N0YXRlJGZldGNoTWV0YS5mZXRjaE1vcmUpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZmV0Y2hNZXRhJGZldGMuZGlyZWN0aW9uKSA9PT0gJ2ZvcndhcmQnO1xuICAgIGNvbnN0IGlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UgPSBpc0ZldGNoaW5nICYmICgoX3N0YXRlJGZldGNoTWV0YTIgPSBzdGF0ZS5mZXRjaE1ldGEpID09IG51bGwgPyB2b2lkIDAgOiAoX3N0YXRlJGZldGNoTWV0YTIkZmV0ID0gX3N0YXRlJGZldGNoTWV0YTIuZmV0Y2hNb3JlKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGZldGNoTWV0YTIkZmV0LmRpcmVjdGlvbikgPT09ICdiYWNrd2FyZCc7XG4gICAgcmV0dXJuIHsgLi4ucmVzdWx0LFxuICAgICAgZmV0Y2hOZXh0UGFnZTogdGhpcy5mZXRjaE5leHRQYWdlLFxuICAgICAgZmV0Y2hQcmV2aW91c1BhZ2U6IHRoaXMuZmV0Y2hQcmV2aW91c1BhZ2UsXG4gICAgICBoYXNOZXh0UGFnZTogaGFzTmV4dFBhZ2Uob3B0aW9ucywgKF9zdGF0ZSRkYXRhID0gc3RhdGUuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRkYXRhLnBhZ2VzKSxcbiAgICAgIGhhc1ByZXZpb3VzUGFnZTogaGFzUHJldmlvdXNQYWdlKG9wdGlvbnMsIChfc3RhdGUkZGF0YTIgPSBzdGF0ZS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGRhdGEyLnBhZ2VzKSxcbiAgICAgIGlzRmV0Y2hpbmdOZXh0UGFnZSxcbiAgICAgIGlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UsXG4gICAgICBpc1JlZmV0Y2hpbmc6IGlzUmVmZXRjaGluZyAmJiAhaXNGZXRjaGluZ05leHRQYWdlICYmICFpc0ZldGNoaW5nUHJldmlvdXNQYWdlXG4gICAgfTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEluZmluaXRlUXVlcnlPYnNlcnZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5maW5pdGVRdWVyeU9ic2VydmVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJRdWVyeU9ic2VydmVyIiwiaW5maW5pdGVRdWVyeUJlaGF2aW9yIiwiaGFzTmV4dFBhZ2UiLCJoYXNQcmV2aW91c1BhZ2UiLCJJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsIm9wdGlvbnMiLCJiaW5kTWV0aG9kcyIsImZldGNoTmV4dFBhZ2UiLCJiaW5kIiwiZmV0Y2hQcmV2aW91c1BhZ2UiLCJzZXRPcHRpb25zIiwibm90aWZ5T3B0aW9ucyIsImJlaGF2aW9yIiwiZ2V0T3B0aW1pc3RpY1Jlc3VsdCIsInBhZ2VQYXJhbSIsImZldGNoIiwibWV0YSIsImZldGNoTW9yZSIsImRpcmVjdGlvbiIsImNyZWF0ZVJlc3VsdCIsInF1ZXJ5IiwiX3N0YXRlJGZldGNoTWV0YSIsIl9zdGF0ZSRmZXRjaE1ldGEkZmV0YyIsIl9zdGF0ZSRmZXRjaE1ldGEyIiwiX3N0YXRlJGZldGNoTWV0YTIkZmV0IiwiX3N0YXRlJGRhdGEiLCJfc3RhdGUkZGF0YTIiLCJzdGF0ZSIsInJlc3VsdCIsImlzRmV0Y2hpbmciLCJpc1JlZmV0Y2hpbmciLCJpc0ZldGNoaW5nTmV4dFBhZ2UiLCJmZXRjaE1ldGEiLCJpc0ZldGNoaW5nUHJldmlvdXNQYWdlIiwiZGF0YSIsInBhZ2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/logger.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultLogger: () => (/* binding */ defaultLogger)\n/* harmony export */ });\nconst defaultLogger = console;\n //# sourceMappingURL=logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL2xvZ2dlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLGdCQUFnQkM7QUFFRyxDQUN6QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvbG9nZ2VyLm1qcz80MDAyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRlZmF1bHRMb2dnZXIgPSBjb25zb2xlO1xuXG5leHBvcnQgeyBkZWZhdWx0TG9nZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbImRlZmF1bHRMb2dnZXIiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutation.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   getDefaultState: () => (/* binding */ getDefaultState)\n/* harmony export */ });\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n// CLASS\nclass Mutation extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.defaultOptions = config.defaultOptions;\n        this.mutationId = config.mutationId;\n        this.mutationCache = config.mutationCache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.observers = [];\n        this.state = config.state || getDefaultState();\n        this.setOptions(config.options);\n        this.scheduleGc();\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.defaultOptions,\n            ...options\n        };\n        this.updateCacheTime(this.options.cacheTime);\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setState(state) {\n        this.dispatch({\n            type: \"setState\",\n            state\n        });\n    }\n    addObserver(observer) {\n        if (!this.observers.includes(observer)) {\n            this.observers.push(observer); // Stop the mutation from being garbage collected\n            this.clearGcTimeout();\n            this.mutationCache.notify({\n                type: \"observerAdded\",\n                mutation: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        this.observers = this.observers.filter((x)=>x !== observer);\n        this.scheduleGc();\n        this.mutationCache.notify({\n            type: \"observerRemoved\",\n            mutation: this,\n            observer\n        });\n    }\n    optionalRemove() {\n        if (!this.observers.length) {\n            if (this.state.status === \"loading\") {\n                this.scheduleGc();\n            } else {\n                this.mutationCache.remove(this);\n            }\n        }\n    }\n    continue() {\n        var _this$retryer$continu, _this$retryer;\n        return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n    }\n    async execute() {\n        const executeMutation = ()=>{\n            var _this$options$retry;\n            this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.createRetryer)({\n                fn: ()=>{\n                    if (!this.options.mutationFn) {\n                        return Promise.reject(\"No mutationFn found\");\n                    }\n                    return this.options.mutationFn(this.state.variables);\n                },\n                onFail: (failureCount, error)=>{\n                    this.dispatch({\n                        type: \"failed\",\n                        failureCount,\n                        error\n                    });\n                },\n                onPause: ()=>{\n                    this.dispatch({\n                        type: \"pause\"\n                    });\n                },\n                onContinue: ()=>{\n                    this.dispatch({\n                        type: \"continue\"\n                    });\n                },\n                retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode\n            });\n            return this.retryer.promise;\n        };\n        const restored = this.state.status === \"loading\";\n        try {\n            var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n            if (!restored) {\n                var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n                this.dispatch({\n                    type: \"loading\",\n                    variables: this.options.variables\n                }); // Notify cache callback\n                await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n                const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n                if (context !== this.state.context) {\n                    this.dispatch({\n                        type: \"loading\",\n                        context,\n                        variables: this.state.variables\n                    });\n                }\n            }\n            const data = await executeMutation(); // Notify cache callback\n            await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n            await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n            await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n            await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n            this.dispatch({\n                type: \"success\",\n                data\n            });\n            return data;\n        } catch (error) {\n            try {\n                var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n                // Notify cache callback\n                await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n                if (true) {\n                    this.logger.error(error);\n                }\n                await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n                await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n                await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n                throw error;\n            } finally{\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n        }\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        failureCount: action.failureCount,\n                        failureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        isPaused: true\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        isPaused: false\n                    };\n                case \"loading\":\n                    return {\n                        ...state,\n                        context: action.context,\n                        data: undefined,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        isPaused: !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_2__.canFetch)(this.options.networkMode),\n                        status: \"loading\",\n                        variables: action.variables\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        failureCount: 0,\n                        failureReason: null,\n                        error: null,\n                        status: \"success\",\n                        isPaused: false\n                    };\n                case \"error\":\n                    return {\n                        ...state,\n                        data: undefined,\n                        error: action.error,\n                        failureCount: state.failureCount + 1,\n                        failureReason: action.error,\n                        isPaused: false,\n                        status: \"error\"\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onMutationUpdate(action);\n            });\n            this.mutationCache.notify({\n                mutation: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState() {\n    return {\n        context: undefined,\n        data: undefined,\n        error: null,\n        failureCount: 0,\n        failureReason: null,\n        isPaused: false,\n        status: \"idle\",\n        variables: undefined\n    };\n}\n //# sourceMappingURL=mutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationCache: () => (/* binding */ MutationCache)\n/* harmony export */ });\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass MutationCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.mutations = [];\n        this.mutationId = 0;\n    }\n    build(client, options, state) {\n        const mutation = new _mutation_mjs__WEBPACK_IMPORTED_MODULE_1__.Mutation({\n            mutationCache: this,\n            logger: client.getLogger(),\n            mutationId: ++this.mutationId,\n            options: client.defaultMutationOptions(options),\n            state,\n            defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n        });\n        this.add(mutation);\n        return mutation;\n    }\n    add(mutation) {\n        this.mutations.push(mutation);\n        this.notify({\n            type: \"added\",\n            mutation\n        });\n    }\n    remove(mutation) {\n        this.mutations = this.mutations.filter((x)=>x !== mutation);\n        this.notify({\n            type: \"removed\",\n            mutation\n        });\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.mutations.forEach((mutation)=>{\n                this.remove(mutation);\n            });\n        });\n    }\n    getAll() {\n        return this.mutations;\n    }\n    find(filters) {\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.mutations.find((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    findAll(filters) {\n        return this.mutations.filter((mutation)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.matchMutation)(filters, mutation));\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>{\n            this.listeners.forEach(({ listener })=>{\n                listener(event);\n            });\n        });\n    }\n    resumePausedMutations() {\n        var _this$resuming;\n        this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(()=>{\n            const pausedMutations = this.mutations.filter((x)=>x.state.isPaused);\n            return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_2__.notifyManager.batch(()=>pausedMutations.reduce((promise, mutation)=>promise.then(()=>mutation.continue().catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.noop)), Promise.resolve()));\n        }).then(()=>{\n            this.resuming = undefined;\n        });\n        return this.resuming;\n    }\n}\n //# sourceMappingURL=mutationCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL211dGF0aW9uQ2FjaGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW9EO0FBQ1Y7QUFDUTtBQUNBO0FBRWxELFFBQVE7QUFDUixNQUFNSyxzQkFBc0JELDJEQUFZQTtJQUN0Q0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2xCLEtBQUs7UUFDTCxJQUFJLENBQUNBLE1BQU0sR0FBR0EsVUFBVSxDQUFDO1FBQ3pCLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7UUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDcEI7SUFFQUMsTUFBTUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtRQUM1QixNQUFNQyxXQUFXLElBQUliLG1EQUFRQSxDQUFDO1lBQzVCYyxlQUFlLElBQUk7WUFDbkJDLFFBQVFMLE9BQU9NLFNBQVM7WUFDeEJSLFlBQVksRUFBRSxJQUFJLENBQUNBLFVBQVU7WUFDN0JHLFNBQVNELE9BQU9PLHNCQUFzQixDQUFDTjtZQUN2Q0M7WUFDQU0sZ0JBQWdCUCxRQUFRUSxXQUFXLEdBQUdULE9BQU9VLG1CQUFtQixDQUFDVCxRQUFRUSxXQUFXLElBQUlFO1FBQzFGO1FBQ0EsSUFBSSxDQUFDQyxHQUFHLENBQUNUO1FBQ1QsT0FBT0E7SUFDVDtJQUVBUyxJQUFJVCxRQUFRLEVBQUU7UUFDWixJQUFJLENBQUNOLFNBQVMsQ0FBQ2dCLElBQUksQ0FBQ1Y7UUFDcEIsSUFBSSxDQUFDVyxNQUFNLENBQUM7WUFDVkMsTUFBTTtZQUNOWjtRQUNGO0lBQ0Y7SUFFQWEsT0FBT2IsUUFBUSxFQUFFO1FBQ2YsSUFBSSxDQUFDTixTQUFTLEdBQUcsSUFBSSxDQUFDQSxTQUFTLENBQUNvQixNQUFNLENBQUNDLENBQUFBLElBQUtBLE1BQU1mO1FBQ2xELElBQUksQ0FBQ1csTUFBTSxDQUFDO1lBQ1ZDLE1BQU07WUFDTlo7UUFDRjtJQUNGO0lBRUFnQixRQUFRO1FBQ045Qiw2REFBYUEsQ0FBQytCLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUN2QixTQUFTLENBQUN3QixPQUFPLENBQUNsQixDQUFBQTtnQkFDckIsSUFBSSxDQUFDYSxNQUFNLENBQUNiO1lBQ2Q7UUFDRjtJQUNGO0lBRUFtQixTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUN6QixTQUFTO0lBQ3ZCO0lBRUEwQixLQUFLQyxPQUFPLEVBQUU7UUFDWixJQUFJLE9BQU9BLFFBQVFDLEtBQUssS0FBSyxhQUFhO1lBQ3hDRCxRQUFRQyxLQUFLLEdBQUc7UUFDbEI7UUFFQSxPQUFPLElBQUksQ0FBQzVCLFNBQVMsQ0FBQzBCLElBQUksQ0FBQ3BCLENBQUFBLFdBQVlaLHlEQUFhQSxDQUFDaUMsU0FBU3JCO0lBQ2hFO0lBRUF1QixRQUFRRixPQUFPLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQzNCLFNBQVMsQ0FBQ29CLE1BQU0sQ0FBQ2QsQ0FBQUEsV0FBWVoseURBQWFBLENBQUNpQyxTQUFTckI7SUFDbEU7SUFFQVcsT0FBT2EsS0FBSyxFQUFFO1FBQ1p0Qyw2REFBYUEsQ0FBQytCLEtBQUssQ0FBQztZQUNsQixJQUFJLENBQUNRLFNBQVMsQ0FBQ1AsT0FBTyxDQUFDLENBQUMsRUFDdEJRLFFBQVEsRUFDVDtnQkFDQ0EsU0FBU0Y7WUFDWDtRQUNGO0lBQ0Y7SUFFQUcsd0JBQXdCO1FBQ3RCLElBQUlDO1FBRUosSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQyxDQUFDRCxpQkFBaUIsSUFBSSxDQUFDQyxRQUFRLEtBQUssT0FBT0QsaUJBQWlCRSxRQUFRQyxPQUFPLEVBQUMsRUFBR0MsSUFBSSxDQUFDO1lBQ25HLE1BQU1DLGtCQUFrQixJQUFJLENBQUN2QyxTQUFTLENBQUNvQixNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVoQixLQUFLLENBQUNtQyxRQUFRO1lBQ25FLE9BQU9oRCw2REFBYUEsQ0FBQytCLEtBQUssQ0FBQyxJQUFNZ0IsZ0JBQWdCRSxNQUFNLENBQUMsQ0FBQ0MsU0FBU3BDLFdBQWFvQyxRQUFRSixJQUFJLENBQUMsSUFBTWhDLFNBQVNxQyxRQUFRLEdBQUdDLEtBQUssQ0FBQ2pELDRDQUFJQSxJQUFJeUMsUUFBUUMsT0FBTztRQUNySixHQUFHQyxJQUFJLENBQUM7WUFDTixJQUFJLENBQUNILFFBQVEsR0FBR3JCO1FBQ2xCO1FBQ0EsT0FBTyxJQUFJLENBQUNxQixRQUFRO0lBQ3RCO0FBRUY7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL211dGF0aW9uQ2FjaGUubWpzP2NhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlci5tanMnO1xuaW1wb3J0IHsgTXV0YXRpb24gfSBmcm9tICcuL211dGF0aW9uLm1qcyc7XG5pbXBvcnQgeyBtYXRjaE11dGF0aW9uLCBub29wIH0gZnJvbSAnLi91dGlscy5tanMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUubWpzJztcblxuLy8gQ0xBU1NcbmNsYXNzIE11dGF0aW9uQ2FjaGUgZXh0ZW5kcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIHRoaXMubXV0YXRpb25zID0gW107XG4gICAgdGhpcy5tdXRhdGlvbklkID0gMDtcbiAgfVxuXG4gIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICBjb25zdCBtdXRhdGlvbiA9IG5ldyBNdXRhdGlvbih7XG4gICAgICBtdXRhdGlvbkNhY2hlOiB0aGlzLFxuICAgICAgbG9nZ2VyOiBjbGllbnQuZ2V0TG9nZ2VyKCksXG4gICAgICBtdXRhdGlvbklkOiArK3RoaXMubXV0YXRpb25JZCxcbiAgICAgIG9wdGlvbnM6IGNsaWVudC5kZWZhdWx0TXV0YXRpb25PcHRpb25zKG9wdGlvbnMpLFxuICAgICAgc3RhdGUsXG4gICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9ucy5tdXRhdGlvbktleSA/IGNsaWVudC5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMubXV0YXRpb25LZXkpIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgdGhpcy5hZGQobXV0YXRpb24pO1xuICAgIHJldHVybiBtdXRhdGlvbjtcbiAgfVxuXG4gIGFkZChtdXRhdGlvbikge1xuICAgIHRoaXMubXV0YXRpb25zLnB1c2gobXV0YXRpb24pO1xuICAgIHRoaXMubm90aWZ5KHtcbiAgICAgIHR5cGU6ICdhZGRlZCcsXG4gICAgICBtdXRhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5maWx0ZXIoeCA9PiB4ICE9PSBtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkoe1xuICAgICAgdHlwZTogJ3JlbW92ZWQnLFxuICAgICAgbXV0YXRpb25cbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4ge1xuICAgICAgdGhpcy5tdXRhdGlvbnMuZm9yRWFjaChtdXRhdGlvbiA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlKG11dGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucztcbiAgfVxuXG4gIGZpbmQoZmlsdGVycykge1xuICAgIGlmICh0eXBlb2YgZmlsdGVycy5leGFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZpbHRlcnMuZXhhY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maW5kKG11dGF0aW9uID0+IG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pKTtcbiAgfVxuXG4gIGZpbmRBbGwoZmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maWx0ZXIobXV0YXRpb24gPT4gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbikpO1xuICB9XG5cbiAgbm90aWZ5KGV2ZW50KSB7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKCh7XG4gICAgICAgIGxpc3RlbmVyXG4gICAgICB9KSA9PiB7XG4gICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzdW1lUGF1c2VkTXV0YXRpb25zKCkge1xuICAgIHZhciBfdGhpcyRyZXN1bWluZztcblxuICAgIHRoaXMucmVzdW1pbmcgPSAoKF90aGlzJHJlc3VtaW5nID0gdGhpcy5yZXN1bWluZykgIT0gbnVsbCA/IF90aGlzJHJlc3VtaW5nIDogUHJvbWlzZS5yZXNvbHZlKCkpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgcGF1c2VkTXV0YXRpb25zID0gdGhpcy5tdXRhdGlvbnMuZmlsdGVyKHggPT4geC5zdGF0ZS5pc1BhdXNlZCk7XG4gICAgICByZXR1cm4gbm90aWZ5TWFuYWdlci5iYXRjaCgoKSA9PiBwYXVzZWRNdXRhdGlvbnMucmVkdWNlKChwcm9taXNlLCBtdXRhdGlvbikgPT4gcHJvbWlzZS50aGVuKCgpID0+IG11dGF0aW9uLmNvbnRpbnVlKCkuY2F0Y2gobm9vcCkpLCBQcm9taXNlLnJlc29sdmUoKSkpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZXN1bWluZyA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5yZXN1bWluZztcbiAgfVxuXG59XG5cbmV4cG9ydCB7IE11dGF0aW9uQ2FjaGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0aW9uQ2FjaGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5vdGlmeU1hbmFnZXIiLCJNdXRhdGlvbiIsIm1hdGNoTXV0YXRpb24iLCJub29wIiwiU3Vic2NyaWJhYmxlIiwiTXV0YXRpb25DYWNoZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibXV0YXRpb25zIiwibXV0YXRpb25JZCIsImJ1aWxkIiwiY2xpZW50Iiwib3B0aW9ucyIsInN0YXRlIiwibXV0YXRpb24iLCJtdXRhdGlvbkNhY2hlIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiZGVmYXVsdE11dGF0aW9uT3B0aW9ucyIsImRlZmF1bHRPcHRpb25zIiwibXV0YXRpb25LZXkiLCJnZXRNdXRhdGlvbkRlZmF1bHRzIiwidW5kZWZpbmVkIiwiYWRkIiwicHVzaCIsIm5vdGlmeSIsInR5cGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJ4IiwiY2xlYXIiLCJiYXRjaCIsImZvckVhY2giLCJnZXRBbGwiLCJmaW5kIiwiZmlsdGVycyIsImV4YWN0IiwiZmluZEFsbCIsImV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJyZXN1bWVQYXVzZWRNdXRhdGlvbnMiLCJfdGhpcyRyZXN1bWluZyIsInJlc3VtaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicGF1c2VkTXV0YXRpb25zIiwiaXNQYXVzZWQiLCJyZWR1Y2UiLCJwcm9taXNlIiwiY29udGludWUiLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MutationObserver: () => (/* binding */ MutationObserver)\n/* harmony export */ });\n/* harmony import */ var _mutation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutation.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutation.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\n\n// CLASS\nclass MutationObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.setOptions(options);\n        this.bindMethods();\n        this.updateResult();\n    }\n    bindMethods() {\n        this.mutate = this.mutate.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    setOptions(options) {\n        var _this$currentMutation;\n        const prevOptions = this.options;\n        this.options = this.client.defaultMutationOptions(options);\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getMutationCache().notify({\n                type: \"observerOptionsUpdated\",\n                mutation: this.currentMutation,\n                observer: this\n            });\n        }\n        (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$currentMutation2;\n            (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n        }\n    }\n    onMutationUpdate(action) {\n        this.updateResult(); // Determine which callbacks to trigger\n        const notifyOptions = {\n            listeners: true\n        };\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = true;\n        } else if (action.type === \"error\") {\n            notifyOptions.onError = true;\n        }\n        this.notify(notifyOptions);\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    reset() {\n        this.currentMutation = undefined;\n        this.updateResult();\n        this.notify({\n            listeners: true\n        });\n    }\n    mutate(variables, options) {\n        this.mutateOptions = options;\n        if (this.currentMutation) {\n            this.currentMutation.removeObserver(this);\n        }\n        this.currentMutation = this.client.getMutationCache().build(this.client, {\n            ...this.options,\n            variables: typeof variables !== \"undefined\" ? variables : this.options.variables\n        });\n        this.currentMutation.addObserver(this);\n        return this.currentMutation.execute();\n    }\n    updateResult() {\n        const state = this.currentMutation ? this.currentMutation.state : (0,_mutation_mjs__WEBPACK_IMPORTED_MODULE_2__.getDefaultState)();\n        const result = {\n            ...state,\n            isLoading: state.status === \"loading\",\n            isSuccess: state.status === \"success\",\n            isError: state.status === \"error\",\n            isIdle: state.status === \"idle\",\n            mutate: this.mutate,\n            reset: this.reset\n        };\n        this.currentResult = result;\n    }\n    notify(options) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            // First trigger the mutate callbacks\n            if (this.mutateOptions && this.hasListeners()) {\n                if (options.onSuccess) {\n                    var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n                    (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n                } else if (options.onError) {\n                    var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n                    (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                    (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n                }\n            } // Then trigger the listeners\n            if (options.listeners) {\n                this.listeners.forEach(({ listener })=>{\n                    listener(this.currentResult);\n                });\n            }\n        });\n    }\n}\n //# sourceMappingURL=mutationObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNotifyManager: () => (/* binding */ createNotifyManager),\n/* harmony export */   notifyManager: () => (/* binding */ notifyManager)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nfunction createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = (callback)=>{\n        callback();\n    };\n    let batchNotifyFn = (callback)=>{\n        callback();\n    };\n    const batch = (callback)=>{\n        let result;\n        transactions++;\n        try {\n            result = callback();\n        } finally{\n            transactions--;\n            if (!transactions) {\n                flush();\n            }\n        }\n        return result;\n    };\n    const schedule = (callback)=>{\n        if (transactions) {\n            queue.push(callback);\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                notifyFn(callback);\n            });\n        }\n    };\n    /**\n   * All calls to the wrapped function will be batched.\n   */ const batchCalls = (callback)=>{\n        return (...args)=>{\n            schedule(()=>{\n                callback(...args);\n            });\n        };\n    };\n    const flush = ()=>{\n        const originalQueue = queue;\n        queue = [];\n        if (originalQueue.length) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.scheduleMicrotask)(()=>{\n                batchNotifyFn(()=>{\n                    originalQueue.forEach((callback)=>{\n                        notifyFn(callback);\n                    });\n                });\n            });\n        }\n    };\n    /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */ const setNotifyFunction = (fn)=>{\n        notifyFn = fn;\n    };\n    /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */ const setBatchNotifyFunction = (fn)=>{\n        batchNotifyFn = fn;\n    };\n    return {\n        batch,\n        batchCalls,\n        schedule,\n        setNotifyFunction,\n        setBatchNotifyFunction\n    };\n} // SINGLETON\nconst notifyManager = createNotifyManager();\n //# sourceMappingURL=notifyManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL25vdGlmeU1hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUVoRCxTQUFTQztJQUNQLElBQUlDLFFBQVEsRUFBRTtJQUNkLElBQUlDLGVBQWU7SUFFbkIsSUFBSUMsV0FBV0MsQ0FBQUE7UUFDYkE7SUFDRjtJQUVBLElBQUlDLGdCQUFnQkQsQ0FBQUE7UUFDbEJBO0lBQ0Y7SUFFQSxNQUFNRSxRQUFRRixDQUFBQTtRQUNaLElBQUlHO1FBQ0pMO1FBRUEsSUFBSTtZQUNGSyxTQUFTSDtRQUNYLFNBQVU7WUFDUkY7WUFFQSxJQUFJLENBQUNBLGNBQWM7Z0JBQ2pCTTtZQUNGO1FBQ0Y7UUFFQSxPQUFPRDtJQUNUO0lBRUEsTUFBTUUsV0FBV0wsQ0FBQUE7UUFDZixJQUFJRixjQUFjO1lBQ2hCRCxNQUFNUyxJQUFJLENBQUNOO1FBQ2IsT0FBTztZQUNMTCw2REFBaUJBLENBQUM7Z0JBQ2hCSSxTQUFTQztZQUNYO1FBQ0Y7SUFDRjtJQUNBOztHQUVDLEdBR0QsTUFBTU8sYUFBYVAsQ0FBQUE7UUFDakIsT0FBTyxDQUFDLEdBQUdRO1lBQ1RILFNBQVM7Z0JBQ1BMLFlBQVlRO1lBQ2Q7UUFDRjtJQUNGO0lBRUEsTUFBTUosUUFBUTtRQUNaLE1BQU1LLGdCQUFnQlo7UUFDdEJBLFFBQVEsRUFBRTtRQUVWLElBQUlZLGNBQWNDLE1BQU0sRUFBRTtZQUN4QmYsNkRBQWlCQSxDQUFDO2dCQUNoQk0sY0FBYztvQkFDWlEsY0FBY0UsT0FBTyxDQUFDWCxDQUFBQTt3QkFDcEJELFNBQVNDO29CQUNYO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBQ0E7OztHQUdDLEdBR0QsTUFBTVksb0JBQW9CQyxDQUFBQTtRQUN4QmQsV0FBV2M7SUFDYjtJQUNBOzs7R0FHQyxHQUdELE1BQU1DLHlCQUF5QkQsQ0FBQUE7UUFDN0JaLGdCQUFnQlk7SUFDbEI7SUFFQSxPQUFPO1FBQ0xYO1FBQ0FLO1FBQ0FGO1FBQ0FPO1FBQ0FFO0lBQ0Y7QUFDRixFQUFFLFlBQVk7QUFFZCxNQUFNQyxnQkFBZ0JuQjtBQUV3QixDQUM5QywwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcXVlcnktY29yZS9idWlsZC9saWIvbm90aWZ5TWFuYWdlci5tanM/Y2VkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzY2hlZHVsZU1pY3JvdGFzayB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlTm90aWZ5TWFuYWdlcigpIHtcbiAgbGV0IHF1ZXVlID0gW107XG4gIGxldCB0cmFuc2FjdGlvbnMgPSAwO1xuXG4gIGxldCBub3RpZnlGbiA9IGNhbGxiYWNrID0+IHtcbiAgICBjYWxsYmFjaygpO1xuICB9O1xuXG4gIGxldCBiYXRjaE5vdGlmeUZuID0gY2FsbGJhY2sgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG5cbiAgY29uc3QgYmF0Y2ggPSBjYWxsYmFjayA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cmFuc2FjdGlvbnMrKztcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cmFuc2FjdGlvbnMtLTtcblxuICAgICAgaWYgKCF0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvbnN0IHNjaGVkdWxlID0gY2FsbGJhY2sgPT4ge1xuICAgIGlmICh0cmFuc2FjdGlvbnMpIHtcbiAgICAgIHF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgIG5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEFsbCBjYWxscyB0byB0aGUgd3JhcHBlZCBmdW5jdGlvbiB3aWxsIGJlIGJhdGNoZWQuXG4gICAqL1xuXG5cbiAgY29uc3QgYmF0Y2hDYWxscyA9IGNhbGxiYWNrID0+IHtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHNjaGVkdWxlKCgpID0+IHtcbiAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IGZsdXNoID0gKCkgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsUXVldWUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9IFtdO1xuXG4gICAgaWYgKG9yaWdpbmFsUXVldWUubGVuZ3RoKSB7XG4gICAgICBzY2hlZHVsZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgIGJhdGNoTm90aWZ5Rm4oKCkgPT4ge1xuICAgICAgICAgIG9yaWdpbmFsUXVldWUuZm9yRWFjaChjYWxsYmFjayA9PiB7XG4gICAgICAgICAgICBub3RpZnlGbihjYWxsYmFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHNldCBhIGN1c3RvbSBub3RpZnkgZnVuY3Rpb24uXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZm9yIGV4YW1wbGUgd3JhcCBub3RpZmljYXRpb25zIHdpdGggYFJlYWN0LmFjdGAgd2hpbGUgcnVubmluZyB0ZXN0cy5cbiAgICovXG5cblxuICBjb25zdCBzZXROb3RpZnlGdW5jdGlvbiA9IGZuID0+IHtcbiAgICBub3RpZnlGbiA9IGZuO1xuICB9O1xuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHNldCBhIGN1c3RvbSBmdW5jdGlvbiB0byBiYXRjaCBub3RpZmljYXRpb25zIHRvZ2V0aGVyIGludG8gYSBzaW5nbGUgdGljay5cbiAgICogQnkgZGVmYXVsdCBSZWFjdCBRdWVyeSB3aWxsIHVzZSB0aGUgYmF0Y2ggZnVuY3Rpb24gcHJvdmlkZWQgYnkgUmVhY3RET00gb3IgUmVhY3QgTmF0aXZlLlxuICAgKi9cblxuXG4gIGNvbnN0IHNldEJhdGNoTm90aWZ5RnVuY3Rpb24gPSBmbiA9PiB7XG4gICAgYmF0Y2hOb3RpZnlGbiA9IGZuO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmF0Y2gsXG4gICAgYmF0Y2hDYWxscyxcbiAgICBzY2hlZHVsZSxcbiAgICBzZXROb3RpZnlGdW5jdGlvbixcbiAgICBzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uXG4gIH07XG59IC8vIFNJTkdMRVRPTlxuXG5jb25zdCBub3RpZnlNYW5hZ2VyID0gY3JlYXRlTm90aWZ5TWFuYWdlcigpO1xuXG5leHBvcnQgeyBjcmVhdGVOb3RpZnlNYW5hZ2VyLCBub3RpZnlNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3RpZnlNYW5hZ2VyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJzY2hlZHVsZU1pY3JvdGFzayIsImNyZWF0ZU5vdGlmeU1hbmFnZXIiLCJxdWV1ZSIsInRyYW5zYWN0aW9ucyIsIm5vdGlmeUZuIiwiY2FsbGJhY2siLCJiYXRjaE5vdGlmeUZuIiwiYmF0Y2giLCJyZXN1bHQiLCJmbHVzaCIsInNjaGVkdWxlIiwicHVzaCIsImJhdGNoQ2FsbHMiLCJhcmdzIiwib3JpZ2luYWxRdWV1ZSIsImxlbmd0aCIsImZvckVhY2giLCJzZXROb3RpZnlGdW5jdGlvbiIsImZuIiwic2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiIsIm5vdGlmeU1hbmFnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineManager: () => (/* binding */ OnlineManager),\n/* harmony export */   onlineManager: () => (/* binding */ onlineManager)\n/* harmony export */ });\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\nconst onlineEvents = [\n    \"online\",\n    \"offline\"\n];\nclass OnlineManager extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(){\n        super();\n        this.setup = (onOnline)=>{\n            // addEventListener does not exist in React Native, but window does\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            if (!_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer && window.addEventListener) {\n                const listener = ()=>onOnline(); // Listen to online\n                onlineEvents.forEach((event)=>{\n                    window.addEventListener(event, listener, false);\n                });\n                return ()=>{\n                    // Be sure to unsubscribe if a new handler is set\n                    onlineEvents.forEach((event)=>{\n                        window.removeEventListener(event, listener);\n                    });\n                };\n            }\n            return;\n        };\n    }\n    onSubscribe() {\n        if (!this.cleanup) {\n            this.setEventListener(this.setup);\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            var _this$cleanup;\n            (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n            this.cleanup = undefined;\n        }\n    }\n    setEventListener(setup) {\n        var _this$cleanup2;\n        this.setup = setup;\n        (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n        this.cleanup = setup((online)=>{\n            if (typeof online === \"boolean\") {\n                this.setOnline(online);\n            } else {\n                this.onOnline();\n            }\n        });\n    }\n    setOnline(online) {\n        const changed = this.online !== online;\n        if (changed) {\n            this.online = online;\n            this.onOnline();\n        }\n    }\n    onOnline() {\n        this.listeners.forEach(({ listener })=>{\n            listener();\n        });\n    }\n    isOnline() {\n        if (typeof this.online === \"boolean\") {\n            return this.online;\n        }\n        if (typeof navigator === \"undefined\" || typeof navigator.onLine === \"undefined\") {\n            return true;\n        }\n        return navigator.onLine;\n    }\n}\nconst onlineManager = new OnlineManager();\n //# sourceMappingURL=onlineManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL29ubGluZU1hbmFnZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0Q7QUFDWDtBQUV2QyxNQUFNRSxlQUFlO0lBQUM7SUFBVTtDQUFVO0FBQzFDLE1BQU1DLHNCQUFzQkgsMkRBQVlBO0lBQ3RDSSxhQUFjO1FBQ1osS0FBSztRQUVMLElBQUksQ0FBQ0MsS0FBSyxHQUFHQyxDQUFBQTtZQUNYLG1FQUFtRTtZQUNuRSx1RUFBdUU7WUFDdkUsSUFBSSxDQUFDTCxnREFBUUEsSUFBSU0sT0FBT0MsZ0JBQWdCLEVBQUU7Z0JBQ3hDLE1BQU1DLFdBQVcsSUFBTUgsWUFBWSxtQkFBbUI7Z0JBR3RESixhQUFhUSxPQUFPLENBQUNDLENBQUFBO29CQUNuQkosT0FBT0MsZ0JBQWdCLENBQUNHLE9BQU9GLFVBQVU7Z0JBQzNDO2dCQUNBLE9BQU87b0JBQ0wsaURBQWlEO29CQUNqRFAsYUFBYVEsT0FBTyxDQUFDQyxDQUFBQTt3QkFDbkJKLE9BQU9LLG1CQUFtQixDQUFDRCxPQUFPRjtvQkFDcEM7Z0JBQ0Y7WUFDRjtZQUVBO1FBQ0Y7SUFDRjtJQUVBSSxjQUFjO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMsSUFBSSxDQUFDVixLQUFLO1FBQ2xDO0lBQ0Y7SUFFQVcsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxJQUFJO1lBQ3hCLElBQUlDO1lBRUhBLENBQUFBLGdCQUFnQixJQUFJLENBQUNKLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUksY0FBY0MsSUFBSSxDQUFDLElBQUk7WUFDekUsSUFBSSxDQUFDTCxPQUFPLEdBQUdNO1FBQ2pCO0lBQ0Y7SUFFQUwsaUJBQWlCVixLQUFLLEVBQUU7UUFDdEIsSUFBSWdCO1FBRUosSUFBSSxDQUFDaEIsS0FBSyxHQUFHQTtRQUNaZ0IsQ0FBQUEsaUJBQWlCLElBQUksQ0FBQ1AsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJTyxlQUFlRixJQUFJLENBQUMsSUFBSTtRQUMzRSxJQUFJLENBQUNMLE9BQU8sR0FBR1QsTUFBTWlCLENBQUFBO1lBQ25CLElBQUksT0FBT0EsV0FBVyxXQUFXO2dCQUMvQixJQUFJLENBQUNDLFNBQVMsQ0FBQ0Q7WUFDakIsT0FBTztnQkFDTCxJQUFJLENBQUNoQixRQUFRO1lBQ2Y7UUFDRjtJQUNGO0lBRUFpQixVQUFVRCxNQUFNLEVBQUU7UUFDaEIsTUFBTUUsVUFBVSxJQUFJLENBQUNGLE1BQU0sS0FBS0E7UUFFaEMsSUFBSUUsU0FBUztZQUNYLElBQUksQ0FBQ0YsTUFBTSxHQUFHQTtZQUNkLElBQUksQ0FBQ2hCLFFBQVE7UUFDZjtJQUNGO0lBRUFBLFdBQVc7UUFDVCxJQUFJLENBQUNtQixTQUFTLENBQUNmLE9BQU8sQ0FBQyxDQUFDLEVBQ3RCRCxRQUFRLEVBQ1Q7WUFDQ0E7UUFDRjtJQUNGO0lBRUFpQixXQUFXO1FBQ1QsSUFBSSxPQUFPLElBQUksQ0FBQ0osTUFBTSxLQUFLLFdBQVc7WUFDcEMsT0FBTyxJQUFJLENBQUNBLE1BQU07UUFDcEI7UUFFQSxJQUFJLE9BQU9LLGNBQWMsZUFBZSxPQUFPQSxVQUFVQyxNQUFNLEtBQUssYUFBYTtZQUMvRSxPQUFPO1FBQ1Q7UUFFQSxPQUFPRCxVQUFVQyxNQUFNO0lBQ3pCO0FBRUY7QUFDQSxNQUFNQyxnQkFBZ0IsSUFBSTFCO0FBRWMsQ0FDeEMsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL29ubGluZU1hbmFnZXIubWpzPzJhYTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUubWpzJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5jb25zdCBvbmxpbmVFdmVudHMgPSBbJ29ubGluZScsICdvZmZsaW5lJ107XG5jbGFzcyBPbmxpbmVNYW5hZ2VyIGV4dGVuZHMgU3Vic2NyaWJhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuc2V0dXAgPSBvbk9ubGluZSA9PiB7XG4gICAgICAvLyBhZGRFdmVudExpc3RlbmVyIGRvZXMgbm90IGV4aXN0IGluIFJlYWN0IE5hdGl2ZSwgYnV0IHdpbmRvdyBkb2VzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgICAgaWYgKCFpc1NlcnZlciAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IG9uT25saW5lKCk7IC8vIExpc3RlbiB0byBvbmxpbmVcblxuXG4gICAgICAgIG9ubGluZUV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIG9ubGluZUV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9O1xuICB9XG5cbiAgb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH1cblxuICBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDI7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChvbmxpbmUgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgICB0aGlzLnNldE9ubGluZShvbmxpbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0T25saW5lKG9ubGluZSkge1xuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLm9ubGluZSAhPT0gb25saW5lO1xuXG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMub25saW5lID0gb25saW5lO1xuICAgICAgdGhpcy5vbk9ubGluZSgpO1xuICAgIH1cbiAgfVxuXG4gIG9uT25saW5lKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKHtcbiAgICAgIGxpc3RlbmVyXG4gICAgfSkgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzT25saW5lKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMub25saW5lO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9XG5cbn1cbmNvbnN0IG9ubGluZU1hbmFnZXIgPSBuZXcgT25saW5lTWFuYWdlcigpO1xuXG5leHBvcnQgeyBPbmxpbmVNYW5hZ2VyLCBvbmxpbmVNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbmxpbmVNYW5hZ2VyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdWJzY3JpYmFibGUiLCJpc1NlcnZlciIsIm9ubGluZUV2ZW50cyIsIk9ubGluZU1hbmFnZXIiLCJjb25zdHJ1Y3RvciIsInNldHVwIiwib25PbmxpbmUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJmb3JFYWNoIiwiZXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25TdWJzY3JpYmUiLCJjbGVhbnVwIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJoYXNMaXN0ZW5lcnMiLCJfdGhpcyRjbGVhbnVwIiwiY2FsbCIsInVuZGVmaW5lZCIsIl90aGlzJGNsZWFudXAyIiwib25saW5lIiwic2V0T25saW5lIiwiY2hhbmdlZCIsImxpc3RlbmVycyIsImlzT25saW5lIiwibmF2aWdhdG9yIiwib25MaW5lIiwib25saW5lTWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/query.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n/* harmony import */ var _removable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./removable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\");\n\n\n\n\n\n// CLASS\nclass Query extends _removable_mjs__WEBPACK_IMPORTED_MODULE_0__.Removable {\n    constructor(config){\n        super();\n        this.abortSignalConsumed = false;\n        this.defaultOptions = config.defaultOptions;\n        this.setOptions(config.options);\n        this.observers = [];\n        this.cache = config.cache;\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultLogger;\n        this.queryKey = config.queryKey;\n        this.queryHash = config.queryHash;\n        this.initialState = config.state || getDefaultState(this.options);\n        this.state = this.initialState;\n        this.scheduleGc();\n    }\n    get meta() {\n        return this.options.meta;\n    }\n    setOptions(options) {\n        this.options = {\n            ...this.defaultOptions,\n            ...options\n        };\n        this.updateCacheTime(this.options.cacheTime);\n    }\n    optionalRemove() {\n        if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n            this.cache.remove(this);\n        }\n    }\n    setData(newData, options) {\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.replaceData)(this.state.data, newData, this.options); // Set data and mark it as cached\n        this.dispatch({\n            data,\n            type: \"success\",\n            dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n            manual: options == null ? void 0 : options.manual\n        });\n        return data;\n    }\n    setState(state, setStateOptions) {\n        this.dispatch({\n            type: \"setState\",\n            state,\n            setStateOptions\n        });\n    }\n    cancel(options) {\n        var _this$retryer;\n        const promise = this.promise;\n        (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n        return promise ? promise.then(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.noop) : Promise.resolve();\n    }\n    destroy() {\n        super.destroy();\n        this.cancel({\n            silent: true\n        });\n    }\n    reset() {\n        this.destroy();\n        this.setState(this.initialState);\n    }\n    isActive() {\n        return this.observers.some((observer)=>observer.options.enabled !== false);\n    }\n    isDisabled() {\n        return this.getObserversCount() > 0 && !this.isActive();\n    }\n    isStale() {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some((observer)=>observer.getCurrentResult().isStale);\n    }\n    isStaleByTime(staleTime = 0) {\n        return this.state.isInvalidated || !this.state.dataUpdatedAt || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.timeUntilStale)(this.state.dataUpdatedAt, staleTime);\n    }\n    onFocus() {\n        var _this$retryer2;\n        const observer = this.observers.find((x)=>x.shouldFetchOnWindowFocus());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n    }\n    onOnline() {\n        var _this$retryer3;\n        const observer = this.observers.find((x)=>x.shouldFetchOnReconnect());\n        if (observer) {\n            observer.refetch({\n                cancelRefetch: false\n            });\n        } // Continue fetch if currently paused\n        (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n    }\n    addObserver(observer) {\n        if (!this.observers.includes(observer)) {\n            this.observers.push(observer); // Stop the query from being garbage collected\n            this.clearGcTimeout();\n            this.cache.notify({\n                type: \"observerAdded\",\n                query: this,\n                observer\n            });\n        }\n    }\n    removeObserver(observer) {\n        if (this.observers.includes(observer)) {\n            this.observers = this.observers.filter((x)=>x !== observer);\n            if (!this.observers.length) {\n                // If the transport layer does not support cancellation\n                // we'll let the query continue so the result can be cached\n                if (this.retryer) {\n                    if (this.abortSignalConsumed) {\n                        this.retryer.cancel({\n                            revert: true\n                        });\n                    } else {\n                        this.retryer.cancelRetry();\n                    }\n                }\n                this.scheduleGc();\n            }\n            this.cache.notify({\n                type: \"observerRemoved\",\n                query: this,\n                observer\n            });\n        }\n    }\n    getObserversCount() {\n        return this.observers.length;\n    }\n    invalidate() {\n        if (!this.state.isInvalidated) {\n            this.dispatch({\n                type: \"invalidate\"\n            });\n        }\n    }\n    fetch(options, fetchOptions) {\n        var _this$options$behavio, _context$fetchOptions;\n        if (this.state.fetchStatus !== \"idle\") {\n            if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n                // Silently cancel current fetch if the user wants to cancel refetches\n                this.cancel({\n                    silent: true\n                });\n            } else if (this.promise) {\n                var _this$retryer4;\n                // make sure that retries that were potentially cancelled due to unmounts can continue\n                (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n                return this.promise;\n            }\n        } // Update config if passed, otherwise the config from the last execution is used\n        if (options) {\n            this.setOptions(options);\n        } // Use the options from the first observer with a query function if no function is found.\n        // This can happen when the query is hydrated or created with setQueryData.\n        if (!this.options.queryFn) {\n            const observer = this.observers.find((x)=>x.options.queryFn);\n            if (observer) {\n                this.setOptions(observer.options);\n            }\n        }\n        if (true) {\n            if (!Array.isArray(this.options.queryKey)) {\n                this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n            }\n        }\n        const abortController = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.getAbortController)(); // Create query function context\n        const queryFnContext = {\n            queryKey: this.queryKey,\n            pageParam: undefined,\n            meta: this.meta\n        }; // Adds an enumerable signal property to the object that\n        // which sets abortSignalConsumed to true when the signal\n        // is read.\n        const addSignalProperty = (object)=>{\n            Object.defineProperty(object, \"signal\", {\n                enumerable: true,\n                get: ()=>{\n                    if (abortController) {\n                        this.abortSignalConsumed = true;\n                        return abortController.signal;\n                    }\n                    return undefined;\n                }\n            });\n        };\n        addSignalProperty(queryFnContext); // Create fetch function\n        const fetchFn = ()=>{\n            if (!this.options.queryFn) {\n                return Promise.reject(\"Missing queryFn for queryKey '\" + this.options.queryHash + \"'\");\n            }\n            this.abortSignalConsumed = false;\n            return this.options.queryFn(queryFnContext);\n        }; // Trigger behavior hook\n        const context = {\n            fetchOptions,\n            options: this.options,\n            queryKey: this.queryKey,\n            state: this.state,\n            fetchFn\n        };\n        addSignalProperty(context);\n        (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n        this.revertState = this.state; // Set to fetching state if not already in it\n        if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n            var _context$fetchOptions2;\n            this.dispatch({\n                type: \"fetch\",\n                meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n            });\n        }\n        const onError = (error)=>{\n            // Optimistically update state if needed\n            if (!((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.silent)) {\n                this.dispatch({\n                    type: \"error\",\n                    error: error\n                });\n            }\n            if (!(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error)) {\n                var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;\n                // Notify cache callback\n                (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n                (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);\n                if (true) {\n                    this.logger.error(error);\n                }\n            }\n            if (!this.isFetchingOptimistic) {\n                // Schedule query gc after fetching\n                this.scheduleGc();\n            }\n            this.isFetchingOptimistic = false;\n        }; // Try to fetch the data\n        this.retryer = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.createRetryer)({\n            fn: context.fetchFn,\n            abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n            onSuccess: (data)=>{\n                var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n                if (typeof data === \"undefined\") {\n                    if (true) {\n                        this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n                    }\n                    onError(new Error(this.queryHash + \" data is undefined\"));\n                    return;\n                }\n                this.setData(data); // Notify cache callback\n                (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);\n                (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);\n                if (!this.isFetchingOptimistic) {\n                    // Schedule query gc after fetching\n                    this.scheduleGc();\n                }\n                this.isFetchingOptimistic = false;\n            },\n            onError,\n            onFail: (failureCount, error)=>{\n                this.dispatch({\n                    type: \"failed\",\n                    failureCount,\n                    error\n                });\n            },\n            onPause: ()=>{\n                this.dispatch({\n                    type: \"pause\"\n                });\n            },\n            onContinue: ()=>{\n                this.dispatch({\n                    type: \"continue\"\n                });\n            },\n            retry: context.options.retry,\n            retryDelay: context.options.retryDelay,\n            networkMode: context.options.networkMode\n        });\n        this.promise = this.retryer.promise;\n        return this.promise;\n    }\n    dispatch(action) {\n        const reducer = (state)=>{\n            var _action$meta, _action$dataUpdatedAt;\n            switch(action.type){\n                case \"failed\":\n                    return {\n                        ...state,\n                        fetchFailureCount: action.failureCount,\n                        fetchFailureReason: action.error\n                    };\n                case \"pause\":\n                    return {\n                        ...state,\n                        fetchStatus: \"paused\"\n                    };\n                case \"continue\":\n                    return {\n                        ...state,\n                        fetchStatus: \"fetching\"\n                    };\n                case \"fetch\":\n                    return {\n                        ...state,\n                        fetchFailureCount: 0,\n                        fetchFailureReason: null,\n                        fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n                        fetchStatus: (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(this.options.networkMode) ? \"fetching\" : \"paused\",\n                        ...!state.dataUpdatedAt && {\n                            error: null,\n                            status: \"loading\"\n                        }\n                    };\n                case \"success\":\n                    return {\n                        ...state,\n                        data: action.data,\n                        dataUpdateCount: state.dataUpdateCount + 1,\n                        dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n                        error: null,\n                        isInvalidated: false,\n                        status: \"success\",\n                        ...!action.manual && {\n                            fetchStatus: \"idle\",\n                            fetchFailureCount: 0,\n                            fetchFailureReason: null\n                        }\n                    };\n                case \"error\":\n                    const error = action.error;\n                    if ((0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(error) && error.revert && this.revertState) {\n                        return {\n                            ...this.revertState,\n                            fetchStatus: \"idle\"\n                        };\n                    }\n                    return {\n                        ...state,\n                        error: error,\n                        errorUpdateCount: state.errorUpdateCount + 1,\n                        errorUpdatedAt: Date.now(),\n                        fetchFailureCount: state.fetchFailureCount + 1,\n                        fetchFailureReason: error,\n                        fetchStatus: \"idle\",\n                        status: \"error\"\n                    };\n                case \"invalidate\":\n                    return {\n                        ...state,\n                        isInvalidated: true\n                    };\n                case \"setState\":\n                    return {\n                        ...state,\n                        ...action.state\n                    };\n            }\n        };\n        this.state = reducer(this.state);\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            this.observers.forEach((observer)=>{\n                observer.onQueryUpdate(action);\n            });\n            this.cache.notify({\n                query: this,\n                type: \"updated\",\n                action\n            });\n        });\n    }\n}\nfunction getDefaultState(options) {\n    const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n    const hasData = typeof data !== \"undefined\";\n    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    return {\n        data,\n        dataUpdateCount: 0,\n        dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n        error: null,\n        errorUpdateCount: 0,\n        errorUpdatedAt: 0,\n        fetchFailureCount: 0,\n        fetchFailureReason: null,\n        fetchMeta: null,\n        isInvalidated: false,\n        status: hasData ? \"success\" : \"loading\",\n        fetchStatus: \"idle\"\n    };\n}\n //# sourceMappingURL=query.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryCache.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryCache: () => (/* binding */ QueryCache)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _query_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/query.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n\n\n\n\n// CLASS\nclass QueryCache extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(config){\n        super();\n        this.config = config || {};\n        this.queries = [];\n        this.queriesMap = {};\n    }\n    build(client, options, state) {\n        var _options$queryHash;\n        const queryKey = options.queryKey;\n        const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.hashQueryKeyByOptions)(queryKey, options);\n        let query = this.get(queryHash);\n        if (!query) {\n            query = new _query_mjs__WEBPACK_IMPORTED_MODULE_2__.Query({\n                cache: this,\n                logger: client.getLogger(),\n                queryKey,\n                queryHash,\n                options: client.defaultQueryOptions(options),\n                state,\n                defaultOptions: client.getQueryDefaults(queryKey)\n            });\n            this.add(query);\n        }\n        return query;\n    }\n    add(query) {\n        if (!this.queriesMap[query.queryHash]) {\n            this.queriesMap[query.queryHash] = query;\n            this.queries.push(query);\n            this.notify({\n                type: \"added\",\n                query\n            });\n        }\n    }\n    remove(query) {\n        const queryInMap = this.queriesMap[query.queryHash];\n        if (queryInMap) {\n            query.destroy();\n            this.queries = this.queries.filter((x)=>x !== query);\n            if (queryInMap === query) {\n                delete this.queriesMap[query.queryHash];\n            }\n            this.notify({\n                type: \"removed\",\n                query\n            });\n        }\n    }\n    clear() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                this.remove(query);\n            });\n        });\n    }\n    get(queryHash) {\n        return this.queriesMap[queryHash];\n    }\n    getAll() {\n        return this.queries;\n    }\n    find(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        if (typeof filters.exact === \"undefined\") {\n            filters.exact = true;\n        }\n        return this.queries.find((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query));\n    }\n    findAll(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.parseFilterArgs)(arg1, arg2);\n        return Object.keys(filters).length > 0 ? this.queries.filter((query)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.matchQuery)(filters, query)) : this.queries;\n    }\n    notify(event) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.listeners.forEach(({ listener })=>{\n                listener(event);\n            });\n        });\n    }\n    onFocus() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onFocus();\n            });\n        });\n    }\n    onOnline() {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_3__.notifyManager.batch(()=>{\n            this.queries.forEach((query)=>{\n                query.onOnline();\n            });\n        });\n    }\n}\n //# sourceMappingURL=queryCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryClient.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClient: () => (/* binding */ QueryClient)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryCache.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryCache.mjs\");\n/* harmony import */ var _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mutationCache.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationCache.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./infiniteQueryBehavior.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryBehavior.mjs\");\n/* harmony import */ var _logger_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/logger.mjs\");\n\n\n\n\n\n\n\n\n// CLASS\nclass QueryClient {\n    constructor(config = {}){\n        this.queryCache = config.queryCache || new _queryCache_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryCache();\n        this.mutationCache = config.mutationCache || new _mutationCache_mjs__WEBPACK_IMPORTED_MODULE_1__.MutationCache();\n        this.logger = config.logger || _logger_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultLogger;\n        this.defaultOptions = config.defaultOptions || {};\n        this.queryDefaults = [];\n        this.mutationDefaults = [];\n        this.mountCount = 0;\n        if ( true && config.logger) {\n            this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n        }\n    }\n    mount() {\n        this.mountCount++;\n        if (this.mountCount !== 1) return;\n        this.unsubscribeFocus = _focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.subscribe(()=>{\n            if (_focusManager_mjs__WEBPACK_IMPORTED_MODULE_3__.focusManager.isFocused()) {\n                this.resumePausedMutations();\n                this.queryCache.onFocus();\n            }\n        });\n        this.unsubscribeOnline = _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.subscribe(()=>{\n            if (_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_4__.onlineManager.isOnline()) {\n                this.resumePausedMutations();\n                this.queryCache.onOnline();\n            }\n        });\n    }\n    unmount() {\n        var _this$unsubscribeFocu, _this$unsubscribeOnli;\n        this.mountCount--;\n        if (this.mountCount !== 0) return;\n        (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n        this.unsubscribeFocus = undefined;\n        (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n        this.unsubscribeOnline = undefined;\n    }\n    isFetching(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        filters.fetchStatus = \"fetching\";\n        return this.queryCache.findAll(filters).length;\n    }\n    isMutating(filters) {\n        return this.mutationCache.findAll({\n            ...filters,\n            fetching: true\n        }).length;\n    }\n    getQueryData(queryKey, filters) {\n        var _this$queryCache$find;\n        return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n    }\n    ensureQueryData(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const cachedData = this.getQueryData(parsedOptions.queryKey);\n        return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n    }\n    getQueriesData(queryKeyOrFilters) {\n        return this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey, state })=>{\n            const data = state.data;\n            return [\n                queryKey,\n                data\n            ];\n        });\n    }\n    setQueryData(queryKey, updater, options) {\n        const query = this.queryCache.find(queryKey);\n        const prevData = query == null ? void 0 : query.state.data;\n        const data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.functionalUpdate)(updater, prevData);\n        if (typeof data === \"undefined\") {\n            return undefined;\n        }\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(queryKey);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n        return this.queryCache.build(this, defaultedOptions).setData(data, {\n            ...options,\n            manual: true\n        });\n    }\n    setQueriesData(queryKeyOrFilters, updater, options) {\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.getQueryCache().findAll(queryKeyOrFilters).map(({ queryKey })=>[\n                    queryKey,\n                    this.setQueryData(queryKey, updater, options)\n                ]));\n    }\n    getQueryState(queryKey, filters) {\n        var _this$queryCache$find2;\n        return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n    }\n    removeQueries(arg1, arg2) {\n        const [filters] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2);\n        const queryCache = this.queryCache;\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                queryCache.remove(query);\n            });\n        });\n    }\n    resetQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const queryCache = this.queryCache;\n        const refetchFilters = {\n            type: \"active\",\n            ...filters\n        };\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            queryCache.findAll(filters).forEach((query)=>{\n                query.reset();\n            });\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    cancelQueries(arg1, arg2, arg3) {\n        const [filters, cancelOptions = {}] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        if (typeof cancelOptions.revert === \"undefined\") {\n            cancelOptions.revert = true;\n        }\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).map((query)=>query.cancel(cancelOptions)));\n        return Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    invalidateQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        return _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>{\n            var _ref, _filters$refetchType;\n            this.queryCache.findAll(filters).forEach((query)=>{\n                query.invalidate();\n            });\n            if (filters.refetchType === \"none\") {\n                return Promise.resolve();\n            }\n            const refetchFilters = {\n                ...filters,\n                type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : \"active\"\n            };\n            return this.refetchQueries(refetchFilters, options);\n        });\n    }\n    refetchQueries(arg1, arg2, arg3) {\n        const [filters, options] = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseFilterArgs)(arg1, arg2, arg3);\n        const promises = _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_6__.notifyManager.batch(()=>this.queryCache.findAll(filters).filter((query)=>!query.isDisabled()).map((query)=>{\n                var _options$cancelRefetc;\n                return query.fetch(undefined, {\n                    ...options,\n                    cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n                    meta: {\n                        refetchPage: filters.refetchPage\n                    }\n                });\n            }));\n        let promise = Promise.all(promises).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        if (!(options != null && options.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n        }\n        return promise;\n    }\n    fetchQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n        if (typeof defaultedOptions.retry === \"undefined\") {\n            defaultedOptions.retry = false;\n        }\n        const query = this.queryCache.build(this, defaultedOptions);\n        return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n    prefetchQuery(arg1, arg2, arg3) {\n        return this.fetchQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    fetchInfiniteQuery(arg1, arg2, arg3) {\n        const parsedOptions = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.parseQueryArgs)(arg1, arg2, arg3);\n        parsedOptions.behavior = (0,_infiniteQueryBehavior_mjs__WEBPACK_IMPORTED_MODULE_7__.infiniteQueryBehavior)();\n        return this.fetchQuery(parsedOptions);\n    }\n    prefetchInfiniteQuery(arg1, arg2, arg3) {\n        return this.fetchInfiniteQuery(arg1, arg2, arg3).then(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop).catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.noop);\n    }\n    resumePausedMutations() {\n        return this.mutationCache.resumePausedMutations();\n    }\n    getQueryCache() {\n        return this.queryCache;\n    }\n    getMutationCache() {\n        return this.mutationCache;\n    }\n    getLogger() {\n        return this.logger;\n    }\n    getDefaultOptions() {\n        return this.defaultOptions;\n    }\n    setDefaultOptions(options) {\n        this.defaultOptions = options;\n    }\n    setQueryDefaults(queryKey, options) {\n        const result = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(queryKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.queryKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.queryDefaults.push({\n                queryKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getQueryDefaults(queryKey) {\n        if (!queryKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.queryDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.queryDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    setMutationDefaults(mutationKey, options) {\n        const result = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(mutationKey) === (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKey)(x.mutationKey));\n        if (result) {\n            result.defaultOptions = options;\n        } else {\n            this.mutationDefaults.push({\n                mutationKey,\n                defaultOptions: options\n            });\n        }\n    }\n    getMutationDefaults(mutationKey) {\n        if (!mutationKey) {\n            return undefined;\n        } // Get the first matching defaults\n        const firstMatchingDefaults = this.mutationDefaults.find((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n        if (true) {\n            // Retrieve all matching defaults for the given key\n            const matchingDefaults = this.mutationDefaults.filter((x)=>(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.partialMatchKey)(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n            if (matchingDefaults.length > 1) {\n                this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n            }\n        }\n        return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n    }\n    defaultQueryOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        const defaultedOptions = {\n            ...this.defaultOptions.queries,\n            ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n            ...options,\n            _defaulted: true\n        };\n        if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n            defaultedOptions.queryHash = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_5__.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);\n        } // dependent default values\n        if (typeof defaultedOptions.refetchOnReconnect === \"undefined\") {\n            defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n        }\n        if (typeof defaultedOptions.useErrorBoundary === \"undefined\") {\n            defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n        }\n        return defaultedOptions;\n    }\n    defaultMutationOptions(options) {\n        if (options != null && options._defaulted) {\n            return options;\n        }\n        return {\n            ...this.defaultOptions.mutations,\n            ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n            ...options,\n            _defaulted: true\n        };\n    }\n    clear() {\n        this.queryCache.clear();\n        this.mutationCache.clear();\n    }\n}\n //# sourceMappingURL=queryClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryObserver: () => (/* binding */ QueryObserver)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notifyManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribable.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\");\n/* harmony import */ var _retryer_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./retryer.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\");\n\n\n\n\n\nclass QueryObserver extends _subscribable_mjs__WEBPACK_IMPORTED_MODULE_0__.Subscribable {\n    constructor(client, options){\n        super();\n        this.client = client;\n        this.options = options;\n        this.trackedProps = new Set();\n        this.selectError = null;\n        this.bindMethods();\n        this.setOptions(options);\n    }\n    bindMethods() {\n        this.remove = this.remove.bind(this);\n        this.refetch = this.refetch.bind(this);\n    }\n    onSubscribe() {\n        if (this.listeners.size === 1) {\n            this.currentQuery.addObserver(this);\n            if (shouldFetchOnMount(this.currentQuery, this.options)) {\n                this.executeFetch();\n            }\n            this.updateTimers();\n        }\n    }\n    onUnsubscribe() {\n        if (!this.hasListeners()) {\n            this.destroy();\n        }\n    }\n    shouldFetchOnReconnect() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n    shouldFetchOnWindowFocus() {\n        return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n    destroy() {\n        this.listeners = new Set();\n        this.clearStaleTimeout();\n        this.clearRefetchInterval();\n        this.currentQuery.removeObserver(this);\n    }\n    setOptions(options, notifyOptions) {\n        const prevOptions = this.options;\n        const prevQuery = this.currentQuery;\n        this.options = this.client.defaultQueryOptions(options);\n        if ( true && typeof (options == null ? void 0 : options.isDataEqual) !== \"undefined\") {\n            this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n        }\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(prevOptions, this.options)) {\n            this.client.getQueryCache().notify({\n                type: \"observerOptionsUpdated\",\n                query: this.currentQuery,\n                observer: this\n            });\n        }\n        if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n            throw new Error(\"Expected enabled to be a boolean\");\n        } // Keep previous query key if the user does not supply one\n        if (!this.options.queryKey) {\n            this.options.queryKey = prevOptions.queryKey;\n        }\n        this.updateQuery();\n        const mounted = this.hasListeners(); // Fetch if there are subscribers\n        if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n            this.executeFetch();\n        } // Update result\n        this.updateResult(notifyOptions); // Update stale interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n            this.updateStaleTimeout();\n        }\n        const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n            this.updateRefetchInterval(nextRefetchInterval);\n        }\n    }\n    getOptimisticResult(options) {\n        const query = this.client.getQueryCache().build(this.client, options);\n        const result = this.createResult(query, options);\n        if (shouldAssignObserverCurrentProperties(this, result, options)) {\n            // this assigns the optimistic result to the current Observer\n            // because if the query function changes, useQuery will be performing\n            // an effect where it would fetch again.\n            // When the fetch finishes, we perform a deep data cloning in order\n            // to reuse objects references. This deep data clone is performed against\n            // the `observer.currentResult.data` property\n            // When QueryKey changes, we refresh the query and get new `optimistic`\n            // result, while we leave the `observer.currentResult`, so when new data\n            // arrives, it finds the old `observer.currentResult` which is related\n            // to the old QueryKey. Which means that currentResult and selectData are\n            // out of sync already.\n            // To solve this, we move the cursor of the currentResult everytime\n            // an observer reads an optimistic value.\n            // When keeping the previous data, the result doesn't change until new\n            // data arrives.\n            this.currentResult = result;\n            this.currentResultOptions = this.options;\n            this.currentResultState = this.currentQuery.state;\n        }\n        return result;\n    }\n    getCurrentResult() {\n        return this.currentResult;\n    }\n    trackResult(result) {\n        const trackedResult = {};\n        Object.keys(result).forEach((key)=>{\n            Object.defineProperty(trackedResult, key, {\n                configurable: false,\n                enumerable: true,\n                get: ()=>{\n                    this.trackedProps.add(key);\n                    return result[key];\n                }\n            });\n        });\n        return trackedResult;\n    }\n    getCurrentQuery() {\n        return this.currentQuery;\n    }\n    remove() {\n        this.client.getQueryCache().remove(this.currentQuery);\n    }\n    refetch({ refetchPage, ...options } = {}) {\n        return this.fetch({\n            ...options,\n            meta: {\n                refetchPage\n            }\n        });\n    }\n    fetchOptimistic(options) {\n        const defaultedOptions = this.client.defaultQueryOptions(options);\n        const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n        query.isFetchingOptimistic = true;\n        return query.fetch().then(()=>this.createResult(query, defaultedOptions));\n    }\n    fetch(fetchOptions) {\n        var _fetchOptions$cancelR;\n        return this.executeFetch({\n            ...fetchOptions,\n            cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n        }).then(()=>{\n            this.updateResult();\n            return this.currentResult;\n        });\n    }\n    executeFetch(fetchOptions) {\n        // Make sure we reference the latest query as the current one might have been removed\n        this.updateQuery(); // Fetch\n        let promise = this.currentQuery.fetch(this.options, fetchOptions);\n        if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n            promise = promise.catch(_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.noop);\n        }\n        return promise;\n    }\n    updateStaleTimeout() {\n        this.clearStaleTimeout();\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.currentResult.isStale || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.options.staleTime)) {\n            return;\n        }\n        const time = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.timeUntilStale)(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n        // To mitigate this issue we always add 1 ms to the timeout.\n        const timeout = time + 1;\n        this.staleTimeoutId = setTimeout(()=>{\n            if (!this.currentResult.isStale) {\n                this.updateResult();\n            }\n        }, timeout);\n    }\n    computeRefetchInterval() {\n        var _this$options$refetch;\n        return typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n    }\n    updateRefetchInterval(nextInterval) {\n        this.clearRefetchInterval();\n        this.currentRefetchInterval = nextInterval;\n        if (_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isServer || this.options.enabled === false || !(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.isValidTimeout)(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n            return;\n        }\n        this.refetchIntervalId = setInterval(()=>{\n            if (this.options.refetchIntervalInBackground || _focusManager_mjs__WEBPACK_IMPORTED_MODULE_2__.focusManager.isFocused()) {\n                this.executeFetch();\n            }\n        }, this.currentRefetchInterval);\n    }\n    updateTimers() {\n        this.updateStaleTimeout();\n        this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n    clearStaleTimeout() {\n        if (this.staleTimeoutId) {\n            clearTimeout(this.staleTimeoutId);\n            this.staleTimeoutId = undefined;\n        }\n    }\n    clearRefetchInterval() {\n        if (this.refetchIntervalId) {\n            clearInterval(this.refetchIntervalId);\n            this.refetchIntervalId = undefined;\n        }\n    }\n    createResult(query, options) {\n        const prevQuery = this.currentQuery;\n        const prevOptions = this.options;\n        const prevResult = this.currentResult;\n        const prevResultState = this.currentResultState;\n        const prevResultOptions = this.currentResultOptions;\n        const queryChange = query !== prevQuery;\n        const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n        const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n        const { state } = query;\n        let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state;\n        let isPreviousData = false;\n        let isPlaceholderData = false;\n        let data; // Optimistically set result in fetching state if needed\n        if (options._optimisticResults) {\n            const mounted = this.hasListeners();\n            const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n            const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n            if (fetchOnMount || fetchOptionally) {\n                fetchStatus = (0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.canFetch)(query.options.networkMode) ? \"fetching\" : \"paused\";\n                if (!dataUpdatedAt) {\n                    status = \"loading\";\n                }\n            }\n            if (options._optimisticResults === \"isRestoring\") {\n                fetchStatus = \"idle\";\n            }\n        } // Keep previous data if needed\n        if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== \"error\") {\n            data = prevQueryResult.data;\n            dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n            status = prevQueryResult.status;\n            isPreviousData = true;\n        } else if (options.select && typeof state.data !== \"undefined\") {\n            // Memoize select result\n            if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n                data = this.selectResult;\n            } else {\n                try {\n                    this.selectFn = options.select;\n                    data = options.select(state.data);\n                    data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, data, options);\n                    this.selectResult = data;\n                    this.selectError = null;\n                } catch (selectError) {\n                    if (true) {\n                        this.client.getLogger().error(selectError);\n                    }\n                    this.selectError = selectError;\n                }\n            }\n        } else {\n            data = state.data;\n        } // Show placeholder data if needed\n        if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"loading\") {\n            let placeholderData; // Memoize placeholder data\n            if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n                placeholderData = prevResult.data;\n            } else {\n                placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData() : options.placeholderData;\n                if (options.select && typeof placeholderData !== \"undefined\") {\n                    try {\n                        placeholderData = options.select(placeholderData);\n                        this.selectError = null;\n                    } catch (selectError) {\n                        if (true) {\n                            this.client.getLogger().error(selectError);\n                        }\n                        this.selectError = selectError;\n                    }\n                }\n            }\n            if (typeof placeholderData !== \"undefined\") {\n                status = \"success\";\n                data = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.replaceData)(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n                isPlaceholderData = true;\n            }\n        }\n        if (this.selectError) {\n            error = this.selectError;\n            data = this.selectResult;\n            errorUpdatedAt = Date.now();\n            status = \"error\";\n        }\n        const isFetching = fetchStatus === \"fetching\";\n        const isLoading = status === \"loading\";\n        const isError = status === \"error\";\n        const result = {\n            status,\n            fetchStatus,\n            isLoading,\n            isSuccess: status === \"success\",\n            isError,\n            isInitialLoading: isLoading && isFetching,\n            data,\n            dataUpdatedAt,\n            error,\n            errorUpdatedAt,\n            failureCount: state.fetchFailureCount,\n            failureReason: state.fetchFailureReason,\n            errorUpdateCount: state.errorUpdateCount,\n            isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n            isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n            isFetching,\n            isRefetching: isFetching && !isLoading,\n            isLoadingError: isError && state.dataUpdatedAt === 0,\n            isPaused: fetchStatus === \"paused\",\n            isPlaceholderData,\n            isPreviousData,\n            isRefetchError: isError && state.dataUpdatedAt !== 0,\n            isStale: isStale(query, options),\n            refetch: this.refetch,\n            remove: this.remove\n        };\n        return result;\n    }\n    updateResult(notifyOptions) {\n        const prevResult = this.currentResult;\n        const nextResult = this.createResult(this.currentQuery, this.options);\n        this.currentResultState = this.currentQuery.state;\n        this.currentResultOptions = this.options; // Only notify and update result if something has changed\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(nextResult, prevResult)) {\n            return;\n        }\n        this.currentResult = nextResult; // Determine which callbacks to trigger\n        const defaultNotifyOptions = {\n            cache: true\n        };\n        const shouldNotifyListeners = ()=>{\n            if (!prevResult) {\n                return true;\n            }\n            const { notifyOnChangeProps } = this.options;\n            const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n            if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.trackedProps.size) {\n                return true;\n            }\n            const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);\n            if (this.options.useErrorBoundary) {\n                includedProps.add(\"error\");\n            }\n            return Object.keys(this.currentResult).some((key)=>{\n                const typedKey = key;\n                const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n                return changed && includedProps.has(typedKey);\n            });\n        };\n        if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n            defaultNotifyOptions.listeners = true;\n        }\n        this.notify({\n            ...defaultNotifyOptions,\n            ...notifyOptions\n        });\n    }\n    updateQuery() {\n        const query = this.client.getQueryCache().build(this.client, this.options);\n        if (query === this.currentQuery) {\n            return;\n        }\n        const prevQuery = this.currentQuery;\n        this.currentQuery = query;\n        this.currentQueryInitialState = query.state;\n        this.previousQueryResult = this.currentResult;\n        if (this.hasListeners()) {\n            prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n            query.addObserver(this);\n        }\n    }\n    onQueryUpdate(action) {\n        const notifyOptions = {};\n        if (action.type === \"success\") {\n            notifyOptions.onSuccess = !action.manual;\n        } else if (action.type === \"error\" && !(0,_retryer_mjs__WEBPACK_IMPORTED_MODULE_3__.isCancelledError)(action.error)) {\n            notifyOptions.onError = true;\n        }\n        this.updateResult(notifyOptions);\n        if (this.hasListeners()) {\n            this.updateTimers();\n        }\n    }\n    notify(notifyOptions) {\n        _notifyManager_mjs__WEBPACK_IMPORTED_MODULE_4__.notifyManager.batch(()=>{\n            // First trigger the configuration callbacks\n            if (notifyOptions.onSuccess) {\n                var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n                (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n                (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n            } else if (notifyOptions.onError) {\n                var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n                (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n                (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n            } // Then trigger the listeners\n            if (notifyOptions.listeners) {\n                this.listeners.forEach(({ listener })=>{\n                    listener(this.currentResult);\n                });\n            } // Then the cache listeners\n            if (notifyOptions.cache) {\n                this.client.getQueryCache().notify({\n                    query: this.currentQuery,\n                    type: \"observerResultsUpdated\"\n                });\n            }\n        });\n    }\n}\nfunction shouldLoadOnMount(query, options) {\n    return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n    return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n    if (options.enabled !== false) {\n        const value = typeof field === \"function\" ? field(query) : field;\n        return value === \"always\" || value !== false && isStale(query, options);\n    }\n    return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n    return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n    return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n    // it is important to keep this condition like this for three reasons:\n    // 1. It will get removed in the v5\n    // 2. it reads: don't update the properties if we want to keep the previous\n    // data.\n    // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n    // and will result in a bad decision\n    if (options.keepPreviousData) {\n        return false;\n    } // this means we want to put some placeholder data when pending and queryKey\n    // changed.\n    if (options.placeholderData !== undefined) {\n        // re-assign properties only if current data is placeholder data\n        // which means that data did not arrive yet, so, if there is some cached data\n        // we need to \"prepare\" to receive it\n        return optimisticResult.isPlaceholderData;\n    } // if the newly created result isn't what the observer is holding as current,\n    // then we'll need to update the properties as well\n    if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.shallowEqualObjects)(observer.getCurrentResult(), optimisticResult)) {\n        return true;\n    } // basically, just keep previous properties if nothing changed\n    return false;\n}\n //# sourceMappingURL=queryObserver.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/removable.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Removable: () => (/* binding */ Removable)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\nclass Removable {\n    destroy() {\n        this.clearGcTimeout();\n    }\n    scheduleGc() {\n        this.clearGcTimeout();\n        if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isValidTimeout)(this.cacheTime)) {\n            this.gcTimeout = setTimeout(()=>{\n                this.optionalRemove();\n            }, this.cacheTime);\n        }\n    }\n    updateCacheTime(newCacheTime) {\n        // Default to 5 minutes (Infinity for server-side) if no cache time is set\n        this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : _utils_mjs__WEBPACK_IMPORTED_MODULE_0__.isServer ? Infinity : 5 * 60 * 1000);\n    }\n    clearGcTimeout() {\n        if (this.gcTimeout) {\n            clearTimeout(this.gcTimeout);\n            this.gcTimeout = undefined;\n        }\n    }\n}\n //# sourceMappingURL=removable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3JlbW92YWJsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFFdkQsTUFBTUU7SUFDSkMsVUFBVTtRQUNSLElBQUksQ0FBQ0MsY0FBYztJQUNyQjtJQUVBQyxhQUFhO1FBQ1gsSUFBSSxDQUFDRCxjQUFjO1FBRW5CLElBQUlKLDBEQUFjQSxDQUFDLElBQUksQ0FBQ00sU0FBUyxHQUFHO1lBQ2xDLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxXQUFXO2dCQUMxQixJQUFJLENBQUNDLGNBQWM7WUFDckIsR0FBRyxJQUFJLENBQUNILFNBQVM7UUFDbkI7SUFDRjtJQUVBSSxnQkFBZ0JDLFlBQVksRUFBRTtRQUM1QiwwRUFBMEU7UUFDMUUsSUFBSSxDQUFDTCxTQUFTLEdBQUdNLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNQLFNBQVMsSUFBSSxHQUFHSyxnQkFBZ0IsT0FBT0EsZUFBZVYsZ0RBQVFBLEdBQUdhLFdBQVcsSUFBSSxLQUFLO0lBQ3RIO0lBRUFWLGlCQUFpQjtRQUNmLElBQUksSUFBSSxDQUFDRyxTQUFTLEVBQUU7WUFDbEJRLGFBQWEsSUFBSSxDQUFDUixTQUFTO1lBQzNCLElBQUksQ0FBQ0EsU0FBUyxHQUFHUztRQUNuQjtJQUNGO0FBRUY7QUFFcUIsQ0FDckIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3JlbW92YWJsZS5tanM/MGIxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ZhbGlkVGltZW91dCwgaXNTZXJ2ZXIgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmNsYXNzIFJlbW92YWJsZSB7XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICB9XG5cbiAgc2NoZWR1bGVHYygpIHtcbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG5cbiAgICBpZiAoaXNWYWxpZFRpbWVvdXQodGhpcy5jYWNoZVRpbWUpKSB7XG4gICAgICB0aGlzLmdjVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbmFsUmVtb3ZlKCk7XG4gICAgICB9LCB0aGlzLmNhY2hlVGltZSk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ2FjaGVUaW1lKG5ld0NhY2hlVGltZSkge1xuICAgIC8vIERlZmF1bHQgdG8gNSBtaW51dGVzIChJbmZpbml0eSBmb3Igc2VydmVyLXNpZGUpIGlmIG5vIGNhY2hlIHRpbWUgaXMgc2V0XG4gICAgdGhpcy5jYWNoZVRpbWUgPSBNYXRoLm1heCh0aGlzLmNhY2hlVGltZSB8fCAwLCBuZXdDYWNoZVRpbWUgIT0gbnVsbCA/IG5ld0NhY2hlVGltZSA6IGlzU2VydmVyID8gSW5maW5pdHkgOiA1ICogNjAgKiAxMDAwKTtcbiAgfVxuXG4gIGNsZWFyR2NUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLmdjVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZ2NUaW1lb3V0KTtcbiAgICAgIHRoaXMuZ2NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCB7IFJlbW92YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZhYmxlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc1ZhbGlkVGltZW91dCIsImlzU2VydmVyIiwiUmVtb3ZhYmxlIiwiZGVzdHJveSIsImNsZWFyR2NUaW1lb3V0Iiwic2NoZWR1bGVHYyIsImNhY2hlVGltZSIsImdjVGltZW91dCIsInNldFRpbWVvdXQiLCJvcHRpb25hbFJlbW92ZSIsInVwZGF0ZUNhY2hlVGltZSIsIm5ld0NhY2hlVGltZSIsIk1hdGgiLCJtYXgiLCJJbmZpbml0eSIsImNsZWFyVGltZW91dCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/removable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/retryer.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelledError: () => (/* binding */ CancelledError),\n/* harmony export */   canFetch: () => (/* binding */ canFetch),\n/* harmony export */   createRetryer: () => (/* binding */ createRetryer),\n/* harmony export */   isCancelledError: () => (/* binding */ isCancelledError)\n/* harmony export */ });\n/* harmony import */ var _focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./focusManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/focusManager.mjs\");\n/* harmony import */ var _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./onlineManager.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/onlineManager.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n\n\n\nfunction defaultRetryDelay(failureCount) {\n    return Math.min(1000 * 2 ** failureCount, 30000);\n}\nfunction canFetch(networkMode) {\n    return (networkMode != null ? networkMode : \"online\") === \"online\" ? _onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline() : true;\n}\nclass CancelledError {\n    constructor(options){\n        this.revert = options == null ? void 0 : options.revert;\n        this.silent = options == null ? void 0 : options.silent;\n    }\n}\nfunction isCancelledError(value) {\n    return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n    let isRetryCancelled = false;\n    let failureCount = 0;\n    let isResolved = false;\n    let continueFn;\n    let promiseResolve;\n    let promiseReject;\n    const promise = new Promise((outerResolve, outerReject)=>{\n        promiseResolve = outerResolve;\n        promiseReject = outerReject;\n    });\n    const cancel = (cancelOptions)=>{\n        if (!isResolved) {\n            reject(new CancelledError(cancelOptions));\n            config.abort == null ? void 0 : config.abort();\n        }\n    };\n    const cancelRetry = ()=>{\n        isRetryCancelled = true;\n    };\n    const continueRetry = ()=>{\n        isRetryCancelled = false;\n    };\n    const shouldPause = ()=>!_focusManager_mjs__WEBPACK_IMPORTED_MODULE_1__.focusManager.isFocused() || config.networkMode !== \"always\" && !_onlineManager_mjs__WEBPACK_IMPORTED_MODULE_0__.onlineManager.isOnline();\n    const resolve = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onSuccess == null ? void 0 : config.onSuccess(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseResolve(value);\n        }\n    };\n    const reject = (value)=>{\n        if (!isResolved) {\n            isResolved = true;\n            config.onError == null ? void 0 : config.onError(value);\n            continueFn == null ? void 0 : continueFn();\n            promiseReject(value);\n        }\n    };\n    const pause = ()=>{\n        return new Promise((continueResolve)=>{\n            continueFn = (value)=>{\n                const canContinue = isResolved || !shouldPause();\n                if (canContinue) {\n                    continueResolve(value);\n                }\n                return canContinue;\n            };\n            config.onPause == null ? void 0 : config.onPause();\n        }).then(()=>{\n            continueFn = undefined;\n            if (!isResolved) {\n                config.onContinue == null ? void 0 : config.onContinue();\n            }\n        });\n    }; // Create loop function\n    const run = ()=>{\n        // Do nothing if already resolved\n        if (isResolved) {\n            return;\n        }\n        let promiseOrValue; // Execute query\n        try {\n            promiseOrValue = config.fn();\n        } catch (error) {\n            promiseOrValue = Promise.reject(error);\n        }\n        Promise.resolve(promiseOrValue).then(resolve).catch((error)=>{\n            var _config$retry, _config$retryDelay;\n            // Stop if the fetch is already resolved\n            if (isResolved) {\n                return;\n            } // Do we need to retry the request?\n            const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n            const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n            const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n            const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n            if (isRetryCancelled || !shouldRetry) {\n                // We are done if the query does not need to be retried\n                reject(error);\n                return;\n            }\n            failureCount++; // Notify on fail\n            config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.sleep)(delay) // Pause if the document is not visible or when the device is offline\n            .then(()=>{\n                if (shouldPause()) {\n                    return pause();\n                }\n                return;\n            }).then(()=>{\n                if (isRetryCancelled) {\n                    reject(error);\n                } else {\n                    run();\n                }\n            });\n        });\n    }; // Start loop\n    if (canFetch(config.networkMode)) {\n        run();\n    } else {\n        pause().then(run);\n    }\n    return {\n        promise,\n        cancel,\n        continue: ()=>{\n            const didContinue = continueFn == null ? void 0 : continueFn();\n            return didContinue ? promise : Promise.resolve();\n        },\n        cancelRetry,\n        continueRetry\n    };\n}\n //# sourceMappingURL=retryer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/retryer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/subscribable.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Subscribable: () => (/* binding */ Subscribable)\n/* harmony export */ });\nclass Subscribable {\n    constructor(){\n        this.listeners = new Set();\n        this.subscribe = this.subscribe.bind(this);\n    }\n    subscribe(listener) {\n        const identity = {\n            listener\n        };\n        this.listeners.add(identity);\n        this.onSubscribe();\n        return ()=>{\n            this.listeners.delete(identity);\n            this.onUnsubscribe();\n        };\n    }\n    hasListeners() {\n        return this.listeners.size > 0;\n    }\n    onSubscribe() {}\n    onUnsubscribe() {}\n}\n //# sourceMappingURL=subscribable.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3N1YnNjcmliYWJsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BO0lBQ0pDLGFBQWM7UUFDWixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJQztRQUNyQixJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJLENBQUNBLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFDM0M7SUFFQUQsVUFBVUUsUUFBUSxFQUFFO1FBQ2xCLE1BQU1DLFdBQVc7WUFDZkQ7UUFDRjtRQUNBLElBQUksQ0FBQ0osU0FBUyxDQUFDTSxHQUFHLENBQUNEO1FBQ25CLElBQUksQ0FBQ0UsV0FBVztRQUNoQixPQUFPO1lBQ0wsSUFBSSxDQUFDUCxTQUFTLENBQUNRLE1BQU0sQ0FBQ0g7WUFDdEIsSUFBSSxDQUFDSSxhQUFhO1FBQ3BCO0lBQ0Y7SUFFQUMsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDVixTQUFTLENBQUNXLElBQUksR0FBRztJQUMvQjtJQUVBSixjQUFjLENBQ2Q7SUFFQUUsZ0JBQWdCLENBQ2hCO0FBRUY7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbGliL3N1YnNjcmliYWJsZS5tanM/NjY5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdWJzY3JpYmFibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZSA9IHRoaXMuc3Vic2NyaWJlLmJpbmQodGhpcyk7XG4gIH1cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBjb25zdCBpZGVudGl0eSA9IHtcbiAgICAgIGxpc3RlbmVyXG4gICAgfTtcbiAgICB0aGlzLmxpc3RlbmVycy5hZGQoaWRlbnRpdHkpO1xuICAgIHRoaXMub25TdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGlkZW50aXR5KTtcbiAgICAgIHRoaXMub25VbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH1cblxuICBoYXNMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnNpemUgPiAwO1xuICB9XG5cbiAgb25TdWJzY3JpYmUoKSB7Ly8gRG8gbm90aGluZ1xuICB9XG5cbiAgb25VbnN1YnNjcmliZSgpIHsvLyBEbyBub3RoaW5nXG4gIH1cblxufVxuXG5leHBvcnQgeyBTdWJzY3JpYmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliYWJsZS5tanMubWFwXG4iXSwibmFtZXMiOlsiU3Vic2NyaWJhYmxlIiwiY29uc3RydWN0b3IiLCJsaXN0ZW5lcnMiLCJTZXQiLCJzdWJzY3JpYmUiLCJiaW5kIiwibGlzdGVuZXIiLCJpZGVudGl0eSIsImFkZCIsIm9uU3Vic2NyaWJlIiwiZGVsZXRlIiwib25VbnN1YnNjcmliZSIsImhhc0xpc3RlbmVycyIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/subscribable.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/query-core/build/lib/utils.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   functionalUpdate: () => (/* binding */ functionalUpdate),\n/* harmony export */   getAbortController: () => (/* binding */ getAbortController),\n/* harmony export */   hashQueryKey: () => (/* binding */ hashQueryKey),\n/* harmony export */   hashQueryKeyByOptions: () => (/* binding */ hashQueryKeyByOptions),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isPlainArray: () => (/* binding */ isPlainArray),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isQueryKey: () => (/* binding */ isQueryKey),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   isValidTimeout: () => (/* binding */ isValidTimeout),\n/* harmony export */   matchMutation: () => (/* binding */ matchMutation),\n/* harmony export */   matchQuery: () => (/* binding */ matchQuery),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   parseFilterArgs: () => (/* binding */ parseFilterArgs),\n/* harmony export */   parseMutationArgs: () => (/* binding */ parseMutationArgs),\n/* harmony export */   parseMutationFilterArgs: () => (/* binding */ parseMutationFilterArgs),\n/* harmony export */   parseQueryArgs: () => (/* binding */ parseQueryArgs),\n/* harmony export */   partialDeepEqual: () => (/* binding */ partialDeepEqual),\n/* harmony export */   partialMatchKey: () => (/* binding */ partialMatchKey),\n/* harmony export */   replaceAt: () => (/* binding */ replaceAt),\n/* harmony export */   replaceData: () => (/* binding */ replaceData),\n/* harmony export */   replaceEqualDeep: () => (/* binding */ replaceEqualDeep),\n/* harmony export */   scheduleMicrotask: () => (/* binding */ scheduleMicrotask),\n/* harmony export */   shallowEqualObjects: () => (/* binding */ shallowEqualObjects),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeUntilStale: () => (/* binding */ timeUntilStale)\n/* harmony export */ });\n// TYPES\n// UTILS\nconst isServer =  true || 0;\nfunction noop() {\n    return undefined;\n}\nfunction functionalUpdate(updater, input) {\n    return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n    return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n    return array1.filter((x)=>!array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n    const copy = array.slice(0);\n    copy[index] = value;\n    return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n    if (!isQueryKey(arg1)) {\n        return arg1;\n    }\n    if (typeof arg2 === \"function\") {\n        return {\n            ...arg3,\n            queryKey: arg1,\n            queryFn: arg2\n        };\n    }\n    return {\n        ...arg2,\n        queryKey: arg1\n    };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n    if (isQueryKey(arg1)) {\n        if (typeof arg2 === \"function\") {\n            return {\n                ...arg3,\n                mutationKey: arg1,\n                mutationFn: arg2\n            };\n        }\n        return {\n            ...arg2,\n            mutationKey: arg1\n        };\n    }\n    if (typeof arg1 === \"function\") {\n        return {\n            ...arg2,\n            mutationFn: arg1\n        };\n    }\n    return {\n        ...arg1\n    };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            queryKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n    return isQueryKey(arg1) ? [\n        {\n            ...arg2,\n            mutationKey: arg1\n        },\n        arg3\n    ] : [\n        arg1 || {},\n        arg2\n    ];\n}\nfunction matchQuery(filters, query) {\n    const { type = \"all\", exact, fetchStatus, predicate, queryKey, stale } = filters;\n    if (isQueryKey(queryKey)) {\n        if (exact) {\n            if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n                return false;\n            }\n        } else if (!partialMatchKey(query.queryKey, queryKey)) {\n            return false;\n        }\n    }\n    if (type !== \"all\") {\n        const isActive = query.isActive();\n        if (type === \"active\" && !isActive) {\n            return false;\n        }\n        if (type === \"inactive\" && isActive) {\n            return false;\n        }\n    }\n    if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n        return false;\n    }\n    if (typeof fetchStatus !== \"undefined\" && fetchStatus !== query.state.fetchStatus) {\n        return false;\n    }\n    if (predicate && !predicate(query)) {\n        return false;\n    }\n    return true;\n}\nfunction matchMutation(filters, mutation) {\n    const { exact, fetching, predicate, mutationKey } = filters;\n    if (isQueryKey(mutationKey)) {\n        if (!mutation.options.mutationKey) {\n            return false;\n        }\n        if (exact) {\n            if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n                return false;\n            }\n        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n            return false;\n        }\n    }\n    if (typeof fetching === \"boolean\" && mutation.state.status === \"loading\" !== fetching) {\n        return false;\n    }\n    if (predicate && !predicate(mutation)) {\n        return false;\n    }\n    return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n    return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */ function hashQueryKey(queryKey) {\n    return JSON.stringify(queryKey, (_, val)=>isPlainObject(val) ? Object.keys(val).sort().reduce((result, key)=>{\n            result[key] = val[key];\n            return result;\n        }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */ function partialMatchKey(a, b) {\n    return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */ function partialDeepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a !== typeof b) {\n        return false;\n    }\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        return !Object.keys(b).some((key)=>!partialDeepEqual(a[key], b[key]));\n    }\n    return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */ function replaceEqualDeep(a, b) {\n    if (a === b) {\n        return a;\n    }\n    const array = isPlainArray(a) && isPlainArray(b);\n    if (array || isPlainObject(a) && isPlainObject(b)) {\n        const aSize = array ? a.length : Object.keys(a).length;\n        const bItems = array ? b : Object.keys(b);\n        const bSize = bItems.length;\n        const copy = array ? [] : {};\n        let equalItems = 0;\n        for(let i = 0; i < bSize; i++){\n            const key = array ? i : bItems[i];\n            copy[key] = replaceEqualDeep(a[key], b[key]);\n            if (copy[key] === a[key]) {\n                equalItems++;\n            }\n        }\n        return aSize === bSize && equalItems === aSize ? a : copy;\n    }\n    return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */ function shallowEqualObjects(a, b) {\n    if (a && !b || b && !a) {\n        return false;\n    }\n    for(const key in a){\n        if (a[key] !== b[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isPlainArray(value) {\n    return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o) {\n    if (!hasObjectPrototype(o)) {\n        return false;\n    } // If has modified constructor\n    const ctor = o.constructor;\n    if (typeof ctor === \"undefined\") {\n        return true;\n    } // If has modified prototype\n    const prot = ctor.prototype;\n    if (!hasObjectPrototype(prot)) {\n        return false;\n    } // If constructor does not have an Object-specific method\n    if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    } // Most likely a plain Object\n    return true;\n}\nfunction hasObjectPrototype(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction isQueryKey(value) {\n    return Array.isArray(value);\n}\nfunction isError(value) {\n    return value instanceof Error;\n}\nfunction sleep(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, timeout);\n    });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */ function scheduleMicrotask(callback) {\n    sleep(0).then(callback);\n}\nfunction getAbortController() {\n    if (typeof AbortController === \"function\") {\n        return new AbortController();\n    }\n    return;\n}\nfunction replaceData(prevData, data, options) {\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n        return prevData;\n    } else if (typeof options.structuralSharing === \"function\") {\n        return options.structuralSharing(prevData, data);\n    } else if (options.structuralSharing !== false) {\n        // Structurally share data between prev and new data if needed\n        return replaceEqualDeep(prevData, data);\n    }\n    return data;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   persistQueryClient: () => (/* binding */ persistQueryClient),\n/* harmony export */   persistQueryClientRestore: () => (/* binding */ persistQueryClientRestore),\n/* harmony export */   persistQueryClientSave: () => (/* binding */ persistQueryClientSave),\n/* harmony export */   persistQueryClientSubscribe: () => (/* binding */ persistQueryClientSubscribe)\n/* harmony export */ });\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/hydration.mjs\");\n\n/**\n * Checks if emitted event is about cache change and not about observers.\n * Useful for persist, where we only want to trigger save when cache is changed.\n */ const cacheableEventTypes = [\n    \"added\",\n    \"removed\",\n    \"updated\"\n];\nfunction isCacheableEventType(eventType) {\n    return cacheableEventTypes.includes(eventType);\n}\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */ async function persistQueryClientRestore({ queryClient, persister, maxAge = 1000 * 60 * 60 * 24, buster = \"\", hydrateOptions }) {\n    try {\n        const persistedClient = await persister.restoreClient();\n        if (persistedClient) {\n            if (persistedClient.timestamp) {\n                const expired = Date.now() - persistedClient.timestamp > maxAge;\n                const busted = persistedClient.buster !== buster;\n                if (expired || busted) {\n                    persister.removeClient();\n                } else {\n                    (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.hydrate)(queryClient, persistedClient.clientState, hydrateOptions);\n                }\n            } else {\n                persister.removeClient();\n            }\n        }\n    } catch (err) {\n        if (true) {\n            queryClient.getLogger().error(err);\n            queryClient.getLogger().warn(\"Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.\");\n        }\n        persister.removeClient();\n    }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */ async function persistQueryClientSave({ queryClient, persister, buster = \"\", dehydrateOptions }) {\n    const persistClient = {\n        buster,\n        timestamp: Date.now(),\n        clientState: (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_0__.dehydrate)(queryClient, dehydrateOptions)\n    };\n    await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */ function persistQueryClientSubscribe(props) {\n    const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe((event)=>{\n        if (isCacheableEventType(event.type)) {\n            persistQueryClientSave(props);\n        }\n    });\n    return ()=>{\n        unsubscribeQueryCache();\n        unusbscribeMutationCache();\n    };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */ function persistQueryClient(props) {\n    let hasUnsubscribed = false;\n    let persistQueryClientUnsubscribe;\n    const unsubscribe = ()=>{\n        hasUnsubscribed = true;\n        persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n    }; // Attempt restore\n    const restorePromise = persistQueryClientRestore(props).then(()=>{\n        if (!hasUnsubscribed) {\n            // Subscribe to changes in the query cache to trigger the save\n            persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n        }\n    });\n    return [\n        unsubscribe,\n        restorePromise\n    ];\n}\n //# sourceMappingURL=persist.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryClientProvider: () => (/* binding */ QueryClientProvider),\n/* harmony export */   defaultContext: () => (/* binding */ defaultContext),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryClientProvider,defaultContext,useQueryClient auto */ \nconst defaultContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\nconst QueryClientSharingContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false); // If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(context, contextSharing) {\n    if (context) {\n        return context;\n    }\n    if (contextSharing && \"undefined\" !== \"undefined\") {}\n    return defaultContext;\n}\nconst useQueryClient = ({ context } = {})=>{\n    const queryClient = react__WEBPACK_IMPORTED_MODULE_0__.useContext(getQueryClientContext(context, react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryClientSharingContext)));\n    if (!queryClient) {\n        throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    }\n    return queryClient;\n};\nconst QueryClientProvider = ({ client, children, context, contextSharing = false })=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        client.mount();\n        return ()=>{\n            client.unmount();\n        };\n    }, [\n        client\n    ]);\n    if ( true && contextSharing) {\n        client.getLogger().error(\"The contextSharing option has been deprecated and will be removed in the next major version\");\n    }\n    const Context = getQueryClientContext(context, contextSharing);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryClientSharingContext.Provider, {\n        value: !context && contextSharing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, {\n        value: client\n    }, children));\n};\n //# sourceMappingURL=QueryClientProvider.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUNsaWVudFByb3ZpZGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O3VHQUMrQjtBQUUvQixNQUFNQyxpQkFBaUIsV0FBVyxHQUFFRCxnREFBbUIsQ0FBQ0c7QUFDeEQsTUFBTUMsNEJBQTRCLFdBQVcsR0FBRUosZ0RBQW1CLENBQUMsUUFBUSw2Q0FBNkM7QUFDeEgsMEVBQTBFO0FBQzFFLDRDQUE0QztBQUM1QywrQ0FBK0M7QUFDL0MsZ0RBQWdEO0FBQ2hELHVEQUF1RDtBQUN2RCxxQkFBcUI7QUFFckIsU0FBU0ssc0JBQXNCQyxPQUFPLEVBQUVDLGNBQWM7SUFDcEQsSUFBSUQsU0FBUztRQUNYLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJQyxrQkFBa0IsZ0JBQWtCLGFBQWEsRUFNcEQ7SUFFRCxPQUFPTjtBQUNUO0FBRUEsTUFBTVMsaUJBQWlCLENBQUMsRUFDdEJKLE9BQU8sRUFDUixHQUFHLENBQUMsQ0FBQztJQUNKLE1BQU1LLGNBQWNYLDZDQUFnQixDQUFDSyxzQkFBc0JDLFNBQVNOLDZDQUFnQixDQUFDSTtJQUVyRixJQUFJLENBQUNPLGFBQWE7UUFDaEIsTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBRUEsT0FBT0Y7QUFDVDtBQUNBLE1BQU1HLHNCQUFzQixDQUFDLEVBQzNCQyxNQUFNLEVBQ05DLFFBQVEsRUFDUlYsT0FBTyxFQUNQQyxpQkFBaUIsS0FBSyxFQUN2QjtJQUNDUCw0Q0FBZSxDQUFDO1FBQ2RlLE9BQU9HLEtBQUs7UUFDWixPQUFPO1lBQ0xILE9BQU9JLE9BQU87UUFDaEI7SUFDRixHQUFHO1FBQUNKO0tBQU87SUFFWCxJQUFJSyxLQUF5QixJQUFnQmIsZ0JBQWdCO1FBQzNEUSxPQUFPTSxTQUFTLEdBQUdDLEtBQUssQ0FBQztJQUMzQjtJQUVBLE1BQU1DLFVBQVVsQixzQkFBc0JDLFNBQVNDO0lBQy9DLE9BQU8sV0FBVyxHQUFFUCxnREFBbUIsQ0FBQ0ksMEJBQTBCcUIsUUFBUSxFQUFFO1FBQzFFQyxPQUFPLENBQUNwQixXQUFXQztJQUNyQixHQUFHLFdBQVcsR0FBRVAsZ0RBQW1CLENBQUN1QixRQUFRRSxRQUFRLEVBQUU7UUFDcERDLE9BQU9YO0lBQ1QsR0FBR0M7QUFDTDtBQUUrRCxDQUMvRCxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL1F1ZXJ5Q2xpZW50UHJvdmlkZXIubWpzPzNhY2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBkZWZhdWx0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG5jb25zdCBRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpOyAvLyBJZiB3ZSBhcmUgZ2l2ZW4gYSBjb250ZXh0LCB3ZSB3aWxsIHVzZSBpdC5cbi8vIE90aGVyd2lzZSwgaWYgY29udGV4dFNoYXJpbmcgaXMgb24sIHdlIHNoYXJlIHRoZSBmaXJzdCBhbmQgYXQgbGVhc3Qgb25lXG4vLyBpbnN0YW5jZSBvZiB0aGUgY29udGV4dCBhY3Jvc3MgdGhlIHdpbmRvd1xuLy8gdG8gZW5zdXJlIHRoYXQgaWYgUmVhY3QgUXVlcnkgaXMgdXNlZCBhY3Jvc3Ncbi8vIGRpZmZlcmVudCBidW5kbGVzIG9yIG1pY3JvZnJvbnRlbmRzIHRoZXkgd2lsbFxuLy8gYWxsIHVzZSB0aGUgc2FtZSAqKmluc3RhbmNlKiogb2YgY29udGV4dCwgcmVnYXJkbGVzc1xuLy8gb2YgbW9kdWxlIHNjb3BpbmcuXG5cbmZ1bmN0aW9uIGdldFF1ZXJ5Q2xpZW50Q29udGV4dChjb250ZXh0LCBjb250ZXh0U2hhcmluZykge1xuICBpZiAoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG5cbiAgaWYgKGNvbnRleHRTaGFyaW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCF3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQpIHtcbiAgICAgIHdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCA9IGRlZmF1bHRDb250ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiB3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQ7XG4gIH1cblxuICByZXR1cm4gZGVmYXVsdENvbnRleHQ7XG59XG5cbmNvbnN0IHVzZVF1ZXJ5Q2xpZW50ID0gKHtcbiAgY29udGV4dFxufSA9IHt9KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gUmVhY3QudXNlQ29udGV4dChnZXRRdWVyeUNsaWVudENvbnRleHQoY29udGV4dCwgUmVhY3QudXNlQ29udGV4dChRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0KSkpO1xuXG4gIGlmICghcXVlcnlDbGllbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFF1ZXJ5Q2xpZW50IHNldCwgdXNlIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgdG8gc2V0IG9uZScpO1xuICB9XG5cbiAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xufTtcbmNvbnN0IFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSAoe1xuICBjbGllbnQsXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0LFxuICBjb250ZXh0U2hhcmluZyA9IGZhbHNlXG59KSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2xpZW50Lm1vdW50KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsaWVudC51bm1vdW50KCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudF0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbnRleHRTaGFyaW5nKSB7XG4gICAgY2xpZW50LmdldExvZ2dlcigpLmVycm9yKFwiVGhlIGNvbnRleHRTaGFyaW5nIG9wdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvblwiKTtcbiAgfVxuXG4gIGNvbnN0IENvbnRleHQgPSBnZXRRdWVyeUNsaWVudENvbnRleHQoY29udGV4dCwgY29udGV4dFNoYXJpbmcpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiAhY29udGV4dCAmJiBjb250ZXh0U2hhcmluZ1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNsaWVudFxuICB9LCBjaGlsZHJlbikpO1xufTtcblxuZXhwb3J0IHsgUXVlcnlDbGllbnRQcm92aWRlciwgZGVmYXVsdENvbnRleHQsIHVzZVF1ZXJ5Q2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWVyeUNsaWVudFByb3ZpZGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImRlZmF1bHRDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVuZGVmaW5lZCIsIlF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQiLCJnZXRRdWVyeUNsaWVudENvbnRleHQiLCJjb250ZXh0IiwiY29udGV4dFNoYXJpbmciLCJ3aW5kb3ciLCJSZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCIsInVzZVF1ZXJ5Q2xpZW50IiwicXVlcnlDbGllbnQiLCJ1c2VDb250ZXh0IiwiRXJyb3IiLCJRdWVyeUNsaWVudFByb3ZpZGVyIiwiY2xpZW50IiwiY2hpbGRyZW4iLCJ1c2VFZmZlY3QiLCJtb3VudCIsInVubW91bnQiLCJwcm9jZXNzIiwiZ2V0TG9nZ2VyIiwiZXJyb3IiLCJDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryErrorResetBoundary: () => (/* binding */ QueryErrorResetBoundary),\n/* harmony export */   useQueryErrorResetBoundary: () => (/* binding */ useQueryErrorResetBoundary)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ QueryErrorResetBoundary,useQueryErrorResetBoundary auto */ \nfunction createValue() {\n    let isReset = false;\n    return {\n        clearReset: ()=>{\n            isReset = false;\n        },\n        reset: ()=>{\n            isReset = true;\n        },\n        isReset: ()=>{\n            return isReset;\n        }\n    };\n}\nconst QueryErrorResetBoundaryContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(createValue()); // HOOK\nconst useQueryErrorResetBoundary = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(QueryErrorResetBoundaryContext); // COMPONENT\nconst QueryErrorResetBoundary = ({ children })=>{\n    const [value] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>createValue());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QueryErrorResetBoundaryContext.Provider, {\n        value: value\n    }, typeof children === \"function\" ? children(value) : children);\n};\n //# sourceMappingURL=QueryErrorResetBoundary.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O3dHQUMrQjtBQUUvQixTQUFTQztJQUNQLElBQUlDLFVBQVU7SUFDZCxPQUFPO1FBQ0xDLFlBQVk7WUFDVkQsVUFBVTtRQUNaO1FBQ0FFLE9BQU87WUFDTEYsVUFBVTtRQUNaO1FBQ0FBLFNBQVM7WUFDUCxPQUFPQTtRQUNUO0lBQ0Y7QUFDRjtBQUVBLE1BQU1HLGlDQUFpQyxXQUFXLEdBQUVMLGdEQUFtQixDQUFDQyxnQkFBZ0IsT0FBTztBQUUvRixNQUFNTSw2QkFBNkIsSUFBTVAsNkNBQWdCLENBQUNLLGlDQUFpQyxZQUFZO0FBRXZHLE1BQU1JLDBCQUEwQixDQUFDLEVBQy9CQyxRQUFRLEVBQ1Q7SUFDQyxNQUFNLENBQUNDLE1BQU0sR0FBR1gsMkNBQWMsQ0FBQyxJQUFNQztJQUNyQyxPQUFPLFdBQVcsR0FBRUQsZ0RBQW1CLENBQUNLLCtCQUErQlMsUUFBUSxFQUFFO1FBQy9FSCxPQUFPQTtJQUNULEdBQUcsT0FBT0QsYUFBYSxhQUFhQSxTQUFTQyxTQUFTRDtBQUN4RDtBQUUrRCxDQUMvRCxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL1F1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Lm1qcz9mOTVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gY3JlYXRlVmFsdWUoKSB7XG4gIGxldCBpc1Jlc2V0ID0gZmFsc2U7XG4gIHJldHVybiB7XG4gICAgY2xlYXJSZXNldDogKCkgPT4ge1xuICAgICAgaXNSZXNldCA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgIGlzUmVzZXQgPSB0cnVlO1xuICAgIH0sXG4gICAgaXNSZXNldDogKCkgPT4ge1xuICAgICAgcmV0dXJuIGlzUmVzZXQ7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChjcmVhdGVWYWx1ZSgpKTsgLy8gSE9PS1xuXG5jb25zdCB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSA9ICgpID0+IFJlYWN0LnVzZUNvbnRleHQoUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0KTsgLy8gQ09NUE9ORU5UXG5cbmNvbnN0IFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gKHtcbiAgY2hpbGRyZW5cbn0pID0+IHtcbiAgY29uc3QgW3ZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGNyZWF0ZVZhbHVlKCkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZhbHVlXG4gIH0sIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHZhbHVlKSA6IGNoaWxkcmVuKTtcbn07XG5cbmV4cG9ydCB7IFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5LCB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlFcnJvclJlc2V0Qm91bmRhcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlVmFsdWUiLCJpc1Jlc2V0IiwiY2xlYXJSZXNldCIsInJlc2V0IiwiUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IiwidXNlQ29udGV4dCIsIlF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IiwiY2hpbGRyZW4iLCJ2YWx1ZSIsInVzZVN0YXRlIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IsRestoringProvider: () => (/* binding */ IsRestoringProvider),\n/* harmony export */   useIsRestoring: () => (/* binding */ useIsRestoring)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ IsRestoringProvider,useIsRestoring auto */ \nconst IsRestoringContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(false);\nconst useIsRestoring = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsRestoringContext);\nconst IsRestoringProvider = IsRestoringContext.Provider;\n //# sourceMappingURL=isRestoring.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9pc1Jlc3RvcmluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O3dGQUMrQjtBQUUvQixNQUFNQyxxQkFBcUIsV0FBVyxHQUFFRCxnREFBbUIsQ0FBQztBQUM1RCxNQUFNRyxpQkFBaUIsSUFBTUgsNkNBQWdCLENBQUNDO0FBQzlDLE1BQU1JLHNCQUFzQkosbUJBQW1CSyxRQUFRO0FBRVIsQ0FDL0Msd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi9pc1Jlc3RvcmluZy5tanM/YjRkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IElzUmVzdG9yaW5nQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbmNvbnN0IHVzZUlzUmVzdG9yaW5nID0gKCkgPT4gUmVhY3QudXNlQ29udGV4dChJc1Jlc3RvcmluZ0NvbnRleHQpO1xuY29uc3QgSXNSZXN0b3JpbmdQcm92aWRlciA9IElzUmVzdG9yaW5nQ29udGV4dC5Qcm92aWRlcjtcblxuZXhwb3J0IHsgSXNSZXN0b3JpbmdQcm92aWRlciwgdXNlSXNSZXN0b3JpbmcgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVzdG9yaW5nLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIklzUmVzdG9yaW5nQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VJc1Jlc3RvcmluZyIsInVzZUNvbnRleHQiLCJJc1Jlc3RvcmluZ1Byb3ZpZGVyIiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useMutation.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMutation: () => (/* binding */ useMutation)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/mutationObserver.mjs\");\n/* harmony import */ var _tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/query-core */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var _useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useSyncExternalStore.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\");\n/* harmony import */ var _QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryClientProvider.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs\");\n/* __next_internal_client_entry_do_not_use__ useMutation auto */ \n\n\n\n\nfunction useMutation(arg1, arg2, arg3) {\n    const options = (0,_tanstack_query_core__WEBPACK_IMPORTED_MODULE_1__.parseMutationArgs)(arg1, arg2, arg3);\n    const queryClient = (0,_QueryClientProvider_mjs__WEBPACK_IMPORTED_MODULE_2__.useQueryClient)({\n        context: options.context\n    });\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_query_core__WEBPACK_IMPORTED_MODULE_3__.MutationObserver(queryClient, options));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        observer.setOptions(options);\n    }, [\n        observer,\n        options\n    ]);\n    const result = (0,_useSyncExternalStore_mjs__WEBPACK_IMPORTED_MODULE_4__.useSyncExternalStore)(react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>observer.subscribe(_tanstack_query_core__WEBPACK_IMPORTED_MODULE_5__.notifyManager.batchCalls(onStoreChange)), [\n        observer\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    const mutate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((variables, mutateOptions)=>{\n        observer.mutate(variables, mutateOptions).catch(noop);\n    }, [\n        observer\n    ]);\n    if (result.error && (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_6__.shouldThrowError)(observer.options.useErrorBoundary, [\n        result.error\n    ])) {\n        throw result.error;\n    }\n    return {\n        ...result,\n        mutate,\n        mutateAsync: result.mutate\n    };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n //# sourceMappingURL=useMutation.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VNdXRhdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7aUVBQytCO0FBQzJEO0FBQ3hCO0FBQ1A7QUFDWjtBQUUvQyxTQUFTTyxZQUFZQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsSUFBSTtJQUNuQyxNQUFNQyxVQUFVVix1RUFBaUJBLENBQUNPLE1BQU1DLE1BQU1DO0lBQzlDLE1BQU1FLGNBQWNQLHdFQUFjQSxDQUFDO1FBQ2pDUSxTQUFTRixRQUFRRSxPQUFPO0lBQzFCO0lBQ0EsTUFBTSxDQUFDQyxTQUFTLEdBQUdkLDJDQUFjLENBQUMsSUFBTSxJQUFJRSxrRUFBZ0JBLENBQUNVLGFBQWFEO0lBQzFFWCw0Q0FBZSxDQUFDO1FBQ2RjLFNBQVNHLFVBQVUsQ0FBQ047SUFDdEIsR0FBRztRQUFDRztRQUFVSDtLQUFRO0lBQ3RCLE1BQU1PLFNBQVNkLCtFQUFvQkEsQ0FBQ0osOENBQWlCLENBQUNvQixDQUFBQSxnQkFBaUJOLFNBQVNPLFNBQVMsQ0FBQ2xCLCtEQUFhQSxDQUFDbUIsVUFBVSxDQUFDRixpQkFBaUI7UUFBQ047S0FBUyxHQUFHLElBQU1BLFNBQVNTLGdCQUFnQixJQUFJLElBQU1ULFNBQVNTLGdCQUFnQjtJQUNuTixNQUFNQyxTQUFTeEIsOENBQWlCLENBQUMsQ0FBQ3lCLFdBQVdDO1FBQzNDWixTQUFTVSxNQUFNLENBQUNDLFdBQVdDLGVBQWVDLEtBQUssQ0FBQ0M7SUFDbEQsR0FBRztRQUFDZDtLQUFTO0lBRWIsSUFBSUksT0FBT1csS0FBSyxJQUFJdkIsNERBQWdCQSxDQUFDUSxTQUFTSCxPQUFPLENBQUNtQixnQkFBZ0IsRUFBRTtRQUFDWixPQUFPVyxLQUFLO0tBQUMsR0FBRztRQUN2RixNQUFNWCxPQUFPVyxLQUFLO0lBQ3BCO0lBRUEsT0FBTztRQUFFLEdBQUdYLE1BQU07UUFDaEJNO1FBQ0FPLGFBQWFiLE9BQU9NLE1BQU07SUFDNUI7QUFDRixFQUFFLGdFQUFnRTtBQUVsRSxTQUFTSSxRQUFRO0FBRU0sQ0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VNdXRhdGlvbi5tanM/OTQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwYXJzZU11dGF0aW9uQXJncywgTXV0YXRpb25PYnNlcnZlciwgbm90aWZ5TWFuYWdlciB9IGZyb20gJ0B0YW5zdGFjay9xdWVyeS1jb3JlJztcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAnLi91c2VTeW5jRXh0ZXJuYWxTdG9yZS5tanMnO1xuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tICcuL1F1ZXJ5Q2xpZW50UHJvdmlkZXIubWpzJztcbmltcG9ydCB7IHNob3VsZFRocm93RXJyb3IgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHBhcnNlTXV0YXRpb25BcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KHtcbiAgICBjb250ZXh0OiBvcHRpb25zLmNvbnRleHRcbiAgfSk7XG4gIGNvbnN0IFtvYnNlcnZlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgTXV0YXRpb25PYnNlcnZlcihxdWVyeUNsaWVudCwgb3B0aW9ucykpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIG9ic2VydmVyLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH0sIFtvYnNlcnZlciwgb3B0aW9uc10pO1xuICBjb25zdCByZXN1bHQgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZShSZWFjdC51c2VDYWxsYmFjayhvblN0b3JlQ2hhbmdlID0+IG9ic2VydmVyLnN1YnNjcmliZShub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMob25TdG9yZUNoYW5nZSkpLCBbb2JzZXJ2ZXJdKSwgKCkgPT4gb2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpLCAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCkpO1xuICBjb25zdCBtdXRhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygodmFyaWFibGVzLCBtdXRhdGVPcHRpb25zKSA9PiB7XG4gICAgb2JzZXJ2ZXIubXV0YXRlKHZhcmlhYmxlcywgbXV0YXRlT3B0aW9ucykuY2F0Y2gobm9vcCk7XG4gIH0sIFtvYnNlcnZlcl0pO1xuXG4gIGlmIChyZXN1bHQuZXJyb3IgJiYgc2hvdWxkVGhyb3dFcnJvcihvYnNlcnZlci5vcHRpb25zLnVzZUVycm9yQm91bmRhcnksIFtyZXN1bHQuZXJyb3JdKSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuXG4gIHJldHVybiB7IC4uLnJlc3VsdCxcbiAgICBtdXRhdGUsXG4gICAgbXV0YXRlQXN5bmM6IHJlc3VsdC5tdXRhdGVcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZXhwb3J0IHsgdXNlTXV0YXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU11dGF0aW9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInBhcnNlTXV0YXRpb25BcmdzIiwiTXV0YXRpb25PYnNlcnZlciIsIm5vdGlmeU1hbmFnZXIiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZVF1ZXJ5Q2xpZW50Iiwic2hvdWxkVGhyb3dFcnJvciIsInVzZU11dGF0aW9uIiwiYXJnMSIsImFyZzIiLCJhcmczIiwib3B0aW9ucyIsInF1ZXJ5Q2xpZW50IiwiY29udGV4dCIsIm9ic2VydmVyIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzZXRPcHRpb25zIiwicmVzdWx0IiwidXNlQ2FsbGJhY2siLCJvblN0b3JlQ2hhbmdlIiwic3Vic2NyaWJlIiwiYmF0Y2hDYWxscyIsImdldEN1cnJlbnRSZXN1bHQiLCJtdXRhdGUiLCJ2YXJpYWJsZXMiLCJtdXRhdGVPcHRpb25zIiwiY2F0Y2giLCJub29wIiwiZXJyb3IiLCJ1c2VFcnJvckJvdW5kYXJ5IiwibXV0YXRlQXN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSyncExternalStore: () => (/* binding */ useSyncExternalStore)\n/* harmony export */ });\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* __next_internal_client_entry_do_not_use__ useSyncExternalStore auto */ \nconst useSyncExternalStore = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore;\n //# sourceMappingURL=useSyncExternalStore.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91c2VTeW5jRXh0ZXJuYWxTdG9yZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7MEVBQ3VHO0FBRXZHLE1BQU1BLHVCQUF1QkMsdUZBQXNCQTtBQUVuQixDQUNoQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbGliL3VzZVN5bmNFeHRlcm5hbFN0b3JlLm1qcz9mODE1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIGFzIHVzZVN5bmNFeHRlcm5hbFN0b3JlJDEgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzJztcblxuY29uc3QgdXNlU3luY0V4dGVybmFsU3RvcmUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxO1xuXG5leHBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlU3luY0V4dGVybmFsU3RvcmUubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlU3luY0V4dGVybmFsU3RvcmUkMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/useSyncExternalStore.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-query/build/lib/utils.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldThrowError: () => (/* binding */ shouldThrowError)\n/* harmony export */ });\nfunction shouldThrowError(_useErrorBoundary, params) {\n    // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n    if (typeof _useErrorBoundary === \"function\") {\n        return _useErrorBoundary(...params);\n    }\n    return !!_useErrorBoundary;\n}\n //# sourceMappingURL=utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL2xpYi91dGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLGlCQUFpQkMsaUJBQWlCLEVBQUVDLE1BQU07SUFDakQscUZBQXFGO0lBQ3JGLElBQUksT0FBT0Qsc0JBQXNCLFlBQVk7UUFDM0MsT0FBT0EscUJBQXFCQztJQUM5QjtJQUVBLE9BQU8sQ0FBQyxDQUFDRDtBQUNYO0FBRTRCLENBQzVCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250Ly4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9saWIvdXRpbHMubWpzPzIxODUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2hvdWxkVGhyb3dFcnJvcihfdXNlRXJyb3JCb3VuZGFyeSwgcGFyYW1zKSB7XG4gIC8vIEFsbG93IHVzZUVycm9yQm91bmRhcnkgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgdGhyb3dpbmcgYmVoYXZpb3Igb24gYSBwZXItZXJyb3IgYmFzaXNcbiAgaWYgKHR5cGVvZiBfdXNlRXJyb3JCb3VuZGFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfdXNlRXJyb3JCb3VuZGFyeSguLi5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuICEhX3VzZUVycm9yQm91bmRhcnk7XG59XG5cbmV4cG9ydCB7IHNob3VsZFRocm93RXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJzaG91bGRUaHJvd0Vycm9yIiwiX3VzZUVycm9yQm91bmRhcnkiLCJwYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-query/build/lib/utils.mjs\n");

/***/ })

};
;