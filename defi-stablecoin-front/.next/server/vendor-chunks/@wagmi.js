"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wagmi";
exports.ids = ["vendor-chunks/@wagmi"];
exports.modules = {

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeChainId: () => (/* binding */ normalizeChainId)\n/* harmony export */ });\n// src/utils/normalizeChainId.ts\nfunction normalizeChainId(chainId) {\n    if (typeof chainId === \"string\") return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n    if (typeof chainId === \"bigint\") return Number(chainId);\n    return chainId;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1PUUlMWVFETy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0NBQWdDO0FBQ2hDLFNBQVNBLGlCQUFpQkMsT0FBTztJQUMvQixJQUFJLE9BQU9BLFlBQVksVUFDckIsT0FBT0MsT0FBT0MsUUFBUSxDQUNwQkYsU0FDQUEsUUFBUUcsSUFBSSxHQUFHQyxTQUFTLENBQUMsR0FBRyxPQUFPLE9BQU8sS0FBSztJQUVuRCxJQUFJLE9BQU9KLFlBQVksVUFDckIsT0FBT0MsT0FBT0Q7SUFDaEIsT0FBT0E7QUFDVDtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1PUUlMWVFETy5qcz9jMjdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy9ub3JtYWxpemVDaGFpbklkLnRzXG5mdW5jdGlvbiBub3JtYWxpemVDaGFpbklkKGNoYWluSWQpIHtcbiAgaWYgKHR5cGVvZiBjaGFpbklkID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQoXG4gICAgICBjaGFpbklkLFxuICAgICAgY2hhaW5JZC50cmltKCkuc3Vic3RyaW5nKDAsIDIpID09PSBcIjB4XCIgPyAxNiA6IDEwXG4gICAgKTtcbiAgaWYgKHR5cGVvZiBjaGFpbklkID09PSBcImJpZ2ludFwiKVxuICAgIHJldHVybiBOdW1iZXIoY2hhaW5JZCk7XG4gIHJldHVybiBjaGFpbklkO1xufVxuXG5leHBvcnQge1xuICBub3JtYWxpemVDaGFpbklkXG59O1xuIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZUNoYWluSWQiLCJjaGFpbklkIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJ0cmltIiwic3Vic3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-P4NRLOY7.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-P4NRLOY7.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InjectedConnector: () => (/* binding */ InjectedConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-OQILYQDO.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n// src/injected.ts\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n    if (!ethereum) return \"Injected\";\n    const getName = (provider)=>{\n        if (provider.isApexWallet) return \"Apex Wallet\";\n        if (provider.isAvalanche) return \"Core Wallet\";\n        if (provider.isBackpack) return \"Backpack\";\n        if (provider.isBifrost) return \"Bifrost Wallet\";\n        if (provider.isBitKeep) return \"BitKeep\";\n        if (provider.isBitski) return \"Bitski\";\n        if (provider.isBlockWallet) return \"BlockWallet\";\n        if (provider.isBraveWallet) return \"Brave Wallet\";\n        if (provider.isCoin98) return \"Coin98 Wallet\";\n        if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n        if (provider.isDawn) return \"Dawn Wallet\";\n        if (provider.isDefiant) return \"Defiant\";\n        if (provider.isDesig) return \"Desig Wallet\";\n        if (provider.isEnkrypt) return \"Enkrypt\";\n        if (provider.isExodus) return \"Exodus\";\n        if (provider.isFordefi) return \"Fordefi\";\n        if (provider.isFrame) return \"Frame\";\n        if (provider.isFrontier) return \"Frontier Wallet\";\n        if (provider.isGamestop) return \"GameStop Wallet\";\n        if (provider.isHaqqWallet) return \"HAQQ Wallet\";\n        if (provider.isHyperPay) return \"HyperPay Wallet\";\n        if (provider.isImToken) return \"ImToken\";\n        if (provider.isHaloWallet) return \"Halo Wallet\";\n        if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n        if (provider.isMathWallet) return \"MathWallet\";\n        if (provider.isNovaWallet) return \"Nova Wallet\";\n        if (provider.isOkxWallet || provider.isOKExWallet) return \"OKX Wallet\";\n        if (provider.isOktoWallet) return \"Okto Wallet\";\n        if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n        if (provider.isOneKey) return \"OneKey Wallet\";\n        if (provider.isOpera) return \"Opera\";\n        if (provider.isPhantom) return \"Phantom\";\n        if (provider.isPortal) return \"Ripio Portal\";\n        if (provider.isRabby) return \"Rabby Wallet\";\n        if (provider.isRainbow) return \"Rainbow\";\n        if (provider.isSafePal) return \"SafePal Wallet\";\n        if (provider.isStatus) return \"Status\";\n        if (provider.isSubWallet) return \"SubWallet\";\n        if (provider.isTalisman) return \"Talisman\";\n        if (provider.isTally) return \"Taho\";\n        if (provider.isTokenPocket) return \"TokenPocket\";\n        if (provider.isTokenary) return \"Tokenary\";\n        if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n        if (provider.isTTWallet) return \"TTWallet\";\n        if (provider.isXDEFI) return \"XDEFI Wallet\";\n        if (provider.isZeal) return \"Zeal\";\n        if (provider.isZerion) return \"Zerion\";\n        if (provider.isMetaMask) return \"MetaMask\";\n    };\n    if (ethereum.providers?.length) {\n        const nameSet = /* @__PURE__ */ new Set();\n        let unknownCount = 1;\n        for (const provider of ethereum.providers){\n            let name = getName(provider);\n            if (!name) {\n                name = `Unknown Wallet #${unknownCount}`;\n                unknownCount += 1;\n            }\n            nameSet.add(name);\n        }\n        const names = [\n            ...nameSet\n        ];\n        if (names.length) return names;\n        return names[0] ?? \"Injected\";\n    }\n    return getName(ethereum) ?? \"Injected\";\n}\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor({ chains, options: options_ } = {}){\n        const options = {\n            shimDisconnect: true,\n            getProvider () {\n                if (true) return;\n                const ethereum = window.ethereum;\n                if (ethereum?.providers && ethereum.providers.length > 0) return ethereum.providers[0];\n                return ethereum;\n            },\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        this.id = \"injected\";\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = async (error)=>{\n            if (error.code === 1013) {\n                const provider = await this.getProvider();\n                if (provider) {\n                    const isAuthorized = await this.getAccount();\n                    if (isAuthorized) return;\n                }\n            }\n            this.emit(\"disconnect\");\n            if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n        };\n        const provider = options.getProvider();\n        if (typeof options.name === \"string\") this.name = options.name;\n        else if (provider) {\n            const detectedName = getInjectedName(provider);\n            if (options.name) this.name = options.name(detectedName);\n            else {\n                if (typeof detectedName === \"string\") this.name = detectedName;\n                else this.name = detectedName[0];\n            }\n        } else this.name = \"Injected\";\n        this.ready = !!provider;\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n            if (provider.on) {\n                provider.on(\"accountsChanged\", this.onAccountsChanged);\n                provider.on(\"chainChanged\", this.onChainChanged);\n                provider.on(\"disconnect\", this.onDisconnect);\n            }\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            const accounts = await provider.request({\n                method: \"eth_requestAccounts\"\n            });\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            if (this.options.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error);\n            if (error.code === -32002) throw new viem__WEBPACK_IMPORTED_MODULE_4__.ResourceUnavailableRpcError(error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        if (!provider?.removeListener) return;\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        const accounts = await provider.request({\n            method: \"eth_accounts\"\n        });\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"eth_chainId\"\n        }).then(_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId);\n    }\n    async getProvider() {\n        const provider = this.options.getProvider();\n        if (provider) (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, provider);\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider(),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_5__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_6__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) return false;\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        const id = (0,viem__WEBPACK_IMPORTED_MODULE_7__.numberToHex)(chainId);\n        try {\n            await Promise.all([\n                provider.request({\n                    method: \"wallet_switchEthereumChain\",\n                    params: [\n                        {\n                            chainId: id\n                        }\n                    ]\n                }),\n                new Promise((res)=>this.on(\"change\", ({ chain })=>{\n                        if (chain?.id === chainId) res();\n                    }))\n            ]);\n            return this.chains.find((x)=>x.id === chainId) ?? {\n                id: chainId,\n                name: `Chain ${id}`,\n                network: `${id}`,\n                nativeCurrency: {\n                    name: \"Ether\",\n                    decimals: 18,\n                    symbol: \"ETH\"\n                },\n                rpcUrls: {\n                    default: {\n                        http: [\n                            \"\"\n                        ]\n                    },\n                    public: {\n                        http: [\n                            \"\"\n                        ]\n                    }\n                }\n            };\n        } catch (error) {\n            const chain = this.chains.find((x)=>x.id === chainId);\n            if (!chain) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ChainNotConfiguredForConnectorError({\n                chainId,\n                connectorId: this.id\n            });\n            if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n                try {\n                    await provider.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: id,\n                                chainName: chain.name,\n                                nativeCurrency: chain.nativeCurrency,\n                                rpcUrls: [\n                                    chain.rpcUrls.public?.http[0] ?? \"\"\n                                ],\n                                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n                            }\n                        ]\n                    });\n                    const currentChainId = await this.getChainId();\n                    if (currentChainId !== chainId) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n                    return chain;\n                } catch (error2) {\n                    throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error2);\n                }\n            }\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error);\n            throw new viem__WEBPACK_IMPORTED_MODULE_4__.SwitchChainError(error);\n        }\n    }\n    async watchAsset({ address, decimals = 18, image, symbol }) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address,\n                    decimals,\n                    image,\n                    symbol\n                }\n            }\n        });\n    }\n    isUserRejectedRequestError(error) {\n        return error.code === 4001;\n    }\n};\n_provider = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-P4NRLOY7.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainNotConfiguredForConnectorError: () => (/* binding */ ChainNotConfiguredForConnectorError),\n/* harmony export */   ConnectorNotFoundError: () => (/* binding */ ConnectorNotFoundError)\n/* harmony export */ });\n// src/errors.ts\nvar ChainNotConfiguredForConnectorError = class extends Error {\n    constructor({ chainId, connectorId }){\n        super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n        this.name = \"ChainNotConfiguredForConnectorError\";\n    }\n};\nvar ConnectorNotFoundError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorNotFoundError\";\n        this.message = \"Connector not found\";\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1VR0JHWVZCSC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdCQUFnQjtBQUNoQixJQUFJQSxzQ0FBc0MsY0FBY0M7SUFDdERDLFlBQVksRUFDVkMsT0FBTyxFQUNQQyxXQUFXLEVBQ1osQ0FBRTtRQUNELEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRUQsUUFBUSxnQ0FBZ0MsRUFBRUMsWUFBWSxFQUFFLENBQUM7UUFDekUsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBQ0EsSUFBSUMseUJBQXlCLGNBQWNMO0lBQ3pDQyxhQUFjO1FBQ1osS0FBSyxJQUFJSztRQUNULElBQUksQ0FBQ0YsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRyxPQUFPLEdBQUc7SUFDakI7QUFDRjtBQUtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1VR0JHWVZCSC5qcz8xYTY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lcnJvcnMudHNcbnZhciBDaGFpbk5vdENvbmZpZ3VyZWRGb3JDb25uZWN0b3JFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2hhaW5JZCxcbiAgICBjb25uZWN0b3JJZFxuICB9KSB7XG4gICAgc3VwZXIoYENoYWluIFwiJHtjaGFpbklkfVwiIG5vdCBjb25maWd1cmVkIGZvciBjb25uZWN0b3IgXCIke2Nvbm5lY3RvcklkfVwiLmApO1xuICAgIHRoaXMubmFtZSA9IFwiQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3JcIjtcbiAgfVxufTtcbnZhciBDb25uZWN0b3JOb3RGb3VuZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5uYW1lID0gXCJDb25uZWN0b3JOb3RGb3VuZEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gXCJDb25uZWN0b3Igbm90IGZvdW5kXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIENoYWluTm90Q29uZmlndXJlZEZvckNvbm5lY3RvckVycm9yLFxuICBDb25uZWN0b3JOb3RGb3VuZEVycm9yXG59O1xuIl0sIm5hbWVzIjpbIkNoYWluTm90Q29uZmlndXJlZEZvckNvbm5lY3RvckVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNoYWluSWQiLCJjb25uZWN0b3JJZCIsIm5hbWUiLCJDb25uZWN0b3JOb3RGb3VuZEVycm9yIiwiYXJndW1lbnRzIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Connector: () => (/* binding */ Connector),\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/goerli.js\");\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n// src/base.ts\n\n\nvar Connector = class extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__ {\n    constructor({ chains = [\n        viem_chains__WEBPACK_IMPORTED_MODULE_1__.mainnet,\n        viem_chains__WEBPACK_IMPORTED_MODULE_2__.goerli\n    ], options }){\n        super();\n        this.chains = chains;\n        this.options = options;\n    }\n    getBlockExplorerUrls(chain) {\n        const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n        if (blockExplorer) return [\n            blockExplorer.url,\n            ...Object.values(blockExplorers).map((x)=>x.url)\n        ];\n    }\n    isChainUnsupported(chainId) {\n        return !this.chains.some((x)=>x.id === chainId);\n    }\n    setStorage(storage) {\n        this.storage = storage;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1XNjVMQlBMVC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUlBLGdCQUFnQixDQUFDQyxLQUFLQyxRQUFRQztJQUNoQyxJQUFJLENBQUNELE9BQU9FLEdBQUcsQ0FBQ0gsTUFDZCxNQUFNSSxVQUFVLFlBQVlGO0FBQ2hDO0FBQ0EsSUFBSUcsZUFBZSxDQUFDTCxLQUFLQyxRQUFRSztJQUMvQlAsY0FBY0MsS0FBS0MsUUFBUTtJQUMzQixPQUFPSyxTQUFTQSxPQUFPQyxJQUFJLENBQUNQLE9BQU9DLE9BQU9PLEdBQUcsQ0FBQ1I7QUFDaEQ7QUFDQSxJQUFJUyxlQUFlLENBQUNULEtBQUtDLFFBQVFTO0lBQy9CLElBQUlULE9BQU9FLEdBQUcsQ0FBQ0gsTUFDYixNQUFNSSxVQUFVO0lBQ2xCSCxrQkFBa0JVLFVBQVVWLE9BQU9XLEdBQUcsQ0FBQ1osT0FBT0MsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtBQUNoRTtBQUNBLElBQUlJLGVBQWUsQ0FBQ2QsS0FBS0MsUUFBUVMsT0FBT0s7SUFDdENoQixjQUFjQyxLQUFLQyxRQUFRO0lBQzNCYyxTQUFTQSxPQUFPUixJQUFJLENBQUNQLEtBQUtVLFNBQVNULE9BQU9ZLEdBQUcsQ0FBQ2IsS0FBS1U7SUFDbkQsT0FBT0E7QUFDVDtBQUNBLElBQUlNLGtCQUFrQixDQUFDaEIsS0FBS0MsUUFBUWdCO0lBQ2xDbEIsY0FBY0MsS0FBS0MsUUFBUTtJQUMzQixPQUFPZ0I7QUFDVDtBQUVBLGNBQWM7QUFDMEM7QUFDVjtBQUM5QyxJQUFJSyxZQUFZLGNBQWNILDBDQUFZQTtJQUN4Q0ksWUFBWSxFQUNWQyxTQUFTO1FBQUNILGdEQUFPQTtRQUFFRCwrQ0FBTUE7S0FBQyxFQUMxQkssT0FBTyxFQUNSLENBQUU7UUFDRCxLQUFLO1FBQ0wsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ2pCO0lBQ0FDLHFCQUFxQkMsS0FBSyxFQUFFO1FBQzFCLE1BQU0sRUFBRVQsU0FBU1UsYUFBYSxFQUFFLEdBQUdDLGdCQUFnQixHQUFHRixNQUFNRSxjQUFjLElBQUksQ0FBQztRQUMvRSxJQUFJRCxlQUNGLE9BQU87WUFDTEEsY0FBY0UsR0FBRztlQUNkQyxPQUFPQyxNQUFNLENBQUNILGdCQUFnQkksR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVKLEdBQUc7U0FDbEQ7SUFDTDtJQUNBSyxtQkFBbUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDWixNQUFNLENBQUNhLElBQUksQ0FBQyxDQUFDSCxJQUFNQSxFQUFFSSxFQUFFLEtBQUtGO0lBQzNDO0lBQ0FHLFdBQVdDLE9BQU8sRUFBRTtRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDakI7QUFDRjtBQVFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnQvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1XNjVMQlBMVC5qcz9hYmNlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2FjY2Vzc0NoZWNrID0gKG9iaiwgbWVtYmVyLCBtc2cpID0+IHtcbiAgaWYgKCFtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbn07XG52YXIgX19wcml2YXRlR2V0ID0gKG9iaiwgbWVtYmVyLCBnZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgcmV0dXJuIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaik7XG59O1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IHtcbiAgaWYgKG1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICBtZW1iZXIgaW5zdGFuY2VvZiBXZWFrU2V0ID8gbWVtYmVyLmFkZChvYmopIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbn07XG52YXIgX19wcml2YXRlU2V0ID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIF9fcHJpdmF0ZU1ldGhvZCA9IChvYmosIG1lbWJlciwgbWV0aG9kKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwiYWNjZXNzIHByaXZhdGUgbWV0aG9kXCIpO1xuICByZXR1cm4gbWV0aG9kO1xufTtcblxuLy8gc3JjL2Jhc2UudHNcbmltcG9ydCB7IGRlZmF1bHQgYXMgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50ZW1pdHRlcjNcIjtcbmltcG9ydCB7IGdvZXJsaSwgbWFpbm5ldCB9IGZyb20gXCJ2aWVtL2NoYWluc1wiO1xudmFyIENvbm5lY3RvciA9IGNsYXNzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGNoYWlucyA9IFttYWlubmV0LCBnb2VybGldLFxuICAgIG9wdGlvbnNcbiAgfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jaGFpbnMgPSBjaGFpbnM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBnZXRCbG9ja0V4cGxvcmVyVXJscyhjaGFpbikge1xuICAgIGNvbnN0IHsgZGVmYXVsdDogYmxvY2tFeHBsb3JlciwgLi4uYmxvY2tFeHBsb3JlcnMgfSA9IGNoYWluLmJsb2NrRXhwbG9yZXJzID8/IHt9O1xuICAgIGlmIChibG9ja0V4cGxvcmVyKVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYmxvY2tFeHBsb3Jlci51cmwsXG4gICAgICAgIC4uLk9iamVjdC52YWx1ZXMoYmxvY2tFeHBsb3JlcnMpLm1hcCgoeCkgPT4geC51cmwpXG4gICAgICBdO1xuICB9XG4gIGlzQ2hhaW5VbnN1cHBvcnRlZChjaGFpbklkKSB7XG4gICAgcmV0dXJuICF0aGlzLmNoYWlucy5zb21lKCh4KSA9PiB4LmlkID09PSBjaGFpbklkKTtcbiAgfVxuICBzZXRTdG9yYWdlKHN0b3JhZ2UpIHtcbiAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBfX3ByaXZhdGVHZXQsXG4gIF9fcHJpdmF0ZUFkZCxcbiAgX19wcml2YXRlU2V0LFxuICBfX3ByaXZhdGVNZXRob2QsXG4gIENvbm5lY3RvclxufTtcbiJdLCJuYW1lcyI6WyJfX2FjY2Vzc0NoZWNrIiwib2JqIiwibWVtYmVyIiwibXNnIiwiaGFzIiwiVHlwZUVycm9yIiwiX19wcml2YXRlR2V0IiwiZ2V0dGVyIiwiY2FsbCIsImdldCIsIl9fcHJpdmF0ZUFkZCIsInZhbHVlIiwiV2Vha1NldCIsImFkZCIsInNldCIsIl9fcHJpdmF0ZVNldCIsInNldHRlciIsIl9fcHJpdmF0ZU1ldGhvZCIsIm1ldGhvZCIsImRlZmF1bHQiLCJFdmVudEVtaXR0ZXIiLCJnb2VybGkiLCJtYWlubmV0IiwiQ29ubmVjdG9yIiwiY29uc3RydWN0b3IiLCJjaGFpbnMiLCJvcHRpb25zIiwiZ2V0QmxvY2tFeHBsb3JlclVybHMiLCJjaGFpbiIsImJsb2NrRXhwbG9yZXIiLCJibG9ja0V4cGxvcmVycyIsInVybCIsIk9iamVjdCIsInZhbHVlcyIsIm1hcCIsIngiLCJpc0NoYWluVW5zdXBwb3J0ZWQiLCJjaGFpbklkIiwic29tZSIsImlkIiwic2V0U3RvcmFnZSIsInN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/coinbaseWallet.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/coinbaseWallet.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoinbaseWalletConnector: () => (/* binding */ CoinbaseWalletConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-OQILYQDO.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n// src/coinbaseWallet.ts\n\nvar _client, _provider;\nvar CoinbaseWalletConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor({ chains, options }){\n        super({\n            chains,\n            options: {\n                reloadOnDisconnect: false,\n                ...options\n            }\n        });\n        this.id = \"coinbaseWallet\";\n        this.name = \"Coinbase Wallet\";\n        this.ready = true;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _client, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = ()=>{\n            this.emit(\"disconnect\");\n        };\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            provider.on(\"accountsChanged\", this.onAccountsChanged);\n            provider.on(\"chainChanged\", this.onChainChanged);\n            provider.on(\"disconnect\", this.onDisconnect);\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            const accounts = await provider.enable();\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (/(user closed modal|accounts received is empty)/i.test(error.message)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n        const provider = await this.getProvider();\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        provider.disconnect();\n        provider.close();\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        const accounts = await provider.request({\n            method: \"eth_accounts\"\n        });\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        const chainId = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(provider.chainId);\n        return chainId;\n    }\n    async getProvider() {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) {\n            let CoinbaseWalletSDK = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/preact\"), __webpack_require__.e(\"vendor-chunks/rxjs\"), __webpack_require__.e(\"vendor-chunks/@coinbase\"), __webpack_require__.e(\"vendor-chunks/semver\"), __webpack_require__.e(\"vendor-chunks/@metamask\"), __webpack_require__.e(\"vendor-chunks/readable-stream\"), __webpack_require__.e(\"vendor-chunks/eth-json-rpc-filters\"), __webpack_require__.e(\"vendor-chunks/sha.js\"), __webpack_require__.e(\"vendor-chunks/json-rpc-engine\"), __webpack_require__.e(\"vendor-chunks/eth-block-tracker\"), __webpack_require__.e(\"vendor-chunks/keccak\"), __webpack_require__.e(\"vendor-chunks/qs\"), __webpack_require__.e(\"vendor-chunks/eth-rpc-errors\"), __webpack_require__.e(\"vendor-chunks/debug\"), __webpack_require__.e(\"vendor-chunks/async-mutex\"), __webpack_require__.e(\"vendor-chunks/yallist\"), __webpack_require__.e(\"vendor-chunks/object-inspect\"), __webpack_require__.e(\"vendor-chunks/has-symbols\"), __webpack_require__.e(\"vendor-chunks/function-bind\"), __webpack_require__.e(\"vendor-chunks/call-bind\"), __webpack_require__.e(\"vendor-chunks/xtend\"), __webpack_require__.e(\"vendor-chunks/util-deprecate\"), __webpack_require__.e(\"vendor-chunks/supports-color\"), __webpack_require__.e(\"vendor-chunks/string_decoder\"), __webpack_require__.e(\"vendor-chunks/side-channel\"), __webpack_require__.e(\"vendor-chunks/set-function-length\"), __webpack_require__.e(\"vendor-chunks/safe-buffer\"), __webpack_require__.e(\"vendor-chunks/ms\"), __webpack_require__.e(\"vendor-chunks/lru-cache\"), __webpack_require__.e(\"vendor-chunks/json-rpc-random-id\"), __webpack_require__.e(\"vendor-chunks/hasown\"), __webpack_require__.e(\"vendor-chunks/has-proto\"), __webpack_require__.e(\"vendor-chunks/has-property-descriptors\"), __webpack_require__.e(\"vendor-chunks/has-flag\"), __webpack_require__.e(\"vendor-chunks/gopd\"), __webpack_require__.e(\"vendor-chunks/get-intrinsic\"), __webpack_require__.e(\"vendor-chunks/fast-safe-stringify\"), __webpack_require__.e(\"vendor-chunks/eth-query\"), __webpack_require__.e(\"vendor-chunks/define-data-property\"), __webpack_require__.e(\"vendor-chunks/bind-decorator\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @coinbase/wallet-sdk */ \"(ssr)/./node_modules/@coinbase/wallet-sdk/dist/index.js\", 19))).default;\n            if (typeof CoinbaseWalletSDK !== \"function\" && typeof CoinbaseWalletSDK.default === \"function\") CoinbaseWalletSDK = CoinbaseWalletSDK.default;\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _client, new CoinbaseWalletSDK(this.options));\n            class WalletProvider {\n            }\n            class Client {\n            }\n            const walletExtensionChainId = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _client).walletExtension?.getChainId();\n            const chain = this.chains.find((chain2)=>this.options.chainId ? chain2.id === this.options.chainId : chain2.id === walletExtensionChainId) || this.chains[0];\n            const chainId = this.options.chainId || chain?.id;\n            const jsonRpcUrl = this.options.jsonRpcUrl || chain?.rpcUrls.default.http[0];\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _client).makeWeb3Provider(jsonRpcUrl, chainId));\n        }\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider(),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_4__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_5__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const provider = await this.getProvider();\n        const id = (0,viem__WEBPACK_IMPORTED_MODULE_6__.numberToHex)(chainId);\n        try {\n            await provider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: id\n                    }\n                ]\n            });\n            return this.chains.find((x)=>x.id === chainId) ?? {\n                id: chainId,\n                name: `Chain ${id}`,\n                network: `${id}`,\n                nativeCurrency: {\n                    name: \"Ether\",\n                    decimals: 18,\n                    symbol: \"ETH\"\n                },\n                rpcUrls: {\n                    default: {\n                        http: [\n                            \"\"\n                        ]\n                    },\n                    public: {\n                        http: [\n                            \"\"\n                        ]\n                    }\n                }\n            };\n        } catch (error) {\n            const chain = this.chains.find((x)=>x.id === chainId);\n            if (!chain) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_7__.ChainNotConfiguredForConnectorError({\n                chainId,\n                connectorId: this.id\n            });\n            if (error.code === 4902) {\n                try {\n                    await provider.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: id,\n                                chainName: chain.name,\n                                nativeCurrency: chain.nativeCurrency,\n                                rpcUrls: [\n                                    chain.rpcUrls.public?.http[0] ?? \"\"\n                                ],\n                                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n                            }\n                        ]\n                    });\n                    return chain;\n                } catch (error2) {\n                    throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error2);\n                }\n            }\n            throw new viem__WEBPACK_IMPORTED_MODULE_3__.SwitchChainError(error);\n        }\n    }\n    async watchAsset({ address, decimals = 18, image, symbol }) {\n        const provider = await this.getProvider();\n        return provider.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address,\n                    decimals,\n                    image,\n                    symbol\n                }\n            }\n        });\n    }\n};\n_client = new WeakMap();\n_provider = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jb2luYmFzZVdhbGxldC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFNkI7QUFHQTtBQU1BO0FBRTdCLHdCQUF3QjtBQVFWO0FBQ2QsSUFBSVksU0FBU0M7QUFDYixJQUFJQywwQkFBMEIsY0FBY1oseURBQVNBO0lBQ25EYSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFLENBQUU7UUFDL0IsS0FBSyxDQUFDO1lBQ0pEO1lBQ0FDLFNBQVM7Z0JBQ1BDLG9CQUFvQjtnQkFDcEIsR0FBR0QsT0FBTztZQUNaO1FBQ0Y7UUFDQSxJQUFJLENBQUNFLEVBQUUsR0FBRztRQUNWLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYmxCLGdFQUFZQSxDQUFDLElBQUksRUFBRVMsU0FBUyxLQUFLO1FBQ2pDVCxnRUFBWUEsQ0FBQyxJQUFJLEVBQUVVLFdBQVcsS0FBSztRQUNuQyxJQUFJLENBQUNTLGlCQUFpQixHQUFHLENBQUNDO1lBQ3hCLElBQUlBLFNBQVNDLE1BQU0sS0FBSyxHQUN0QixJQUFJLENBQUNDLElBQUksQ0FBQztpQkFFVixJQUFJLENBQUNBLElBQUksQ0FBQyxVQUFVO2dCQUFFQyxTQUFTaEIsZ0RBQVVBLENBQUNhLFFBQVEsQ0FBQyxFQUFFO1lBQUU7UUFDM0Q7UUFDQSxJQUFJLENBQUNJLGNBQWMsR0FBRyxDQUFDQztZQUNyQixNQUFNVCxLQUFLbEIsb0VBQWdCQSxDQUFDMkI7WUFDNUIsTUFBTUMsY0FBYyxJQUFJLENBQUNDLGtCQUFrQixDQUFDWDtZQUM1QyxJQUFJLENBQUNNLElBQUksQ0FBQyxVQUFVO2dCQUFFTSxPQUFPO29CQUFFWjtvQkFBSVU7Z0JBQVk7WUFBRTtRQUNuRDtRQUNBLElBQUksQ0FBQ0csWUFBWSxHQUFHO1lBQ2xCLElBQUksQ0FBQ1AsSUFBSSxDQUFDO1FBQ1o7SUFDRjtJQUNBLE1BQU1RLFFBQVEsRUFBRUwsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDOUIsSUFBSTtZQUNGLE1BQU1NLFdBQVcsTUFBTSxJQUFJLENBQUNDLFdBQVc7WUFDdkNELFNBQVNFLEVBQUUsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDZCxpQkFBaUI7WUFDckRZLFNBQVNFLEVBQUUsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDVCxjQUFjO1lBQy9DTyxTQUFTRSxFQUFFLENBQUMsY0FBYyxJQUFJLENBQUNKLFlBQVk7WUFDM0MsSUFBSSxDQUFDUCxJQUFJLENBQUMsV0FBVztnQkFBRVksTUFBTTtZQUFhO1lBQzFDLE1BQU1kLFdBQVcsTUFBTVcsU0FBU0ksTUFBTTtZQUN0QyxNQUFNWixVQUFVaEIsZ0RBQVVBLENBQUNhLFFBQVEsQ0FBQyxFQUFFO1lBQ3RDLElBQUlKLEtBQUssTUFBTSxJQUFJLENBQUNvQixVQUFVO1lBQzlCLElBQUlWLGNBQWMsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ1g7WUFDMUMsSUFBSVMsV0FBV1QsT0FBT1MsU0FBUztnQkFDN0IsTUFBTUcsUUFBUSxNQUFNLElBQUksQ0FBQ1MsV0FBVyxDQUFDWjtnQkFDckNULEtBQUtZLE1BQU1aLEVBQUU7Z0JBQ2JVLGNBQWMsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ1g7WUFDeEM7WUFDQSxPQUFPO2dCQUNMTztnQkFDQUssT0FBTztvQkFBRVo7b0JBQUlVO2dCQUFZO1lBQzNCO1FBQ0YsRUFBRSxPQUFPWSxPQUFPO1lBQ2QsSUFBSSxrREFBa0RDLElBQUksQ0FDeERELE1BQU1FLE9BQU8sR0FFYixNQUFNLElBQUlwQywwREFBd0JBLENBQUNrQztZQUNyQyxNQUFNQTtRQUNSO0lBQ0Y7SUFDQSxNQUFNRyxhQUFhO1FBQ2pCLElBQUksQ0FBQ3hDLGdFQUFZQSxDQUFDLElBQUksRUFBRVMsWUFDdEI7UUFDRixNQUFNcUIsV0FBVyxNQUFNLElBQUksQ0FBQ0MsV0FBVztRQUN2Q0QsU0FBU1csY0FBYyxDQUFDLG1CQUFtQixJQUFJLENBQUN2QixpQkFBaUI7UUFDakVZLFNBQVNXLGNBQWMsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDbEIsY0FBYztRQUMzRE8sU0FBU1csY0FBYyxDQUFDLGNBQWMsSUFBSSxDQUFDYixZQUFZO1FBQ3ZERSxTQUFTVSxVQUFVO1FBQ25CVixTQUFTWSxLQUFLO0lBQ2hCO0lBQ0EsTUFBTUMsYUFBYTtRQUNqQixNQUFNYixXQUFXLE1BQU0sSUFBSSxDQUFDQyxXQUFXO1FBQ3ZDLE1BQU1aLFdBQVcsTUFBTVcsU0FBU2MsT0FBTyxDQUFDO1lBQ3RDQyxRQUFRO1FBQ1Y7UUFDQSxPQUFPdkMsZ0RBQVVBLENBQUNhLFFBQVEsQ0FBQyxFQUFFO0lBQy9CO0lBQ0EsTUFBTWdCLGFBQWE7UUFDakIsTUFBTUwsV0FBVyxNQUFNLElBQUksQ0FBQ0MsV0FBVztRQUN2QyxNQUFNUCxVQUFVM0Isb0VBQWdCQSxDQUFDaUMsU0FBU04sT0FBTztRQUNqRCxPQUFPQTtJQUNUO0lBQ0EsTUFBTU8sY0FBYztRQUNsQixJQUFJLENBQUMvQixnRUFBWUEsQ0FBQyxJQUFJLEVBQUVTLFlBQVk7WUFDbEMsSUFBSXFDLG9CQUFvQixDQUFDLE1BQU0sZ3RFQUE2QixFQUFHQyxPQUFPO1lBQ3RFLElBQUksT0FBT0Qsc0JBQXNCLGNBQWMsT0FBT0Esa0JBQWtCQyxPQUFPLEtBQUssWUFDbEZELG9CQUFvQkEsa0JBQWtCQyxPQUFPO1lBQy9DOUMsZ0VBQVlBLENBQUMsSUFBSSxFQUFFTyxTQUFTLElBQUlzQyxrQkFBa0IsSUFBSSxDQUFDakMsT0FBTztZQUM5RCxNQUFNbUM7WUFDTjtZQUNBLE1BQU1DO1lBQ047WUFDQSxNQUFNQyx5QkFBeUJsRCxnRUFBWUEsQ0FBQyxJQUFJLEVBQUVRLFNBQVMyQyxlQUFlLEVBQUVoQjtZQUM1RSxNQUFNUixRQUFRLElBQUksQ0FBQ2YsTUFBTSxDQUFDd0MsSUFBSSxDQUM1QixDQUFDQyxTQUFXLElBQUksQ0FBQ3hDLE9BQU8sQ0FBQ1csT0FBTyxHQUFHNkIsT0FBT3RDLEVBQUUsS0FBSyxJQUFJLENBQUNGLE9BQU8sQ0FBQ1csT0FBTyxHQUFHNkIsT0FBT3RDLEVBQUUsS0FBS21DLDJCQUNuRixJQUFJLENBQUN0QyxNQUFNLENBQUMsRUFBRTtZQUNuQixNQUFNWSxVQUFVLElBQUksQ0FBQ1gsT0FBTyxDQUFDVyxPQUFPLElBQUlHLE9BQU9aO1lBQy9DLE1BQU11QyxhQUFhLElBQUksQ0FBQ3pDLE9BQU8sQ0FBQ3lDLFVBQVUsSUFBSTNCLE9BQU80QixRQUFRUixRQUFRUyxJQUFJLENBQUMsRUFBRTtZQUM1RXZELGdFQUFZQSxDQUFDLElBQUksRUFBRVEsV0FBV1QsZ0VBQVlBLENBQUMsSUFBSSxFQUFFUSxTQUFTaUQsZ0JBQWdCLENBQUNILFlBQVk5QjtRQUN6RjtRQUNBLE9BQU94QixnRUFBWUEsQ0FBQyxJQUFJLEVBQUVTO0lBQzVCO0lBQ0EsTUFBTWlELGdCQUFnQixFQUNwQmxDLE9BQU8sRUFDUixHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ04sTUFBTSxDQUFDTSxVQUFVUixRQUFRLEdBQUcsTUFBTXFDLFFBQVFDLEdBQUcsQ0FBQztZQUM1QyxJQUFJLENBQUM3QixXQUFXO1lBQ2hCLElBQUksQ0FBQ1ksVUFBVTtTQUNoQjtRQUNELE1BQU1oQixRQUFRLElBQUksQ0FBQ2YsTUFBTSxDQUFDd0MsSUFBSSxDQUFDLENBQUNTLElBQU1BLEVBQUU5QyxFQUFFLEtBQUtTO1FBQy9DLElBQUksQ0FBQ00sVUFDSCxNQUFNLElBQUlnQyxNQUFNO1FBQ2xCLE9BQU8xRCx3REFBa0JBLENBQUM7WUFDeEJrQjtZQUNBSztZQUNBb0MsV0FBVzFELDRDQUFNQSxDQUFDeUI7UUFDcEI7SUFDRjtJQUNBLE1BQU1rQyxlQUFlO1FBQ25CLElBQUk7WUFDRixNQUFNMUMsVUFBVSxNQUFNLElBQUksQ0FBQ3FCLFVBQVU7WUFDckMsT0FBTyxDQUFDLENBQUNyQjtRQUNYLEVBQUUsT0FBTTtZQUNOLE9BQU87UUFDVDtJQUNGO0lBQ0EsTUFBTWMsWUFBWVosT0FBTyxFQUFFO1FBQ3pCLE1BQU1NLFdBQVcsTUFBTSxJQUFJLENBQUNDLFdBQVc7UUFDdkMsTUFBTWhCLEtBQUtSLGlEQUFXQSxDQUFDaUI7UUFDdkIsSUFBSTtZQUNGLE1BQU1NLFNBQVNjLE9BQU8sQ0FBQztnQkFDckJDLFFBQVE7Z0JBQ1JvQixRQUFRO29CQUFDO3dCQUFFekMsU0FBU1Q7b0JBQUc7aUJBQUU7WUFDM0I7WUFDQSxPQUFPLElBQUksQ0FBQ0gsTUFBTSxDQUFDd0MsSUFBSSxDQUFDLENBQUNTLElBQU1BLEVBQUU5QyxFQUFFLEtBQUtTLFlBQVk7Z0JBQ2xEVCxJQUFJUztnQkFDSlIsTUFBTSxDQUFDLE1BQU0sRUFBRUQsR0FBRyxDQUFDO2dCQUNuQm1ELFNBQVMsQ0FBQyxFQUFFbkQsR0FBRyxDQUFDO2dCQUNoQm9ELGdCQUFnQjtvQkFBRW5ELE1BQU07b0JBQVNvRCxVQUFVO29CQUFJQyxRQUFRO2dCQUFNO2dCQUM3RGQsU0FBUztvQkFBRVIsU0FBUzt3QkFBRVMsTUFBTTs0QkFBQzt5QkFBRztvQkFBQztvQkFBR2MsUUFBUTt3QkFBRWQsTUFBTTs0QkFBQzt5QkFBRztvQkFBQztnQkFBRTtZQUM3RDtRQUNGLEVBQUUsT0FBT25CLE9BQU87WUFDZCxNQUFNVixRQUFRLElBQUksQ0FBQ2YsTUFBTSxDQUFDd0MsSUFBSSxDQUFDLENBQUNTLElBQU1BLEVBQUU5QyxFQUFFLEtBQUtTO1lBQy9DLElBQUksQ0FBQ0csT0FDSCxNQUFNLElBQUkvQixtRkFBbUNBLENBQUM7Z0JBQzVDNEI7Z0JBQ0ErQyxhQUFhLElBQUksQ0FBQ3hELEVBQUU7WUFDdEI7WUFDRixJQUFJc0IsTUFBTW1DLElBQUksS0FBSyxNQUFNO2dCQUN2QixJQUFJO29CQUNGLE1BQU0xQyxTQUFTYyxPQUFPLENBQUM7d0JBQ3JCQyxRQUFRO3dCQUNSb0IsUUFBUTs0QkFDTjtnQ0FDRXpDLFNBQVNUO2dDQUNUMEQsV0FBVzlDLE1BQU1YLElBQUk7Z0NBQ3JCbUQsZ0JBQWdCeEMsTUFBTXdDLGNBQWM7Z0NBQ3BDWixTQUFTO29DQUFDNUIsTUFBTTRCLE9BQU8sQ0FBQ2UsTUFBTSxFQUFFZCxJQUFJLENBQUMsRUFBRSxJQUFJO2lDQUFHO2dDQUM5Q2tCLG1CQUFtQixJQUFJLENBQUNDLG9CQUFvQixDQUFDaEQ7NEJBQy9DO3lCQUNEO29CQUNIO29CQUNBLE9BQU9BO2dCQUNULEVBQUUsT0FBT2lELFFBQVE7b0JBQ2YsTUFBTSxJQUFJekUsMERBQXdCQSxDQUFDeUU7Z0JBQ3JDO1lBQ0Y7WUFDQSxNQUFNLElBQUkxRSxrREFBZ0JBLENBQUNtQztRQUM3QjtJQUNGO0lBQ0EsTUFBTXdDLFdBQVcsRUFDZkMsT0FBTyxFQUNQVixXQUFXLEVBQUUsRUFDYlcsS0FBSyxFQUNMVixNQUFNLEVBQ1AsRUFBRTtRQUNELE1BQU12QyxXQUFXLE1BQU0sSUFBSSxDQUFDQyxXQUFXO1FBQ3ZDLE9BQU9ELFNBQVNjLE9BQU8sQ0FBQztZQUN0QkMsUUFBUTtZQUNSb0IsUUFBUTtnQkFDTmhDLE1BQU07Z0JBQ05wQixTQUFTO29CQUNQaUU7b0JBQ0FWO29CQUNBVztvQkFDQVY7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUNBN0QsVUFBVSxJQUFJd0U7QUFDZHZFLFlBQVksSUFBSXVFO0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2NvaW5iYXNlV2FsbGV0LmpzP2QwM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3Jcbn0gZnJvbSBcIi4vY2h1bmstVUdCR1lWQkguanNcIjtcbmltcG9ydCB7XG4gIG5vcm1hbGl6ZUNoYWluSWRcbn0gZnJvbSBcIi4vY2h1bmstT1FJTFlRRE8uanNcIjtcbmltcG9ydCB7XG4gIENvbm5lY3RvcixcbiAgX19wcml2YXRlQWRkLFxuICBfX3ByaXZhdGVHZXQsXG4gIF9fcHJpdmF0ZVNldFxufSBmcm9tIFwiLi9jaHVuay1XNjVMQlBMVC5qc1wiO1xuXG4vLyBzcmMvY29pbmJhc2VXYWxsZXQudHNcbmltcG9ydCB7XG4gIFN3aXRjaENoYWluRXJyb3IsXG4gIFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcixcbiAgY3JlYXRlV2FsbGV0Q2xpZW50LFxuICBjdXN0b20sXG4gIGdldEFkZHJlc3MsXG4gIG51bWJlclRvSGV4XG59IGZyb20gXCJ2aWVtXCI7XG52YXIgX2NsaWVudCwgX3Byb3ZpZGVyO1xudmFyIENvaW5iYXNlV2FsbGV0Q29ubmVjdG9yID0gY2xhc3MgZXh0ZW5kcyBDb25uZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcih7IGNoYWlucywgb3B0aW9ucyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY2hhaW5zLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICByZWxvYWRPbkRpc2Nvbm5lY3Q6IGZhbHNlLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pZCA9IFwiY29pbmJhc2VXYWxsZXRcIjtcbiAgICB0aGlzLm5hbWUgPSBcIkNvaW5iYXNlIFdhbGxldFwiO1xuICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfY2xpZW50LCB2b2lkIDApO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfcHJvdmlkZXIsIHZvaWQgMCk7XG4gICAgdGhpcy5vbkFjY291bnRzQ2hhbmdlZCA9IChhY2NvdW50cykgPT4ge1xuICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgdGhpcy5lbWl0KFwiZGlzY29ubmVjdFwiKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIsIHsgYWNjb3VudDogZ2V0QWRkcmVzcyhhY2NvdW50c1swXSkgfSk7XG4gICAgfTtcbiAgICB0aGlzLm9uQ2hhaW5DaGFuZ2VkID0gKGNoYWluSWQpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gbm9ybWFsaXplQ2hhaW5JZChjaGFpbklkKTtcbiAgICAgIGNvbnN0IHVuc3VwcG9ydGVkID0gdGhpcy5pc0NoYWluVW5zdXBwb3J0ZWQoaWQpO1xuICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIsIHsgY2hhaW46IHsgaWQsIHVuc3VwcG9ydGVkIH0gfSk7XG4gICAgfTtcbiAgICB0aGlzLm9uRGlzY29ubmVjdCA9ICgpID0+IHtcbiAgICAgIHRoaXMuZW1pdChcImRpc2Nvbm5lY3RcIik7XG4gICAgfTtcbiAgfVxuICBhc3luYyBjb25uZWN0KHsgY2hhaW5JZCB9ID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgICBwcm92aWRlci5vbihcImFjY291bnRzQ2hhbmdlZFwiLCB0aGlzLm9uQWNjb3VudHNDaGFuZ2VkKTtcbiAgICAgIHByb3ZpZGVyLm9uKFwiY2hhaW5DaGFuZ2VkXCIsIHRoaXMub25DaGFpbkNoYW5nZWQpO1xuICAgICAgcHJvdmlkZXIub24oXCJkaXNjb25uZWN0XCIsIHRoaXMub25EaXNjb25uZWN0KTtcbiAgICAgIHRoaXMuZW1pdChcIm1lc3NhZ2VcIiwgeyB0eXBlOiBcImNvbm5lY3RpbmdcIiB9KTtcbiAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIuZW5hYmxlKCk7XG4gICAgICBjb25zdCBhY2NvdW50ID0gZ2V0QWRkcmVzcyhhY2NvdW50c1swXSk7XG4gICAgICBsZXQgaWQgPSBhd2FpdCB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgIGxldCB1bnN1cHBvcnRlZCA9IHRoaXMuaXNDaGFpblVuc3VwcG9ydGVkKGlkKTtcbiAgICAgIGlmIChjaGFpbklkICYmIGlkICE9PSBjaGFpbklkKSB7XG4gICAgICAgIGNvbnN0IGNoYWluID0gYXdhaXQgdGhpcy5zd2l0Y2hDaGFpbihjaGFpbklkKTtcbiAgICAgICAgaWQgPSBjaGFpbi5pZDtcbiAgICAgICAgdW5zdXBwb3J0ZWQgPSB0aGlzLmlzQ2hhaW5VbnN1cHBvcnRlZChpZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY2NvdW50LFxuICAgICAgICBjaGFpbjogeyBpZCwgdW5zdXBwb3J0ZWQgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKC8odXNlciBjbG9zZWQgbW9kYWx8YWNjb3VudHMgcmVjZWl2ZWQgaXMgZW1wdHkpL2kudGVzdChcbiAgICAgICAgZXJyb3IubWVzc2FnZVxuICAgICAgKSlcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcihlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICBpZiAoIV9fcHJpdmF0ZUdldCh0aGlzLCBfcHJvdmlkZXIpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgIHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKFwiYWNjb3VudHNDaGFuZ2VkXCIsIHRoaXMub25BY2NvdW50c0NoYW5nZWQpO1xuICAgIHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKFwiY2hhaW5DaGFuZ2VkXCIsIHRoaXMub25DaGFpbkNoYW5nZWQpO1xuICAgIHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKFwiZGlzY29ubmVjdFwiLCB0aGlzLm9uRGlzY29ubmVjdCk7XG4gICAgcHJvdmlkZXIuZGlzY29ubmVjdCgpO1xuICAgIHByb3ZpZGVyLmNsb3NlKCk7XG4gIH1cbiAgYXN5bmMgZ2V0QWNjb3VudCgpIHtcbiAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImV0aF9hY2NvdW50c1wiXG4gICAgfSk7XG4gICAgcmV0dXJuIGdldEFkZHJlc3MoYWNjb3VudHNbMF0pO1xuICB9XG4gIGFzeW5jIGdldENoYWluSWQoKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgY29uc3QgY2hhaW5JZCA9IG5vcm1hbGl6ZUNoYWluSWQocHJvdmlkZXIuY2hhaW5JZCk7XG4gICAgcmV0dXJuIGNoYWluSWQ7XG4gIH1cbiAgYXN5bmMgZ2V0UHJvdmlkZXIoKSB7XG4gICAgaWYgKCFfX3ByaXZhdGVHZXQodGhpcywgX3Byb3ZpZGVyKSkge1xuICAgICAgbGV0IENvaW5iYXNlV2FsbGV0U0RLID0gKGF3YWl0IGltcG9ydChcIkBjb2luYmFzZS93YWxsZXQtc2RrXCIpKS5kZWZhdWx0O1xuICAgICAgaWYgKHR5cGVvZiBDb2luYmFzZVdhbGxldFNESyAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBDb2luYmFzZVdhbGxldFNESy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIENvaW5iYXNlV2FsbGV0U0RLID0gQ29pbmJhc2VXYWxsZXRTREsuZGVmYXVsdDtcbiAgICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfY2xpZW50LCBuZXcgQ29pbmJhc2VXYWxsZXRTREsodGhpcy5vcHRpb25zKSk7XG4gICAgICBjbGFzcyBXYWxsZXRQcm92aWRlciB7XG4gICAgICB9XG4gICAgICBjbGFzcyBDbGllbnQge1xuICAgICAgfVxuICAgICAgY29uc3Qgd2FsbGV0RXh0ZW5zaW9uQ2hhaW5JZCA9IF9fcHJpdmF0ZUdldCh0aGlzLCBfY2xpZW50KS53YWxsZXRFeHRlbnNpb24/LmdldENoYWluSWQoKTtcbiAgICAgIGNvbnN0IGNoYWluID0gdGhpcy5jaGFpbnMuZmluZChcbiAgICAgICAgKGNoYWluMikgPT4gdGhpcy5vcHRpb25zLmNoYWluSWQgPyBjaGFpbjIuaWQgPT09IHRoaXMub3B0aW9ucy5jaGFpbklkIDogY2hhaW4yLmlkID09PSB3YWxsZXRFeHRlbnNpb25DaGFpbklkXG4gICAgICApIHx8IHRoaXMuY2hhaW5zWzBdO1xuICAgICAgY29uc3QgY2hhaW5JZCA9IHRoaXMub3B0aW9ucy5jaGFpbklkIHx8IGNoYWluPy5pZDtcbiAgICAgIGNvbnN0IGpzb25ScGNVcmwgPSB0aGlzLm9wdGlvbnMuanNvblJwY1VybCB8fCBjaGFpbj8ucnBjVXJscy5kZWZhdWx0Lmh0dHBbMF07XG4gICAgICBfX3ByaXZhdGVTZXQodGhpcywgX3Byb3ZpZGVyLCBfX3ByaXZhdGVHZXQodGhpcywgX2NsaWVudCkubWFrZVdlYjNQcm92aWRlcihqc29uUnBjVXJsLCBjaGFpbklkKSk7XG4gICAgfVxuICAgIHJldHVybiBfX3ByaXZhdGVHZXQodGhpcywgX3Byb3ZpZGVyKTtcbiAgfVxuICBhc3luYyBnZXRXYWxsZXRDbGllbnQoe1xuICAgIGNoYWluSWRcbiAgfSA9IHt9KSB7XG4gICAgY29uc3QgW3Byb3ZpZGVyLCBhY2NvdW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIHRoaXMuZ2V0UHJvdmlkZXIoKSxcbiAgICAgIHRoaXMuZ2V0QWNjb3VudCgpXG4gICAgXSk7XG4gICAgY29uc3QgY2hhaW4gPSB0aGlzLmNoYWlucy5maW5kKCh4KSA9PiB4LmlkID09PSBjaGFpbklkKTtcbiAgICBpZiAoIXByb3ZpZGVyKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJvdmlkZXIgaXMgcmVxdWlyZWQuXCIpO1xuICAgIHJldHVybiBjcmVhdGVXYWxsZXRDbGllbnQoe1xuICAgICAgYWNjb3VudCxcbiAgICAgIGNoYWluLFxuICAgICAgdHJhbnNwb3J0OiBjdXN0b20ocHJvdmlkZXIpXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgaXNBdXRob3JpemVkKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50KCk7XG4gICAgICByZXR1cm4gISFhY2NvdW50O1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBhc3luYyBzd2l0Y2hDaGFpbihjaGFpbklkKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgY29uc3QgaWQgPSBudW1iZXJUb0hleChjaGFpbklkKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZDogXCJ3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpblwiLFxuICAgICAgICBwYXJhbXM6IFt7IGNoYWluSWQ6IGlkIH1dXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLmNoYWlucy5maW5kKCh4KSA9PiB4LmlkID09PSBjaGFpbklkKSA/PyB7XG4gICAgICAgIGlkOiBjaGFpbklkLFxuICAgICAgICBuYW1lOiBgQ2hhaW4gJHtpZH1gLFxuICAgICAgICBuZXR3b3JrOiBgJHtpZH1gLFxuICAgICAgICBuYXRpdmVDdXJyZW5jeTogeyBuYW1lOiBcIkV0aGVyXCIsIGRlY2ltYWxzOiAxOCwgc3ltYm9sOiBcIkVUSFwiIH0sXG4gICAgICAgIHJwY1VybHM6IHsgZGVmYXVsdDogeyBodHRwOiBbXCJcIl0gfSwgcHVibGljOiB7IGh0dHA6IFtcIlwiXSB9IH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gdGhpcy5jaGFpbnMuZmluZCgoeCkgPT4geC5pZCA9PT0gY2hhaW5JZCk7XG4gICAgICBpZiAoIWNoYWluKVxuICAgICAgICB0aHJvdyBuZXcgQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3Ioe1xuICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgY29ubmVjdG9ySWQ6IHRoaXMuaWRcbiAgICAgICAgfSk7XG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gNDkwMikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIndhbGxldF9hZGRFdGhlcmV1bUNoYWluXCIsXG4gICAgICAgICAgICBwYXJhbXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6IGlkLFxuICAgICAgICAgICAgICAgIGNoYWluTmFtZTogY2hhaW4ubmFtZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVDdXJyZW5jeTogY2hhaW4ubmF0aXZlQ3VycmVuY3ksXG4gICAgICAgICAgICAgICAgcnBjVXJsczogW2NoYWluLnJwY1VybHMucHVibGljPy5odHRwWzBdID8/IFwiXCJdLFxuICAgICAgICAgICAgICAgIGJsb2NrRXhwbG9yZXJVcmxzOiB0aGlzLmdldEJsb2NrRXhwbG9yZXJVcmxzKGNoYWluKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlclJlamVjdGVkUmVxdWVzdEVycm9yKGVycm9yMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBTd2l0Y2hDaGFpbkVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgd2F0Y2hBc3NldCh7XG4gICAgYWRkcmVzcyxcbiAgICBkZWNpbWFscyA9IDE4LFxuICAgIGltYWdlLFxuICAgIHN5bWJvbFxuICB9KSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgcmV0dXJuIHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcIndhbGxldF93YXRjaEFzc2V0XCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgdHlwZTogXCJFUkMyMFwiLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICBkZWNpbWFscyxcbiAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICBzeW1ib2xcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuX2NsaWVudCA9IG5ldyBXZWFrTWFwKCk7XG5fcHJvdmlkZXIgPSBuZXcgV2Vha01hcCgpO1xuZXhwb3J0IHtcbiAgQ29pbmJhc2VXYWxsZXRDb25uZWN0b3Jcbn07XG4iXSwibmFtZXMiOlsiQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3IiLCJub3JtYWxpemVDaGFpbklkIiwiQ29ubmVjdG9yIiwiX19wcml2YXRlQWRkIiwiX19wcml2YXRlR2V0IiwiX19wcml2YXRlU2V0IiwiU3dpdGNoQ2hhaW5FcnJvciIsIlVzZXJSZWplY3RlZFJlcXVlc3RFcnJvciIsImNyZWF0ZVdhbGxldENsaWVudCIsImN1c3RvbSIsImdldEFkZHJlc3MiLCJudW1iZXJUb0hleCIsIl9jbGllbnQiLCJfcHJvdmlkZXIiLCJDb2luYmFzZVdhbGxldENvbm5lY3RvciIsImNvbnN0cnVjdG9yIiwiY2hhaW5zIiwib3B0aW9ucyIsInJlbG9hZE9uRGlzY29ubmVjdCIsImlkIiwibmFtZSIsInJlYWR5Iiwib25BY2NvdW50c0NoYW5nZWQiLCJhY2NvdW50cyIsImxlbmd0aCIsImVtaXQiLCJhY2NvdW50Iiwib25DaGFpbkNoYW5nZWQiLCJjaGFpbklkIiwidW5zdXBwb3J0ZWQiLCJpc0NoYWluVW5zdXBwb3J0ZWQiLCJjaGFpbiIsIm9uRGlzY29ubmVjdCIsImNvbm5lY3QiLCJwcm92aWRlciIsImdldFByb3ZpZGVyIiwib24iLCJ0eXBlIiwiZW5hYmxlIiwiZ2V0Q2hhaW5JZCIsInN3aXRjaENoYWluIiwiZXJyb3IiLCJ0ZXN0IiwibWVzc2FnZSIsImRpc2Nvbm5lY3QiLCJyZW1vdmVMaXN0ZW5lciIsImNsb3NlIiwiZ2V0QWNjb3VudCIsInJlcXVlc3QiLCJtZXRob2QiLCJDb2luYmFzZVdhbGxldFNESyIsImRlZmF1bHQiLCJXYWxsZXRQcm92aWRlciIsIkNsaWVudCIsIndhbGxldEV4dGVuc2lvbkNoYWluSWQiLCJ3YWxsZXRFeHRlbnNpb24iLCJmaW5kIiwiY2hhaW4yIiwianNvblJwY1VybCIsInJwY1VybHMiLCJodHRwIiwibWFrZVdlYjNQcm92aWRlciIsImdldFdhbGxldENsaWVudCIsIlByb21pc2UiLCJhbGwiLCJ4IiwiRXJyb3IiLCJ0cmFuc3BvcnQiLCJpc0F1dGhvcml6ZWQiLCJwYXJhbXMiLCJuZXR3b3JrIiwibmF0aXZlQ3VycmVuY3kiLCJkZWNpbWFscyIsInN5bWJvbCIsInB1YmxpYyIsImNvbm5lY3RvcklkIiwiY29kZSIsImNoYWluTmFtZSIsImJsb2NrRXhwbG9yZXJVcmxzIiwiZ2V0QmxvY2tFeHBsb3JlclVybHMiLCJlcnJvcjIiLCJ3YXRjaEFzc2V0IiwiYWRkcmVzcyIsImltYWdlIiwiV2Vha01hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/coinbaseWallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/metaMask.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/metaMask.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetaMaskConnector: () => (/* binding */ MetaMaskConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_P4NRLOY7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-P4NRLOY7.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-P4NRLOY7.js\");\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\n\n\n// src/metaMask.ts\n\nvar _UNSTABLE_shimOnConnectSelectAccount;\nvar MetaMaskConnector = class extends _chunk_P4NRLOY7_js__WEBPACK_IMPORTED_MODULE_0__.InjectedConnector {\n    constructor({ chains, options: options_ } = {}){\n        const options = {\n            name: \"MetaMask\",\n            shimDisconnect: true,\n            getProvider () {\n                function getReady(ethereum2) {\n                    const isMetaMask = !!ethereum2?.isMetaMask;\n                    if (!isMetaMask) return;\n                    if (ethereum2.isBraveWallet && !ethereum2._events && !ethereum2._state) return;\n                    if (ethereum2.isApexWallet) return;\n                    if (ethereum2.isAvalanche) return;\n                    if (ethereum2.isBitKeep) return;\n                    if (ethereum2.isBlockWallet) return;\n                    if (ethereum2.isCoin98) return;\n                    if (ethereum2.isFordefi) return;\n                    if (ethereum2.isMathWallet) return;\n                    if (ethereum2.isOkxWallet || ethereum2.isOKExWallet) return;\n                    if (ethereum2.isOneInchIOSWallet || ethereum2.isOneInchAndroidWallet) return;\n                    if (ethereum2.isOpera) return;\n                    if (ethereum2.isPortal) return;\n                    if (ethereum2.isRabby) return;\n                    if (ethereum2.isDefiant) return;\n                    if (ethereum2.isTokenPocket) return;\n                    if (ethereum2.isTokenary) return;\n                    if (ethereum2.isZeal) return;\n                    if (ethereum2.isZerion) return;\n                    return ethereum2;\n                }\n                if (true) return;\n                const ethereum = window.ethereum;\n                if (ethereum?.providers) return ethereum.providers.find(getReady);\n                return getReady(ethereum);\n            },\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        this.id = \"metaMask\";\n        this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateSet)(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n            if (provider.on) {\n                provider.on(\"accountsChanged\", this.onAccountsChanged);\n                provider.on(\"chainChanged\", this.onChainChanged);\n                provider.on(\"disconnect\", this.onDisconnect);\n            }\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            let account = null;\n            if ((0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) {\n                account = await this.getAccount().catch(()=>null);\n                const isConnected = !!account;\n                if (isConnected) try {\n                    await provider.request({\n                        method: \"wallet_requestPermissions\",\n                        params: [\n                            {\n                                eth_accounts: {}\n                            }\n                        ]\n                    });\n                    account = await this.getAccount();\n                } catch (error) {\n                    if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                    if (error.code === new viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError(error).code) throw error;\n                }\n            }\n            if (!account) {\n                const accounts = await provider.request({\n                    method: \"eth_requestAccounts\"\n                });\n                account = (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(accounts[0]);\n            }\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            if (this.options?.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                },\n                provider\n            };\n        } catch (error) {\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n            if (error.code === -32002) throw new viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError(error);\n            throw error;\n        }\n    }\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/metaMask.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/safe.js":
/*!*****************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/safe.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SafeConnector: () => (/* binding */ SafeConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-OQILYQDO.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var _safe_global_safe_apps_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @safe-global/safe-apps-provider */ \"(ssr)/./node_modules/@safe-global/safe-apps-provider/dist/index.js\");\n/* harmony import */ var _safe_global_safe_apps_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @safe-global/safe-apps-sdk */ \"(ssr)/./node_modules/@safe-global/safe-apps-sdk/dist/src/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n\n\n\n// src/safe.ts\n\n\n\nvar _provider, _sdk;\nvar SafeConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor({ chains, options: options_ }){\n        const options = {\n            shimDisconnect: false,\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        this.id = \"safe\";\n        this.name = \"Safe\";\n        this.ready =  false && 0;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _sdk, void 0);\n        this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n        let SDK = _safe_global_safe_apps_sdk__WEBPACK_IMPORTED_MODULE_1__;\n        if (typeof _safe_global_safe_apps_sdk__WEBPACK_IMPORTED_MODULE_1__ !== \"function\" && typeof _safe_global_safe_apps_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"] === \"function\") SDK = _safe_global_safe_apps_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _sdk, new SDK(options));\n    }\n    async connect() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        if (provider.on) {\n            provider.on(\"accountsChanged\", this.onAccountsChanged);\n            provider.on(\"chainChanged\", this.onChainChanged);\n            provider.on(\"disconnect\", this.onDisconnect);\n        }\n        this.emit(\"message\", {\n            type: \"connecting\"\n        });\n        const account = await this.getAccount();\n        const id = await this.getChainId();\n        if (this.options.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n        return {\n            account,\n            chain: {\n                id,\n                unsupported: this.isChainUnsupported(id)\n            }\n        };\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        if (!provider?.removeListener) return;\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        const accounts = await provider.request({\n            method: \"eth_accounts\"\n        });\n        return (0,viem__WEBPACK_IMPORTED_MODULE_3__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        return (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_4__.normalizeChainId)(provider.chainId);\n    }\n    async getProvider() {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) {\n            const safe = await (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _sdk).safe.getInfo();\n            if (!safe) throw new Error(\"Could not load Safe information\");\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, new _safe_global_safe_apps_provider__WEBPACK_IMPORTED_MODULE_5__.SafeAppProvider(safe, (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _sdk)));\n        }\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const provider = await this.getProvider();\n        const account = await this.getAccount();\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_6__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_7__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) return false;\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n    onAccountsChanged(_accounts) {}\n    onChainChanged(_chainId) {}\n    onDisconnect() {\n        this.emit(\"disconnect\");\n    }\n};\n_provider = new WeakMap();\n_sdk = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/safe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js":
/*!**************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/walletConnect.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectConnector: () => (/* binding */ WalletConnectConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n// src/walletConnect.ts\n\n\nvar NAMESPACE = \"eip155\";\nvar STORE_KEY = \"store\";\nvar REQUESTED_CHAINS_KEY = \"requestedChains\";\nvar ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nvar _provider, _initProviderPromise, _createProvider, createProvider_fn, _initProvider, initProvider_fn, _isChainsStale, isChainsStale_fn, _setupListeners, setupListeners_fn, _removeListeners, removeListeners_fn, _setRequestedChainsIds, setRequestedChainsIds_fn, _getRequestedChainsIds, getRequestedChainsIds_fn, _getNamespaceChainsIds, getNamespaceChainsIds_fn, _getNamespaceMethods, getNamespaceMethods_fn;\nvar WalletConnectConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor(config){\n        super({\n            ...config,\n            options: {\n                isNewChainsStale: true,\n                ...config.options\n            }\n        });\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _createProvider);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProvider);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _isChainsStale);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setupListeners);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _removeListeners);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setRequestedChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getRequestedChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceMethods);\n        this.id = \"walletConnect\";\n        this.name = \"WalletConnect\";\n        this.ready = true;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProviderPromise, void 0);\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = Number(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = ()=>{\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n            this.emit(\"disconnect\");\n        };\n        this.onDisplayUri = (uri)=>{\n            this.emit(\"message\", {\n                type: \"display_uri\",\n                data: uri\n            });\n        };\n        this.onConnect = ()=>{\n            this.emit(\"connect\", {});\n        };\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n    }\n    async connect({ chainId, pairingTopic } = {}) {\n        try {\n            let targetChainId = chainId;\n            if (!targetChainId) {\n                const store = this.storage?.getItem(STORE_KEY);\n                const lastUsedChainId = store?.state?.data?.chain?.id;\n                if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) targetChainId = lastUsedChainId;\n                else targetChainId = this.chains[0]?.id;\n            }\n            if (!targetChainId) throw new Error(\"No chains found on connector.\");\n            const provider = await this.getProvider();\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setupListeners, setupListeners_fn).call(this);\n            const isChainsStale = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (provider.session && isChainsStale) await provider.disconnect();\n            if (!provider.session || isChainsStale) {\n                const optionalChains = this.chains.filter((chain)=>chain.id !== targetChainId).map((optionalChain)=>optionalChain.id);\n                this.emit(\"message\", {\n                    type: \"connecting\"\n                });\n                await provider.connect({\n                    pairingTopic,\n                    optionalChains: [\n                        targetChainId,\n                        ...optionalChains\n                    ]\n                });\n                (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, this.chains.map(({ id: id2 })=>id2));\n            }\n            const accounts = await provider.enable();\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            const id = await this.getChainId();\n            const unsupported = this.isChainUnsupported(id);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (/user rejected/i.test(error?.message)) {\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        try {\n            await provider.disconnect();\n        } catch (error) {\n            if (!/No matching key/i.test(error.message)) throw error;\n        } finally{\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n        }\n    }\n    async getAccount() {\n        const { accounts } = await this.getProvider();\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const { chainId } = await this.getProvider();\n        return chainId;\n    }\n    async getProvider({ chainId } = {}) {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) await (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n        if (chainId) await this.switchChain(chainId);\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider({\n                chainId\n            }),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_3__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            const [account, provider] = await Promise.all([\n                this.getAccount(),\n                this.getProvider()\n            ]);\n            const isChainsStale = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (!account) return false;\n            if (isChainsStale && provider.session) {\n                try {\n                    await provider.disconnect();\n                } catch  {}\n                return false;\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const chain = this.chains.find((chain2)=>chain2.id === chainId);\n        if (!chain) throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new Error(\"chain not found on connector.\"));\n        try {\n            const provider = await this.getProvider();\n            const namespaceChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n            const namespaceMethods = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n            const isChainApproved = namespaceChains.includes(chainId);\n            if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n                await provider.request({\n                    method: ADD_ETH_CHAIN_METHOD,\n                    params: [\n                        {\n                            chainId: (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(chain.id),\n                            blockExplorerUrls: [\n                                chain.blockExplorers?.default?.url\n                            ],\n                            chainName: chain.name,\n                            nativeCurrency: chain.nativeCurrency,\n                            rpcUrls: [\n                                ...chain.rpcUrls.default.http\n                            ]\n                        }\n                    ]\n                });\n                const requestedChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n                requestedChains.push(chainId);\n                (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, requestedChains);\n            }\n            await provider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(chainId)\n                    }\n                ]\n            });\n            return chain;\n        } catch (error) {\n            const message = typeof error === \"string\" ? error : error?.message;\n            if (/user rejected request/i.test(message)) {\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n        }\n    }\n};\n_provider = new WeakMap();\n_initProviderPromise = new WeakMap();\n_createProvider = new WeakSet();\ncreateProvider_fn = async function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise) && \"undefined\" !== \"undefined\") {}\n    return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise);\n};\n_initProvider = new WeakSet();\ninitProvider_fn = async function() {\n    const { EthereumProvider } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/@stablelib\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/cross-fetch\"), __webpack_require__.e(\"vendor-chunks/pino\"), __webpack_require__.e(\"vendor-chunks/fast-redact\"), __webpack_require__.e(\"vendor-chunks/pino-std-serializers\"), __webpack_require__.e(\"vendor-chunks/thread-stream\"), __webpack_require__.e(\"vendor-chunks/unstorage\"), __webpack_require__.e(\"vendor-chunks/idb-keyval\"), __webpack_require__.e(\"vendor-chunks/destr\"), __webpack_require__.e(\"vendor-chunks/sonic-boom\"), __webpack_require__.e(\"vendor-chunks/unfetch\"), __webpack_require__.e(\"vendor-chunks/safe-stable-stringify\"), __webpack_require__.e(\"vendor-chunks/quick-format-unescaped\"), __webpack_require__.e(\"vendor-chunks/process-warning\"), __webpack_require__.e(\"vendor-chunks/on-exit-leak-free\"), __webpack_require__.e(\"vendor-chunks/lodash.isequal\"), __webpack_require__.e(\"vendor-chunks/isomorphic-unfetch\"), __webpack_require__.e(\"vendor-chunks/atomic-sleep\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/ethereum-provider */ \"(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\"));\n    const optionalChains = this.chains.map(({ id })=>id);\n    if (optionalChains.length) {\n        const { projectId, showQrModal = true, qrModalOptions, metadata, relayUrl } = this.options;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, await EthereumProvider.init({\n            showQrModal,\n            qrModalOptions,\n            projectId,\n            optionalChains,\n            rpcMap: Object.fromEntries(this.chains.map((chain)=>[\n                    chain.id,\n                    chain.rpcUrls.default.http[0]\n                ])),\n            metadata,\n            relayUrl\n        }));\n    }\n};\n_isChainsStale = new WeakSet();\nisChainsStale_fn = function() {\n    const namespaceMethods = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) return false;\n    if (!this.options.isNewChainsStale) return false;\n    const requestedChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n    const connectorChains = this.chains.map(({ id })=>id);\n    const namespaceChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n    if (namespaceChains.length && !namespaceChains.some((id)=>connectorChains.includes(id))) return false;\n    return !connectorChains.every((id)=>requestedChains.includes(id));\n};\n_setupListeners = new WeakSet();\nsetupListeners_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"disconnect\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"session_delete\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"connect\", this.onConnect);\n};\n_removeListeners = new WeakSet();\nremoveListeners_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"connect\", this.onConnect);\n};\n_setRequestedChainsIds = new WeakSet();\nsetRequestedChainsIds_fn = function(chains) {\n    this.storage?.setItem(REQUESTED_CHAINS_KEY, chains);\n};\n_getRequestedChainsIds = new WeakSet();\ngetRequestedChainsIds_fn = function() {\n    return this.storage?.getItem(REQUESTED_CHAINS_KEY) ?? [];\n};\n_getNamespaceChainsIds = new WeakSet();\ngetNamespaceChainsIds_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const namespaces = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces;\n    if (!namespaces) return [];\n    const normalizedNamespaces = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeNamespaces)(namespaces);\n    const chainIds = normalizedNamespaces[NAMESPACE]?.chains?.map((chain)=>parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n};\n_getNamespaceMethods = new WeakSet();\ngetNamespaceMethods_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const namespaces = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces;\n    if (!namespaces) return [];\n    const normalizedNamespaces = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeNamespaces)(namespaces);\n    const methods = normalizedNamespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/walletConnectLegacy.js":
/*!********************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/walletConnectLegacy.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectLegacyConnector: () => (/* binding */ WalletConnectLegacyConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-OQILYQDO.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n// src/walletConnectLegacy.ts\n\nvar switchChainAllowedRegex = /(imtoken|metamask|rainbow|trust wallet|uniswap wallet|ledger)/i;\nvar _provider, _switchChain, switchChain_fn;\nvar WalletConnectLegacyConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor(){\n        super(...arguments);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _switchChain);\n        this.id = \"walletConnectLegacy\";\n        this.name = \"WalletConnectLegacy\";\n        this.ready = true;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = ()=>{\n            this.emit(\"disconnect\");\n        };\n    }\n    async connect({ chainId } = {}) {\n        try {\n            let targetChainId = chainId;\n            if (!targetChainId) {\n                const store = this.storage?.getItem(\"store\");\n                const lastUsedChainId = store?.state?.data?.chain?.id;\n                if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) targetChainId = lastUsedChainId;\n            }\n            const provider = await this.getProvider({\n                chainId: targetChainId,\n                create: true\n            });\n            provider.on(\"accountsChanged\", this.onAccountsChanged);\n            provider.on(\"chainChanged\", this.onChainChanged);\n            provider.on(\"disconnect\", this.onDisconnect);\n            setTimeout(()=>this.emit(\"message\", {\n                    type: \"connecting\"\n                }), 0);\n            const accounts = await provider.enable();\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            const id = await this.getChainId();\n            const unsupported = this.isChainUnsupported(id);\n            const walletName = provider.connector?.peerMeta?.name ?? \"\";\n            if (switchChainAllowedRegex.test(walletName)) this.switchChain = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _switchChain, switchChain_fn);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (/user closed modal/i.test(error.message)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        await provider.disconnect();\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        typeof localStorage !== \"undefined\" && localStorage.removeItem(\"walletconnect\");\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        const accounts = provider.accounts;\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        const chainId = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(provider.chainId);\n        return chainId;\n    }\n    async getProvider({ chainId, create } = {}) {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider) || chainId || create) {\n            const rpc = !this.options?.infuraId ? this.chains.reduce((rpc2, chain)=>({\n                    ...rpc2,\n                    [chain.id]: chain.rpcUrls.default.http[0]\n                }), {}) : {};\n            const WalletConnectProvider = (await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/preact\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/cross-fetch\"), __webpack_require__.e(\"vendor-chunks/typedarray-to-buffer\"), __webpack_require__.e(\"vendor-chunks/toggle-selection\"), __webpack_require__.e(\"vendor-chunks/query-string\"), __webpack_require__.e(\"vendor-chunks/is-typedarray\"), __webpack_require__.e(\"vendor-chunks/copy-to-clipboard\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @walletconnect/legacy-provider */ \"(ssr)/./node_modules/@walletconnect/legacy-provider/dist/cjs/index.js\", 19))).default;\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, new WalletConnectProvider({\n                ...this.options,\n                chainId,\n                rpc: {\n                    ...rpc,\n                    ...this.options?.rpc\n                }\n            }));\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).http = await (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).setHttpProvider(chainId);\n        }\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider({\n                chainId\n            }),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_4__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_5__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n};\n_provider = new WeakMap();\n_switchChain = new WeakSet();\nswitchChain_fn = async function(chainId) {\n    const provider = await this.getProvider();\n    const id = (0,viem__WEBPACK_IMPORTED_MODULE_6__.numberToHex)(chainId);\n    try {\n        await Promise.race([\n            provider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: id\n                    }\n                ]\n            }),\n            new Promise((res)=>this.on(\"change\", ({ chain })=>{\n                    if (chain?.id === chainId) res(chainId);\n                }))\n        ]);\n        return this.chains.find((x)=>x.id === chainId) ?? {\n            id: chainId,\n            name: `Chain ${id}`,\n            network: `${id}`,\n            nativeCurrency: {\n                name: \"Ether\",\n                decimals: 18,\n                symbol: \"ETH\"\n            },\n            rpcUrls: {\n                default: {\n                    http: [\n                        \"\"\n                    ]\n                },\n                public: {\n                    http: [\n                        \"\"\n                    ]\n                }\n            }\n        };\n    } catch (error) {\n        const message = typeof error === \"string\" ? error : error?.message;\n        if (/user rejected request/i.test(message)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n        throw new viem__WEBPACK_IMPORTED_MODULE_3__.SwitchChainError(error);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/walletConnectLegacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9jaHVuay1NUVhCRFRWSy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsZ0JBQWdCLENBQUNDLEtBQUtDLFFBQVFDO0lBQ2hDLElBQUksQ0FBQ0QsT0FBT0UsR0FBRyxDQUFDSCxNQUNkLE1BQU1JLFVBQVUsWUFBWUY7QUFDaEM7QUFDQSxJQUFJRyxlQUFlLENBQUNMLEtBQUtDLFFBQVFLO0lBQy9CUCxjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9LLFNBQVNBLE9BQU9DLElBQUksQ0FBQ1AsT0FBT0MsT0FBT08sR0FBRyxDQUFDUjtBQUNoRDtBQUNBLElBQUlTLGVBQWUsQ0FBQ1QsS0FBS0MsUUFBUVM7SUFDL0IsSUFBSVQsT0FBT0UsR0FBRyxDQUFDSCxNQUNiLE1BQU1JLFVBQVU7SUFDbEJILGtCQUFrQlUsVUFBVVYsT0FBT1csR0FBRyxDQUFDWixPQUFPQyxPQUFPWSxHQUFHLENBQUNiLEtBQUtVO0FBQ2hFO0FBQ0EsSUFBSUksZUFBZSxDQUFDZCxLQUFLQyxRQUFRUyxPQUFPSztJQUN0Q2hCLGNBQWNDLEtBQUtDLFFBQVE7SUFDM0JjLFNBQVNBLE9BQU9SLElBQUksQ0FBQ1AsS0FBS1UsU0FBU1QsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtJQUNuRCxPQUFPQTtBQUNUO0FBQ0EsSUFBSU0sa0JBQWtCLENBQUNoQixLQUFLQyxRQUFRZ0I7SUFDbENsQixjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9nQjtBQUNUO0FBT0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udC8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2NodW5rLU1RWEJEVFZLLmpzPzdjYzkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4ge1xuICBpZiAoIW1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIgKyBtc2cpO1xufTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpO1xuICByZXR1cm4gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IG1lbWJlci5nZXQob2JqKTtcbn07XG52YXIgX19wcml2YXRlQWRkID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSkgPT4ge1xuICBpZiAobWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgdGhlIHNhbWUgcHJpdmF0ZSBtZW1iZXIgbW9yZSB0aGFuIG9uY2VcIik7XG4gIG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xufTtcbnZhciBfX3ByaXZhdGVTZXQgPSAob2JqLCBtZW1iZXIsIHZhbHVlLCBzZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJ3cml0ZSB0byBwcml2YXRlIGZpZWxkXCIpO1xuICBzZXR0ZXIgPyBzZXR0ZXIuY2FsbChvYmosIHZhbHVlKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgX19wcml2YXRlTWV0aG9kID0gKG9iaiwgbWVtYmVyLCBtZXRob2QpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIik7XG4gIHJldHVybiBtZXRob2Q7XG59O1xuXG5leHBvcnQge1xuICBfX3ByaXZhdGVHZXQsXG4gIF9fcHJpdmF0ZUFkZCxcbiAgX19wcml2YXRlU2V0LFxuICBfX3ByaXZhdGVNZXRob2Rcbn07XG4iXSwibmFtZXMiOlsiX19hY2Nlc3NDaGVjayIsIm9iaiIsIm1lbWJlciIsIm1zZyIsImhhcyIsIlR5cGVFcnJvciIsIl9fcHJpdmF0ZUdldCIsImdldHRlciIsImNhbGwiLCJnZXQiLCJfX3ByaXZhdGVBZGQiLCJ2YWx1ZSIsIldlYWtTZXQiLCJhZGQiLCJzZXQiLCJfX3ByaXZhdGVTZXQiLCJzZXR0ZXIiLCJfX3ByaXZhdGVNZXRob2QiLCJtZXRob2QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainMismatchError: () => (/* binding */ ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* binding */ ChainNotConfiguredError),\n/* harmony export */   Config: () => (/* binding */ Config),\n/* harmony export */   ConfigChainsNotFound: () => (/* binding */ ConfigChainsNotFound),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* binding */ ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* reexport safe */ _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* binding */ SwitchChainNotSupportedError),\n/* harmony export */   configureChains: () => (/* binding */ configureChains),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   createConfig: () => (/* binding */ createConfig),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   disconnect: () => (/* binding */ disconnect),\n/* harmony export */   erc20ABI: () => (/* binding */ erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* binding */ erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* binding */ erc721ABI),\n/* harmony export */   fetchBalance: () => (/* binding */ fetchBalance),\n/* harmony export */   fetchBlockNumber: () => (/* binding */ fetchBlockNumber),\n/* harmony export */   fetchEnsAddress: () => (/* binding */ fetchEnsAddress),\n/* harmony export */   fetchEnsAvatar: () => (/* binding */ fetchEnsAvatar),\n/* harmony export */   fetchEnsName: () => (/* binding */ fetchEnsName),\n/* harmony export */   fetchEnsResolver: () => (/* binding */ fetchEnsResolver),\n/* harmony export */   fetchFeeData: () => (/* binding */ fetchFeeData),\n/* harmony export */   fetchToken: () => (/* binding */ fetchToken),\n/* harmony export */   fetchTransaction: () => (/* binding */ fetchTransaction),\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getCallParameters: () => (/* binding */ getCallParameters),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   getContract: () => (/* binding */ getContract),\n/* harmony export */   getNetwork: () => (/* binding */ getNetwork),\n/* harmony export */   getPublicClient: () => (/* binding */ getPublicClient),\n/* harmony export */   getSendTransactionParameters: () => (/* binding */ getSendTransactionParameters),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   getWalletClient: () => (/* binding */ getWalletClient),\n/* harmony export */   getWebSocketPublicClient: () => (/* binding */ getWebSocketPublicClient),\n/* harmony export */   multicall: () => (/* binding */ multicall),\n/* harmony export */   noopStorage: () => (/* binding */ noopStorage),\n/* harmony export */   prepareSendTransaction: () => (/* binding */ prepareSendTransaction),\n/* harmony export */   prepareWriteContract: () => (/* binding */ prepareWriteContract),\n/* harmony export */   readContract: () => (/* binding */ readContract),\n/* harmony export */   readContracts: () => (/* binding */ readContracts),\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData),\n/* harmony export */   switchNetwork: () => (/* binding */ switchNetwork),\n/* harmony export */   waitForTransaction: () => (/* binding */ waitForTransaction),\n/* harmony export */   watchAccount: () => (/* binding */ watchAccount),\n/* harmony export */   watchBlockNumber: () => (/* binding */ watchBlockNumber),\n/* harmony export */   watchContractEvent: () => (/* binding */ watchContractEvent),\n/* harmony export */   watchMulticall: () => (/* binding */ watchMulticall),\n/* harmony export */   watchNetwork: () => (/* binding */ watchNetwork),\n/* harmony export */   watchPendingTransactions: () => (/* binding */ watchPendingTransactions),\n/* harmony export */   watchPublicClient: () => (/* binding */ watchPublicClient),\n/* harmony export */   watchReadContract: () => (/* binding */ watchReadContract),\n/* harmony export */   watchReadContracts: () => (/* binding */ watchReadContracts),\n/* harmony export */   watchWalletClient: () => (/* binding */ watchWalletClient),\n/* harmony export */   watchWebSocketPublicClient: () => (/* binding */ watchWebSocketPublicClient),\n/* harmony export */   writeContract: () => (/* binding */ writeContract)\n/* harmony export */ });\n/* harmony import */ var _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-BVC4KGLQ.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-P4NRLOY7.js\");\n/* harmony import */ var _chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-MQXBDTVK.js */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/fallback.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/webSocket.js\");\n/* harmony import */ var _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @wagmi/connectors */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/constants/unit.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/contract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/actions/getContract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/parseGwei.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n// src/utils/configureChains.ts\n\nfunction configureChains(defaultChains, providers, { batch = {\n    multicall: {\n        wait: 32\n    }\n}, pollingInterval = 4e3, rank, retryCount, retryDelay, stallTimeout } = {}) {\n    if (!defaultChains.length) throw new Error(\"must have at least one chain\");\n    let chains = [];\n    const httpUrls = {};\n    const wsUrls = {};\n    for (const chain of defaultChains){\n        let configExists = false;\n        for (const provider of providers){\n            const apiConfig = provider(chain);\n            if (!apiConfig) continue;\n            configExists = true;\n            if (!chains.some(({ id })=>id === chain.id)) {\n                chains = [\n                    ...chains,\n                    apiConfig.chain\n                ];\n            }\n            httpUrls[chain.id] = [\n                ...httpUrls[chain.id] || [],\n                ...apiConfig.rpcUrls.http\n            ];\n            if (apiConfig.rpcUrls.webSocket) {\n                wsUrls[chain.id] = [\n                    ...wsUrls[chain.id] || [],\n                    ...apiConfig.rpcUrls.webSocket\n                ];\n            }\n        }\n        if (!configExists) {\n            throw new Error([\n                `Could not find valid provider configuration for chain \"${chain.name}\".\n`,\n                \"You may need to add `jsonRpcProvider` to `configureChains` with the chain's RPC URLs.\",\n                \"Read more: https://wagmi.sh/core/providers/jsonRpc\"\n            ].join(\"\\n\"));\n        }\n    }\n    return {\n        chains,\n        publicClient: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainHttpUrls = httpUrls[activeChain.id];\n            if (!chainHttpUrls || !chainHttpUrls[0]) throw new Error(`No providers configured for chain \"${activeChain.id}\"`);\n            const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_0__.createPublicClient)({\n                batch,\n                chain: activeChain,\n                transport: (0,viem__WEBPACK_IMPORTED_MODULE_1__.fallback)(chainHttpUrls.map((url)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(url, {\n                        timeout: stallTimeout\n                    })), {\n                    rank,\n                    retryCount,\n                    retryDelay\n                }),\n                pollingInterval\n            });\n            return Object.assign(publicClient, {\n                chains\n            });\n        },\n        webSocketPublicClient: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainWsUrls = wsUrls[activeChain.id];\n            if (!chainWsUrls || !chainWsUrls[0]) return void 0;\n            const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_0__.createPublicClient)({\n                batch,\n                chain: activeChain,\n                transport: (0,viem__WEBPACK_IMPORTED_MODULE_1__.fallback)(chainWsUrls.map((url)=>(0,viem__WEBPACK_IMPORTED_MODULE_3__.webSocket)(url, {\n                        timeout: stallTimeout\n                    })), {\n                    rank,\n                    retryCount,\n                    retryDelay\n                }),\n                pollingInterval\n            });\n            return Object.assign(publicClient, {\n                chains\n            });\n        }\n    };\n}\n// src/errors.ts\n\nvar ChainMismatchError = class extends Error {\n    constructor({ activeChain, targetChain }){\n        super(`Chain mismatch: Expected \"${targetChain}\", received \"${activeChain}\".`);\n        this.name = \"ChainMismatchError\";\n    }\n};\nvar ChainNotConfiguredError = class extends Error {\n    constructor({ chainId, connectorId }){\n        super(`Chain \"${chainId}\" not configured${connectorId ? ` for connector \"${connectorId}\"` : \"\"}.`);\n        this.name = \"ChainNotConfigured\";\n    }\n};\nvar ConnectorAlreadyConnectedError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorAlreadyConnectedError\";\n        this.message = \"Connector already connected\";\n    }\n};\nvar ConfigChainsNotFound = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConfigChainsNotFound\";\n        this.message = \"No chains were found on the wagmi config. Some functions that require a chain may not work.\";\n    }\n};\nvar SwitchChainNotSupportedError = class extends Error {\n    constructor({ connector }){\n        super(`\"${connector.name}\" does not support programmatic chain switching.`);\n        this.name = \"SwitchChainNotSupportedError\";\n    }\n};\n// src/utils/deepEqual.ts\nfunction deepEqual(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        let length;\n        let i;\n        if (Array.isArray(a) && Array.isArray(b)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!deepEqual(a[i], b[i])) return false;\n            return true;\n        }\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        const keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            const key = keys[i];\n            if (key && !deepEqual(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n// src/utils/deserialize.ts\nvar findAndReplace = (cacheRef, { find, replace })=>{\n    if (cacheRef && find(cacheRef)) {\n        return replace(cacheRef);\n    }\n    if (typeof cacheRef !== \"object\") {\n        return cacheRef;\n    }\n    if (Array.isArray(cacheRef)) {\n        return cacheRef.map((item)=>findAndReplace(item, {\n                find,\n                replace\n            }));\n    }\n    if (cacheRef instanceof Object) {\n        return Object.entries(cacheRef).reduce((curr, [key, value])=>({\n                ...curr,\n                [key]: findAndReplace(value, {\n                    find,\n                    replace\n                })\n            }), {});\n    }\n    return cacheRef;\n};\nfunction deserialize(cachedString) {\n    const cache = JSON.parse(cachedString);\n    const deserializedCacheWithBigInts = findAndReplace(cache, {\n        find: (data)=>typeof data === \"string\" && data.startsWith(\"#bigint.\"),\n        replace: (data)=>BigInt(data.replace(\"#bigint.\", \"\"))\n    });\n    return deserializedCacheWithBigInts;\n}\n// src/utils/getParameters.ts\nfunction getCallParameters(args) {\n    return {\n        accessList: args.accessList,\n        account: args.account,\n        blockNumber: args.blockNumber,\n        blockTag: args.blockTag,\n        data: args.data,\n        gas: args.gas,\n        gasPrice: args.gasPrice,\n        maxFeePerGas: args.maxFeePerGas,\n        maxPriorityFeePerGas: args.maxPriorityFeePerGas,\n        nonce: args.nonce,\n        to: args.to,\n        value: args.value\n    };\n}\nfunction getSendTransactionParameters(args) {\n    return {\n        accessList: args.accessList,\n        account: args.account,\n        data: args.data,\n        gas: args.gas,\n        gasPrice: args.gasPrice,\n        maxFeePerGas: args.maxFeePerGas,\n        maxPriorityFeePerGas: args.maxPriorityFeePerGas,\n        nonce: args.nonce,\n        to: args.to,\n        value: args.value\n    };\n}\n// src/utils/getUnit.ts\n\nfunction getUnit(unit) {\n    if (typeof unit === \"number\") return unit;\n    if (unit === \"wei\") return 0;\n    return Math.abs(viem__WEBPACK_IMPORTED_MODULE_4__.weiUnits[unit]);\n}\n// src/utils/serialize.ts\nfunction getReferenceKey(keys, cutoff) {\n    return keys.slice(0, cutoff).join(\".\") || \".\";\n}\nfunction getCutoff(array, value) {\n    const { length } = array;\n    for(let index = 0; index < length; ++index){\n        if (array[index] === value) {\n            return index + 1;\n        }\n    }\n    return 0;\n}\nfunction createReplacer(replacer, circularReplacer) {\n    const hasReplacer = typeof replacer === \"function\";\n    const hasCircularReplacer = typeof circularReplacer === \"function\";\n    const cache = [];\n    const keys = [];\n    return function replace(key, value) {\n        if (typeof value === \"object\") {\n            if (cache.length) {\n                const thisCutoff = getCutoff(cache, this);\n                if (thisCutoff === 0) {\n                    cache[cache.length] = this;\n                } else {\n                    cache.splice(thisCutoff);\n                    keys.splice(thisCutoff);\n                }\n                keys[keys.length] = key;\n                const valueCutoff = getCutoff(cache, value);\n                if (valueCutoff !== 0) {\n                    return hasCircularReplacer ? circularReplacer.call(this, key, value, getReferenceKey(keys, valueCutoff)) : `[ref=${getReferenceKey(keys, valueCutoff)}]`;\n                }\n            } else {\n                cache[0] = value;\n                keys[0] = key;\n            }\n        }\n        return hasReplacer ? replacer.call(this, key, value) : value;\n    };\n}\nfunction serialize(value, replacer, indent, circularReplacer) {\n    return JSON.stringify(value, createReplacer((key, value_)=>{\n        const value2 = typeof value_ === \"bigint\" ? `#bigint.${value_.toString()}` : value_;\n        return replacer?.(key, value2) || value2;\n    }, circularReplacer), indent ?? void 0);\n}\n// src/config.ts\n\n\n// src/storage.ts\nvar noopStorage = {\n    getItem: (_key)=>\"\",\n    setItem: (_key, _value)=>null,\n    removeItem: (_key)=>null\n};\nfunction createStorage({ deserialize: deserialize2 = deserialize, key: prefix = \"wagmi\", serialize: serialize2 = serialize, storage }) {\n    return {\n        ...storage,\n        getItem: (key, defaultState = null)=>{\n            const value = storage.getItem(`${prefix}.${key}`);\n            try {\n                return value ? deserialize2(value) : defaultState;\n            } catch (error) {\n                console.warn(error);\n                return defaultState;\n            }\n        },\n        setItem: (key, value)=>{\n            if (value === null) {\n                storage.removeItem(`${prefix}.${key}`);\n            } else {\n                try {\n                    storage.setItem(`${prefix}.${key}`, serialize2(value));\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n        },\n        removeItem: (key)=>storage.removeItem(`${prefix}.${key}`)\n    };\n}\n// src/config.ts\nvar storeKey = \"store\";\nvar _isAutoConnecting, _lastUsedConnector, _addEffects, addEffects_fn;\nvar Config = class {\n    constructor({ autoConnect = false, connectors = [\n        new _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_5__.InjectedConnector()\n    ], publicClient, storage = createStorage({\n        storage:  false ? 0 : noopStorage\n    }), logger = {\n        warn: console.warn\n    }, webSocketPublicClient }){\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _addEffects);\n        this.publicClients = /* @__PURE__ */ new Map();\n        this.webSocketPublicClients = /* @__PURE__ */ new Map();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _isAutoConnecting, void 0);\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _lastUsedConnector, void 0);\n        this.args = {\n            autoConnect,\n            connectors,\n            logger,\n            publicClient,\n            storage,\n            webSocketPublicClient\n        };\n        let status = \"disconnected\";\n        let chainId;\n        if (autoConnect) {\n            try {\n                const rawState = storage.getItem(storeKey);\n                const data = rawState?.state?.data;\n                status = data?.account ? \"reconnecting\" : \"connecting\";\n                chainId = data?.chain?.id;\n            } catch (_error) {}\n        }\n        const connectors_ = typeof connectors === \"function\" ? connectors() : connectors;\n        connectors_.forEach((connector)=>connector.setStorage(storage));\n        this.store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__.createStore)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.subscribeWithSelector)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.persist)(()=>({\n                connectors: connectors_,\n                publicClient: this.getPublicClient({\n                    chainId\n                }),\n                status,\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }), {\n            name: storeKey,\n            storage,\n            partialize: (state)=>({\n                    ...autoConnect && {\n                        data: {\n                            account: state?.data?.account,\n                            chain: state?.data?.chain\n                        }\n                    },\n                    chains: state?.chains\n                }),\n            version: 2\n        })));\n        this.storage = storage;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _lastUsedConnector, storage?.getItem(\"wallet\"));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateMethod)(this, _addEffects, addEffects_fn).call(this);\n        if (autoConnect && \"undefined\" !== \"undefined\") {}\n    }\n    get chains() {\n        return this.store.getState().chains;\n    }\n    get connectors() {\n        return this.store.getState().connectors;\n    }\n    get connector() {\n        return this.store.getState().connector;\n    }\n    get data() {\n        return this.store.getState().data;\n    }\n    get error() {\n        return this.store.getState().error;\n    }\n    get lastUsedChainId() {\n        return this.data?.chain?.id;\n    }\n    get publicClient() {\n        return this.store.getState().publicClient;\n    }\n    get status() {\n        return this.store.getState().status;\n    }\n    get subscribe() {\n        return this.store.subscribe;\n    }\n    get webSocketPublicClient() {\n        return this.store.getState().webSocketPublicClient;\n    }\n    setState(updater) {\n        const newState = typeof updater === \"function\" ? updater(this.store.getState()) : updater;\n        this.store.setState(newState, true);\n    }\n    clearState() {\n        this.setState((x)=>({\n                ...x,\n                chains: void 0,\n                connector: void 0,\n                data: void 0,\n                error: void 0,\n                status: \"disconnected\"\n            }));\n    }\n    async destroy() {\n        if (this.connector) await this.connector.disconnect?.();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, false);\n        this.clearState();\n        this.store.destroy();\n    }\n    async autoConnect() {\n        if ((0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _isAutoConnecting)) return;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, true);\n        this.setState((x)=>({\n                ...x,\n                status: x.data?.account ? \"reconnecting\" : \"connecting\"\n            }));\n        const sorted = (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _lastUsedConnector) ? [\n            ...this.connectors\n        ].sort((x)=>x.id === (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _lastUsedConnector) ? -1 : 1) : this.connectors;\n        let connected = false;\n        for (const connector of sorted){\n            if (!connector.ready || !connector.isAuthorized) continue;\n            const isAuthorized = await connector.isAuthorized();\n            if (!isAuthorized) continue;\n            const data = await connector.connect();\n            this.setState((x)=>({\n                    ...x,\n                    connector,\n                    chains: connector?.chains,\n                    data,\n                    status: \"connected\"\n                }));\n            connected = true;\n            break;\n        }\n        if (!connected) this.setState((x)=>({\n                ...x,\n                data: void 0,\n                status: \"disconnected\"\n            }));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, false);\n        return this.data;\n    }\n    setConnectors(connectors) {\n        this.args = {\n            ...this.args,\n            connectors\n        };\n        const connectors_ = typeof connectors === \"function\" ? connectors() : connectors;\n        connectors_.forEach((connector)=>connector.setStorage(this.args.storage));\n        this.setState((x)=>({\n                ...x,\n                connectors: connectors_\n            }));\n    }\n    getPublicClient({ chainId } = {}) {\n        let publicClient_ = this.publicClients.get(-1);\n        if (publicClient_ && publicClient_?.chain.id === chainId) return publicClient_;\n        publicClient_ = this.publicClients.get(chainId ?? -1);\n        if (publicClient_) return publicClient_;\n        const { publicClient } = this.args;\n        publicClient_ = typeof publicClient === \"function\" ? publicClient({\n            chainId\n        }) : publicClient;\n        this.publicClients.set(chainId ?? -1, publicClient_);\n        return publicClient_;\n    }\n    setPublicClient(publicClient) {\n        const chainId = this.data?.chain?.id;\n        this.args = {\n            ...this.args,\n            publicClient\n        };\n        this.publicClients.clear();\n        this.setState((x)=>({\n                ...x,\n                publicClient: this.getPublicClient({\n                    chainId\n                })\n            }));\n    }\n    getWebSocketPublicClient({ chainId } = {}) {\n        let webSocketPublicClient_ = this.webSocketPublicClients.get(-1);\n        if (webSocketPublicClient_ && webSocketPublicClient_?.chain.id === chainId) return webSocketPublicClient_;\n        webSocketPublicClient_ = this.webSocketPublicClients.get(chainId ?? -1);\n        if (webSocketPublicClient_) return webSocketPublicClient_;\n        const { webSocketPublicClient } = this.args;\n        webSocketPublicClient_ = typeof webSocketPublicClient === \"function\" ? webSocketPublicClient({\n            chainId\n        }) : webSocketPublicClient;\n        if (webSocketPublicClient_) this.webSocketPublicClients.set(chainId ?? -1, webSocketPublicClient_);\n        return webSocketPublicClient_;\n    }\n    setWebSocketPublicClient(webSocketPublicClient) {\n        const chainId = this.data?.chain?.id;\n        this.args = {\n            ...this.args,\n            webSocketPublicClient\n        };\n        this.webSocketPublicClients.clear();\n        this.setState((x)=>({\n                ...x,\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }));\n    }\n    setLastUsedConnector(lastUsedConnector = null) {\n        this.storage?.setItem(\"wallet\", lastUsedConnector);\n    }\n};\n_isAutoConnecting = new WeakMap();\n_lastUsedConnector = new WeakMap();\n_addEffects = new WeakSet();\naddEffects_fn = function() {\n    const onChange = (data)=>{\n        this.setState((x)=>({\n                ...x,\n                data: {\n                    ...x.data,\n                    ...data\n                }\n            }));\n    };\n    const onDisconnect = ()=>{\n        this.clearState();\n    };\n    const onError = (error)=>{\n        this.setState((x)=>({\n                ...x,\n                error\n            }));\n    };\n    this.store.subscribe(({ connector })=>connector, (connector, prevConnector)=>{\n        prevConnector?.off?.(\"change\", onChange);\n        prevConnector?.off?.(\"disconnect\", onDisconnect);\n        prevConnector?.off?.(\"error\", onError);\n        if (!connector) return;\n        connector.on?.(\"change\", onChange);\n        connector.on?.(\"disconnect\", onDisconnect);\n        connector.on?.(\"error\", onError);\n    });\n    const { publicClient, webSocketPublicClient } = this.args;\n    const subscribePublicClient = typeof publicClient === \"function\";\n    const subscribeWebSocketPublicClient = typeof webSocketPublicClient === \"function\";\n    if (subscribePublicClient || subscribeWebSocketPublicClient) this.store.subscribe(({ data })=>data?.chain?.id, (chainId)=>{\n        this.setState((x)=>({\n                ...x,\n                publicClient: this.getPublicClient({\n                    chainId\n                }),\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }));\n    });\n};\nvar config;\nfunction createConfig(args) {\n    const config_ = new Config(args);\n    config = config_;\n    return config_;\n}\nfunction getConfig() {\n    if (!config) {\n        throw new Error(\"No wagmi config found. Ensure you have set up a config: https://wagmi.sh/react/config\");\n    }\n    return config;\n}\n// src/actions/accounts/connect.ts\nasync function connect({ chainId, connector }) {\n    const config2 = getConfig();\n    const activeConnector = config2.connector;\n    if (activeConnector && connector.id === activeConnector.id) throw new ConnectorAlreadyConnectedError();\n    try {\n        config2.setState((x)=>({\n                ...x,\n                status: \"connecting\"\n            }));\n        const data = await connector.connect({\n            chainId\n        });\n        config2.setLastUsedConnector(connector.id);\n        config2.setState((x)=>({\n                ...x,\n                connector,\n                chains: connector?.chains,\n                data,\n                status: \"connected\"\n            }));\n        config2.storage.setItem(\"connected\", true);\n        return {\n            ...data,\n            connector\n        };\n    } catch (err) {\n        config2.setState((x)=>{\n            return {\n                ...x,\n                status: x.connector ? \"connected\" : \"disconnected\"\n            };\n        });\n        throw err;\n    }\n}\n// src/actions/accounts/disconnect.ts\nasync function disconnect() {\n    const config2 = getConfig();\n    if (config2.connector) await config2.connector.disconnect();\n    config2.clearState();\n    config2.storage.removeItem(\"connected\");\n}\n// src/actions/accounts/fetchBalance.ts\n\n// src/constants/abis.ts\nvar erc20ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc20ABI_bytes32 = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc721ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"ApprovalForAll\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"getApproved\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"isApprovedForAll\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"operator\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"ownerOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"id\",\n                type: \"uint256\"\n            },\n            {\n                name: \"data\",\n                type: \"bytes\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"setApprovalForAll\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenURI\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"tokeId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    }\n];\nvar erc4626ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Approval\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Deposit\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Transfer\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Withdraw\",\n        type: \"event\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"asset\",\n        outputs: [\n            {\n                name: \"assetTokenAddress\",\n                type: \"address\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToAssets\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToShares\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxDeposit\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxMint\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxRedeem\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxWithdraw\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"mint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewDeposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewMint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewRedeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewWithdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"redeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalAssets\",\n        outputs: [\n            {\n                name: \"totalManagedAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"withdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    }\n];\n// src/actions/contracts/fetchToken.ts\n\nasync function fetchToken({ address, chainId, formatUnits: unit = 18 }) {\n    async function fetchToken_({ abi }) {\n        const erc20Config = {\n            address,\n            abi,\n            chainId\n        };\n        const [decimals, name, symbol, totalSupply] = await readContracts({\n            allowFailure: false,\n            contracts: [\n                {\n                    ...erc20Config,\n                    functionName: \"decimals\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"name\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"symbol\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"totalSupply\"\n                }\n            ]\n        });\n        return {\n            address,\n            decimals,\n            name,\n            symbol,\n            totalSupply: {\n                formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(totalSupply, getUnit(unit)),\n                value: totalSupply\n            }\n        };\n    }\n    try {\n        return await fetchToken_({\n            abi: erc20ABI\n        });\n    } catch (err) {\n        if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) {\n            const { name, symbol, ...rest } = await fetchToken_({\n                abi: erc20ABI_bytes32\n            });\n            return {\n                name: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(name, {\n                    dir: \"right\"\n                })),\n                symbol: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(symbol, {\n                    dir: \"right\"\n                })),\n                ...rest\n            };\n        }\n        throw err;\n    }\n}\n// src/actions/viem/getPublicClient.ts\nfunction getPublicClient({ chainId } = {}) {\n    const config2 = getConfig();\n    if (chainId) return config2.getPublicClient({\n        chainId\n    }) || config2.publicClient;\n    return config2.publicClient;\n}\n// src/actions/viem/getWalletClient.ts\nasync function getWalletClient({ chainId } = {}) {\n    const config2 = getConfig();\n    const walletClient = await config2.connector?.getWalletClient?.({\n        chainId\n    }) || null;\n    return walletClient;\n}\n// src/actions/viem/getWebSocketPublicClient.ts\nfunction getWebSocketPublicClient({ chainId } = {}) {\n    const config2 = getConfig();\n    if (chainId) return config2.getWebSocketPublicClient({\n        chainId\n    }) || config2.webSocketPublicClient;\n    return config2.webSocketPublicClient;\n}\n// src/actions/viem/watchPublicClient.ts\nfunction watchPublicClient(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(getPublicClient(args));\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return unsubscribe;\n}\n// src/actions/viem/watchWalletClient.ts\n\nfunction watchWalletClient({ chainId }, callback) {\n    const config2 = getConfig();\n    const handleChange = async ({ chainId: chainId_ })=>{\n        if (chainId && chainId_ && chainId !== chainId_) return;\n        const walletClient = await getWalletClient({\n            chainId\n        });\n        if (!getConfig().connector) return callback(null);\n        return callback(walletClient);\n    };\n    const unsubscribe = config2.subscribe(({ data, connector })=>({\n            account: data?.account,\n            chainId: data?.chain?.id,\n            connector\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/viem/watchWebSocketPublicClient.ts\nfunction watchWebSocketPublicClient(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(getWebSocketPublicClient(args));\n    const unsubscribe = config2.subscribe(({ webSocketPublicClient })=>webSocketPublicClient, handleChange);\n    return unsubscribe;\n}\n// src/actions/contracts/prepareWriteContract.ts\nasync function prepareWriteContract({ abi, address, args, chainId, dataSuffix, functionName, walletClient: walletClient_, ...config2 }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const walletClient = walletClient_ ?? await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    const { account, accessList, blockNumber, blockTag, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, value } = getCallParameters(config2);\n    const { result, request } = await publicClient.simulateContract({\n        abi,\n        address,\n        functionName,\n        args,\n        account: account || walletClient.account,\n        accessList,\n        blockNumber,\n        blockTag,\n        dataSuffix,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value\n    });\n    const minimizedAbi = abi.filter((abiItem)=>\"name\" in abiItem && abiItem.name === functionName);\n    return {\n        mode: \"prepared\",\n        request: {\n            ...request,\n            abi: minimizedAbi,\n            chainId\n        },\n        result\n    };\n}\n// src/actions/contracts/getContract.ts\n\nfunction getContract({ address, abi, chainId, walletClient }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return (0,viem__WEBPACK_IMPORTED_MODULE_15__.getContract)({\n        address,\n        abi,\n        publicClient,\n        walletClient\n    });\n}\n// src/actions/contracts/multicall.ts\nasync function multicall({ chainId, contracts, blockNumber, blockTag, ...args }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    if (!publicClient.chains) throw new ConfigChainsNotFound();\n    if (chainId && publicClient.chain.id !== chainId) throw new ChainNotConfiguredError({\n        chainId\n    });\n    return publicClient.multicall({\n        allowFailure: args.allowFailure ?? true,\n        blockNumber,\n        blockTag,\n        contracts\n    });\n}\n// src/actions/contracts/readContract.ts\nasync function readContract({ address, account, chainId, abi, args, functionName, blockNumber, blockTag }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.readContract({\n        abi,\n        address,\n        account,\n        functionName,\n        args,\n        blockNumber,\n        blockTag\n    });\n}\n// src/actions/contracts/readContracts.ts\n\nasync function readContracts({ contracts, blockNumber, blockTag, ...args }) {\n    const { allowFailure = true } = args;\n    try {\n        const publicClient = getPublicClient();\n        const contractsByChainId = contracts.reduce((contracts2, contract, index)=>{\n            const chainId = contract.chainId ?? publicClient.chain.id;\n            return {\n                ...contracts2,\n                [chainId]: [\n                    ...contracts2[chainId] || [],\n                    {\n                        contract,\n                        index\n                    }\n                ]\n            };\n        }, {});\n        const promises = ()=>Object.entries(contractsByChainId).map(([chainId, contracts2])=>multicall({\n                    allowFailure,\n                    chainId: parseInt(chainId),\n                    contracts: contracts2.map(({ contract })=>contract),\n                    blockNumber,\n                    blockTag\n                }));\n        const multicallResults = (await Promise.all(promises())).flat();\n        const resultIndexes = Object.values(contractsByChainId).flatMap((contracts2)=>contracts2.map(({ index })=>index));\n        return multicallResults.reduce((results, result, index)=>{\n            if (results) results[resultIndexes[index]] = result;\n            return results;\n        }, []);\n    } catch (err) {\n        if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) throw err;\n        const promises = ()=>contracts.map((contract)=>readContract({\n                    ...contract,\n                    blockNumber,\n                    blockTag\n                }));\n        if (allowFailure) return (await Promise.allSettled(promises())).map((result)=>{\n            if (result.status === \"fulfilled\") return {\n                result: result.value,\n                status: \"success\"\n            };\n            return {\n                error: result.reason,\n                result: void 0,\n                status: \"failure\"\n            };\n        });\n        return await Promise.all(promises());\n    }\n}\n// src/actions/contracts/watchContractEvent.ts\n\nfunction watchContractEvent({ address, abi, chainId, eventName }, callback) {\n    let unwatch;\n    const watchEvent = async ()=>{\n        if (unwatch) unwatch();\n        const publicClient = getWebSocketPublicClient({\n            chainId\n        }) || getPublicClient({\n            chainId\n        });\n        unwatch = publicClient.watchContractEvent({\n            address,\n            abi,\n            eventName,\n            onLogs: callback\n        });\n    };\n    watchEvent();\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), watchEvent, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unwatch?.();\n        unsubscribe();\n    };\n}\n// src/actions/network-status/watchBlockNumber.ts\n\nfunction watchBlockNumber(args, callback) {\n    let unwatch;\n    const createListener = (publicClient)=>{\n        if (unwatch) unwatch();\n        unwatch = publicClient.watchBlockNumber({\n            onBlockNumber: callback,\n            emitOnBegin: true,\n            poll: true\n        });\n    };\n    const publicClient_ = getWebSocketPublicClient({\n        chainId: args.chainId\n    }) ?? getPublicClient({\n        chainId: args.chainId\n    });\n    if (args.listen) createListener(publicClient_);\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), async ({ publicClient, webSocketPublicClient })=>{\n        const publicClient_2 = webSocketPublicClient ?? publicClient;\n        if (args.listen && !args.chainId && publicClient_2) {\n            createListener(publicClient_2);\n        }\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchMulticall.ts\nfunction watchMulticall(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await multicall(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContract.ts\nfunction watchReadContract(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await readContract(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContracts.ts\nfunction watchReadContracts(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await readContracts(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/writeContract.ts\nasync function writeContract(config2) {\n    const walletClient = await getWalletClient({\n        chainId: config2.chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (config2.chainId) assertActiveChain({\n        chainId: config2.chainId\n    });\n    let request;\n    if (config2.mode === \"prepared\") {\n        request = config2.request;\n    } else {\n        const { chainId: _, mode: __, ...args } = config2;\n        const res = await prepareWriteContract(args);\n        request = res.request;\n    }\n    const hash = await walletClient.writeContract({\n        ...request,\n        chain: config2.chainId ? {\n            id: config2.chainId\n        } : null\n    });\n    return {\n        hash\n    };\n}\n// src/actions/accounts/fetchBalance.ts\nasync function fetchBalance({ address, chainId, formatUnits: unit, token }) {\n    const config2 = getConfig();\n    const publicClient = getPublicClient({\n        chainId\n    });\n    if (token) {\n        const fetchContractBalance = async ({ abi })=>{\n            const erc20Config = {\n                abi,\n                address: token,\n                chainId\n            };\n            const [value2, decimals, symbol] = await readContracts({\n                allowFailure: false,\n                contracts: [\n                    {\n                        ...erc20Config,\n                        functionName: \"balanceOf\",\n                        args: [\n                            address\n                        ]\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"decimals\"\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"symbol\"\n                    }\n                ]\n            });\n            return {\n                decimals,\n                formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(value2 ?? \"0\", getUnit(unit ?? decimals)),\n                symbol,\n                value: value2\n            };\n        };\n        try {\n            return await fetchContractBalance({\n                abi: erc20ABI\n            });\n        } catch (err) {\n            if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) {\n                const { symbol, ...rest } = await fetchContractBalance({\n                    abi: erc20ABI_bytes32\n                });\n                return {\n                    symbol: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(symbol, {\n                        dir: \"right\"\n                    })),\n                    ...rest\n                };\n            }\n            throw err;\n        }\n    }\n    const chains = [\n        ...config2.publicClient.chains || [],\n        ...config2.chains ?? []\n    ];\n    const value = await publicClient.getBalance({\n        address\n    });\n    const chain = chains.find((x)=>x.id === publicClient.chain.id);\n    return {\n        decimals: chain?.nativeCurrency.decimals ?? 18,\n        formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(value ?? \"0\", getUnit(unit ?? 18)),\n        symbol: chain?.nativeCurrency.symbol ?? \"ETH\",\n        value\n    };\n}\n// src/actions/accounts/getAccount.ts\nfunction getAccount() {\n    const { data, connector, status } = getConfig();\n    switch(status){\n        case \"connected\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: true,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"reconnecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: !!data?.account,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: true,\n                status\n            };\n        case \"connecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: false,\n                isConnecting: true,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"disconnected\":\n            return {\n                address: void 0,\n                connector: void 0,\n                isConnected: false,\n                isConnecting: false,\n                isDisconnected: true,\n                isReconnecting: false,\n                status\n            };\n    }\n}\n// src/actions/accounts/getNetwork.ts\nfunction getNetwork() {\n    const config2 = getConfig();\n    const chainId = config2.data?.chain?.id;\n    const activeChains = config2.chains ?? [];\n    const activeChain = [\n        ...config2.publicClient?.chains || [],\n        ...activeChains\n    ].find((x)=>x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${chainId}`,\n        network: `${chainId}`,\n        nativeCurrency: {\n            name: \"Ether\",\n            decimals: 18,\n            symbol: \"ETH\"\n        },\n        rpcUrls: {\n            default: {\n                http: [\n                    \"\"\n                ]\n            },\n            public: {\n                http: [\n                    \"\"\n                ]\n            }\n        }\n    };\n    return {\n        chain: chainId ? {\n            ...activeChain,\n            ...config2.data?.chain,\n            id: chainId\n        } : void 0,\n        chains: activeChains\n    };\n}\n// src/actions/accounts/signMessage.ts\nasync function signMessage(args) {\n    const walletClient = await getWalletClient();\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    return await walletClient.signMessage({\n        message: args.message\n    });\n}\n// src/actions/accounts/signTypedData.ts\nasync function signTypedData({ domain, message, primaryType, types }) {\n    const walletClient = await getWalletClient();\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    const { chainId } = domain;\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    return walletClient.signTypedData({\n        message,\n        primaryType,\n        types,\n        domain\n    });\n}\n// src/actions/accounts/switchNetwork.ts\nasync function switchNetwork({ chainId }) {\n    const { connector } = getConfig();\n    if (!connector) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (!connector.switchChain) throw new SwitchChainNotSupportedError({\n        connector\n    });\n    return connector.switchChain(chainId);\n}\n// src/actions/accounts/watchAccount.ts\n\nfunction watchAccount(callback, { selector = (x)=>x } = {}) {\n    const config2 = getConfig();\n    const handleChange = ()=>callback(getAccount());\n    const unsubscribe = config2.subscribe(({ data, connector, status })=>selector({\n            address: data?.account,\n            connector,\n            status\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/accounts/watchNetwork.ts\n\nfunction watchNetwork(callback, { selector = (x)=>x } = {}) {\n    const config2 = getConfig();\n    const handleChange = ()=>callback(getNetwork());\n    const unsubscribe = config2.subscribe(({ data, chains })=>selector({\n            chainId: data?.chain?.id,\n            chains\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/ens/fetchEnsAddress.ts\n\nasync function fetchEnsAddress({ chainId, name }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const address = await publicClient.getEnsAddress({\n        name: normalize(name)\n    });\n    try {\n        if (address === \"0x0000000000000000000000000000000000000000\") return null;\n        return address ? (0,viem__WEBPACK_IMPORTED_MODULE_16__.getAddress)(address) : null;\n    } catch (_error) {\n        return null;\n    }\n}\n// src/actions/ens/fetchEnsAvatar.ts\nasync function fetchEnsAvatar({ name, chainId }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const avatar = await publicClient.getEnsAvatar({\n        name: normalize(name)\n    });\n    return avatar;\n}\n// src/actions/ens/fetchEnsName.ts\n\nasync function fetchEnsName({ address, chainId }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.getEnsName({\n        address: (0,viem__WEBPACK_IMPORTED_MODULE_16__.getAddress)(address)\n    });\n}\n// src/actions/ens/fetchEnsResolver.ts\nasync function fetchEnsResolver({ chainId, name }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const resolver = await publicClient.getEnsResolver({\n        name: normalize(name)\n    });\n    return resolver;\n}\n// src/actions/network-status/fetchBlockNumber.ts\nasync function fetchBlockNumber({ chainId } = {}) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const blockNumber = await publicClient.getBlockNumber();\n    return blockNumber;\n}\n// src/actions/network-status/fetchFeeData.ts\n\nasync function fetchFeeData({ chainId, formatUnits: units = \"gwei\" } = {}) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const block = await publicClient.getBlock();\n    let gasPrice = null;\n    try {\n        gasPrice = await publicClient.getGasPrice();\n    } catch  {}\n    let lastBaseFeePerGas = null;\n    let maxFeePerGas = null;\n    let maxPriorityFeePerGas = null;\n    if (block?.baseFeePerGas) {\n        lastBaseFeePerGas = block.baseFeePerGas;\n        maxPriorityFeePerGas = (0,viem__WEBPACK_IMPORTED_MODULE_17__.parseGwei)(\"1\");\n        maxFeePerGas = block.baseFeePerGas * 2n + maxPriorityFeePerGas;\n    }\n    const unit = getUnit(units);\n    const formatted = {\n        gasPrice: gasPrice ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(gasPrice, unit) : null,\n        maxFeePerGas: maxFeePerGas ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(maxFeePerGas, unit) : null,\n        maxPriorityFeePerGas: maxPriorityFeePerGas ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(maxPriorityFeePerGas, unit) : null\n    };\n    return {\n        lastBaseFeePerGas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        formatted\n    };\n}\n// src/actions/transactions/fetchTransaction.ts\nasync function fetchTransaction({ chainId, hash }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.getTransaction({\n        hash\n    });\n}\n// src/actions/transactions/prepareSendTransaction.ts\n\nasync function prepareSendTransaction({ accessList, account, chainId, data, gas: gas_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to: to_, value, walletClient: walletClient_ }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const walletClient = walletClient_ ?? await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    const to = (to_ && !(0,viem__WEBPACK_IMPORTED_MODULE_18__.isAddress)(to_) ? await fetchEnsAddress({\n        name: to_\n    }) : to_) || void 0;\n    if (to && !(0,viem__WEBPACK_IMPORTED_MODULE_18__.isAddress)(to)) throw new Error(\"Invalid address\");\n    const gas = typeof gas_ === \"undefined\" ? await publicClient.estimateGas({\n        accessList,\n        account: walletClient.account,\n        data,\n        gas: gas_ ?? void 0,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value\n    }) : gas_ || void 0;\n    return {\n        accessList,\n        account,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode: \"prepared\",\n        nonce,\n        to,\n        value,\n        ...chainId ? {\n            chainId\n        } : {}\n    };\n}\n// src/actions/transactions/sendTransaction.ts\nasync function sendTransaction({ accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, nonce, to, value }) {\n    const walletClient = await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    let args;\n    if (mode === \"prepared\") {\n        args = {\n            account,\n            accessList,\n            chain: null,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value\n        };\n    } else {\n        args = await prepareSendTransaction({\n            accessList,\n            account,\n            chainId,\n            data,\n            gas: gas || null,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value\n        });\n    }\n    const hash = await walletClient.sendTransaction({\n        ...args,\n        chain: chainId ? {\n            id: chainId\n        } : null\n    });\n    return {\n        hash\n    };\n}\n// src/actions/transactions/waitForTransaction.ts\n\nasync function waitForTransaction({ chainId, confirmations = 1, hash, onReplaced, timeout = 0 }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const receipt = await publicClient.waitForTransactionReceipt({\n        hash,\n        confirmations,\n        onReplaced,\n        timeout\n    });\n    if (receipt.status === \"reverted\") {\n        const txn = await publicClient.getTransaction({\n            hash: receipt.transactionHash\n        });\n        const code = await publicClient.call({\n            ...txn,\n            gasPrice: txn.type !== \"eip1559\" ? txn.gasPrice : void 0,\n            maxFeePerGas: txn.type === \"eip1559\" ? txn.maxFeePerGas : void 0,\n            maxPriorityFeePerGas: txn.type === \"eip1559\" ? txn.maxPriorityFeePerGas : void 0\n        });\n        const reason = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)(`0x${code.substring(138)}`);\n        throw new Error(reason);\n    }\n    return receipt;\n}\n// src/actions/transactions/watchPendingTransactions.ts\n\nfunction watchPendingTransactions(args, callback) {\n    let unwatch;\n    const createListener = (publicClient)=>{\n        if (unwatch) unwatch();\n        unwatch = publicClient.watchPendingTransactions({\n            onTransactions: callback,\n            poll: true\n        });\n    };\n    const publicClient_ = getWebSocketPublicClient({\n        chainId: args.chainId\n    }) ?? getPublicClient({\n        chainId: args.chainId\n    });\n    createListener(publicClient_);\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), async ({ publicClient, webSocketPublicClient })=>{\n        const publicClient_2 = webSocketPublicClient ?? publicClient;\n        if (!args.chainId && publicClient_2) {\n            createListener(publicClient_2);\n        }\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/utils/assertActiveChain.ts\nfunction assertActiveChain({ chainId }) {\n    const { chain: activeChain, chains } = getNetwork();\n    const activeChainId = activeChain?.id;\n    if (activeChainId && chainId !== activeChainId) {\n        throw new ChainMismatchError({\n            activeChain: chains.find((x)=>x.id === activeChainId)?.name ?? `Chain ${activeChainId}`,\n            targetChain: chains.find((x)=>x.id === chainId)?.name ?? `Chain ${chainId}`\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/providers/alchemy.js":
/*!************************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/providers/alchemy.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alchemyProvider: () => (/* binding */ alchemyProvider)\n/* harmony export */ });\n\n// src/providers/alchemy.ts\nfunction alchemyProvider({ apiKey }) {\n    return function(chain) {\n        const baseHttpUrl = chain.rpcUrls.alchemy?.http[0];\n        const baseWsUrl = chain.rpcUrls.alchemy?.webSocket?.[0];\n        if (!baseHttpUrl) return null;\n        return {\n            chain: {\n                ...chain,\n                rpcUrls: {\n                    ...chain.rpcUrls,\n                    default: {\n                        http: [\n                            `${baseHttpUrl}/${apiKey}`\n                        ]\n                    }\n                }\n            },\n            rpcUrls: {\n                http: [\n                    `${baseHttpUrl}/${apiKey}`\n                ],\n                webSocket: [\n                    `${baseWsUrl}/${apiKey}`\n                ]\n            }\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9wcm92aWRlcnMvYWxjaGVteS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQThCO0FBRTlCLDJCQUEyQjtBQUMzQixTQUFTQSxnQkFBZ0IsRUFDdkJDLE1BQU0sRUFDUDtJQUNDLE9BQU8sU0FBU0MsS0FBSztRQUNuQixNQUFNQyxjQUFjRCxNQUFNRSxPQUFPLENBQUNDLE9BQU8sRUFBRUMsSUFBSSxDQUFDLEVBQUU7UUFDbEQsTUFBTUMsWUFBWUwsTUFBTUUsT0FBTyxDQUFDQyxPQUFPLEVBQUVHLFdBQVcsQ0FBQyxFQUFFO1FBQ3ZELElBQUksQ0FBQ0wsYUFDSCxPQUFPO1FBQ1QsT0FBTztZQUNMRCxPQUFPO2dCQUNMLEdBQUdBLEtBQUs7Z0JBQ1JFLFNBQVM7b0JBQ1AsR0FBR0YsTUFBTUUsT0FBTztvQkFDaEJLLFNBQVM7d0JBQUVILE1BQU07NEJBQUMsQ0FBQyxFQUFFSCxZQUFZLENBQUMsRUFBRUYsT0FBTyxDQUFDO3lCQUFDO29CQUFDO2dCQUNoRDtZQUNGO1lBQ0FHLFNBQVM7Z0JBQ1BFLE1BQU07b0JBQUMsQ0FBQyxFQUFFSCxZQUFZLENBQUMsRUFBRUYsT0FBTyxDQUFDO2lCQUFDO2dCQUNsQ08sV0FBVztvQkFBQyxDQUFDLEVBQUVELFVBQVUsQ0FBQyxFQUFFTixPQUFPLENBQUM7aUJBQUM7WUFDdkM7UUFDRjtJQUNGO0FBQ0Y7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250Ly4vbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvcHJvdmlkZXJzL2FsY2hlbXkuanM/ZDQ0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi9jaHVuay1NUVhCRFRWSy5qc1wiO1xuXG4vLyBzcmMvcHJvdmlkZXJzL2FsY2hlbXkudHNcbmZ1bmN0aW9uIGFsY2hlbXlQcm92aWRlcih7XG4gIGFwaUtleVxufSkge1xuICByZXR1cm4gZnVuY3Rpb24oY2hhaW4pIHtcbiAgICBjb25zdCBiYXNlSHR0cFVybCA9IGNoYWluLnJwY1VybHMuYWxjaGVteT8uaHR0cFswXTtcbiAgICBjb25zdCBiYXNlV3NVcmwgPSBjaGFpbi5ycGNVcmxzLmFsY2hlbXk/LndlYlNvY2tldD8uWzBdO1xuICAgIGlmICghYmFzZUh0dHBVcmwpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhaW46IHtcbiAgICAgICAgLi4uY2hhaW4sXG4gICAgICAgIHJwY1VybHM6IHtcbiAgICAgICAgICAuLi5jaGFpbi5ycGNVcmxzLFxuICAgICAgICAgIGRlZmF1bHQ6IHsgaHR0cDogW2Ake2Jhc2VIdHRwVXJsfS8ke2FwaUtleX1gXSB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBycGNVcmxzOiB7XG4gICAgICAgIGh0dHA6IFtgJHtiYXNlSHR0cFVybH0vJHthcGlLZXl9YF0sXG4gICAgICAgIHdlYlNvY2tldDogW2Ake2Jhc2VXc1VybH0vJHthcGlLZXl9YF1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IHtcbiAgYWxjaGVteVByb3ZpZGVyXG59O1xuIl0sIm5hbWVzIjpbImFsY2hlbXlQcm92aWRlciIsImFwaUtleSIsImNoYWluIiwiYmFzZUh0dHBVcmwiLCJycGNVcmxzIiwiYWxjaGVteSIsImh0dHAiLCJiYXNlV3NVcmwiLCJ3ZWJTb2NrZXQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/providers/alchemy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/providers/public.js":
/*!***********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/providers/public.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicProvider: () => (/* binding */ publicProvider)\n/* harmony export */ });\n\n// src/providers/public.ts\nfunction publicProvider() {\n    return function(chain) {\n        if (!chain.rpcUrls.public.http[0]) return null;\n        return {\n            chain,\n            rpcUrls: chain.rpcUrls.public\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9wcm92aWRlcnMvcHVibGljLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBOEI7QUFFOUIsMEJBQTBCO0FBQzFCLFNBQVNBO0lBQ1AsT0FBTyxTQUFTQyxLQUFLO1FBQ25CLElBQUksQ0FBQ0EsTUFBTUMsT0FBTyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQyxFQUFFLEVBQy9CLE9BQU87UUFDVCxPQUFPO1lBQ0xIO1lBQ0FDLFNBQVNELE1BQU1DLE9BQU8sQ0FBQ0MsTUFBTTtRQUMvQjtJQUNGO0FBQ0Y7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250Ly4vbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvcHJvdmlkZXJzL3B1YmxpYy5qcz8zNjZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLU1RWEJEVFZLLmpzXCI7XG5cbi8vIHNyYy9wcm92aWRlcnMvcHVibGljLnRzXG5mdW5jdGlvbiBwdWJsaWNQcm92aWRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNoYWluKSB7XG4gICAgaWYgKCFjaGFpbi5ycGNVcmxzLnB1YmxpYy5odHRwWzBdKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYWluLFxuICAgICAgcnBjVXJsczogY2hhaW4ucnBjVXJscy5wdWJsaWNcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IHtcbiAgcHVibGljUHJvdmlkZXJcbn07XG4iXSwibmFtZXMiOlsicHVibGljUHJvdmlkZXIiLCJjaGFpbiIsInJwY1VybHMiLCJwdWJsaWMiLCJodHRwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/providers/public.js\n");

/***/ })

};
;