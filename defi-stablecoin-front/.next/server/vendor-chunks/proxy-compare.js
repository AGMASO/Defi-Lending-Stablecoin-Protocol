"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/proxy-compare";
exports.ids = ["vendor-chunks/proxy-compare"];
exports.modules = {

/***/ "(ssr)/./node_modules/proxy-compare/dist/index.modern.js":
/*!*********************************************************!*\
  !*** ./node_modules/proxy-compare/dist/index.modern.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   affectedToPathList: () => (/* binding */ w),\n/* harmony export */   createProxy: () => (/* binding */ a),\n/* harmony export */   getUntracked: () => (/* binding */ y),\n/* harmony export */   isChanged: () => (/* binding */ p),\n/* harmony export */   markToTrack: () => (/* binding */ h),\n/* harmony export */   replaceNewProxy: () => (/* binding */ O),\n/* harmony export */   trackMemo: () => (/* binding */ g)\n/* harmony export */ });\nconst e = Symbol(), t = Symbol(), r = \"a\", n = \"w\";\nlet o = (e, t)=>new Proxy(e, t);\nconst s = Object.getPrototypeOf, c = new WeakMap, l = (e)=>e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype), f = (e)=>\"object\" == typeof e && null !== e, i = (e)=>{\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach((e)=>{\n        e.configurable = !0;\n    }), Object.create(s(e), t);\n}, u = (e)=>e[t] || e, a = (s, c, f, p)=>{\n    if (!l(s)) return s;\n    let g = p && p.get(s);\n    if (!g) {\n        const e = u(s);\n        g = ((e)=>Object.values(Object.getOwnPropertyDescriptors(e)).some((e)=>!e.configurable && !e.writable))(e) ? [\n            e,\n            i(e)\n        ] : [\n            e\n        ], null == p || p.set(s, g);\n    }\n    const [y, h] = g;\n    let w = f && f.get(y);\n    return w && w[1].f === !!h || (w = ((o, s)=>{\n        const c = {\n            f: s\n        };\n        let l = !1;\n        const f = (e, t)=>{\n            if (!l) {\n                let s = c[r].get(o);\n                if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;\n                else {\n                    let r = s[e];\n                    r || (r = new Set, s[e] = r), r.add(t);\n                }\n            }\n        }, i = {\n            get: (e, n)=>n === t ? o : (f(\"k\", n), a(Reflect.get(e, n), c[r], c.c, c.t)),\n            has: (t, n)=>n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n            getOwnPropertyDescriptor: (e, t)=>(f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n            ownKeys: (e)=>(f(n), Reflect.ownKeys(e))\n        };\n        return s && (i.set = i.deleteProperty = ()=>!1), [\n            i,\n            c\n        ];\n    })(y, !!h), w[1].p = o(h || y, w[0]), f && f.set(y, w)), w[1][r] = c, w[1].c = f, w[1].t = p, w[1].p;\n}, p = (e, t, r, o)=>{\n    if (Object.is(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const s = r.get(u(e));\n    if (!s) return !0;\n    if (o) {\n        const r = o.get(e);\n        if (r && r.n === t) return r.g;\n        o.set(e, {\n            n: t,\n            g: !1\n        });\n    }\n    let c = null;\n    try {\n        for (const r of s.h || [])if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n        if (!0 === s[n]) {\n            if (c = ((e, t)=>{\n                const r = Reflect.ownKeys(e), n = Reflect.ownKeys(t);\n                return r.length !== n.length || r.some((e, t)=>e !== n[t]);\n            })(e, t), c) return c;\n        } else for (const r of s.o || [])if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n        for (const n of s.k || [])if (c = p(e[n], t[n], r, o), c) return c;\n        return null === c && (c = !0), c;\n    } finally{\n        o && o.set(e, {\n            n: t,\n            g: c\n        });\n    }\n}, g = (t)=>!!l(t) && e in t, y = (e)=>l(e) && e[t] || null, h = (e, t = !0)=>{\n    c.set(e, t);\n}, w = (e, t, r)=>{\n    const o = [], s = new WeakSet, c = (e, l)=>{\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(u(e));\n        if (i) {\n            var a, p;\n            if (null == (a = i.h) || a.forEach((e)=>{\n                const t = `:has(${String(e)})`;\n                o.push(l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            }), !0 === i[n]) {\n                const e = \":ownKeys\";\n                o.push(l ? [\n                    ...l,\n                    e\n                ] : [\n                    e\n                ]);\n            } else {\n                var g;\n                null == (g = i.o) || g.forEach((e)=>{\n                    const t = `:hasOwn(${String(e)})`;\n                    o.push(l ? [\n                        ...l,\n                        t\n                    ] : [\n                        t\n                    ]);\n                });\n            }\n            null == (p = i.k) || p.forEach((t)=>{\n                r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [\n                    ...l,\n                    t\n                ] : [\n                    t\n                ]);\n            });\n        } else l && o.push(l);\n    };\n    return c(e), o;\n}, O = (e)=>{\n    o = e;\n};\n //# sourceMappingURL=index.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/proxy-compare/dist/index.modern.js\n");

/***/ })

};
;